{
  "name": "labeled-switch",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "react",
    "framer-motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "labeled-switch.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\n\r\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface LabeledSwitchProps {\r\n  firstLabel: React.ReactNode;\r\n  secondLabel: React.ReactNode;\r\n  selected: boolean;\r\n  onToggle: (checked: boolean) => void;\r\n  className?: string;\r\n}\r\n\r\nconst LabeledSwitch = React.forwardRef<\r\n  React.ElementRef<typeof SwitchPrimitives.Root>,\r\n  LabeledSwitchProps\r\n>(\r\n  (\r\n    { className, firstLabel, secondLabel, selected, onToggle, ...props },\r\n    ref,\r\n  ) => {\r\n    return (\r\n      <SwitchPrimitives.Root\r\n        className={cn(\r\n          \"relative flex w-fit cursor-pointer items-center rounded-full ring-2 ring-input transition-colors\",\r\n          className,\r\n        )}\r\n        ref={ref}\r\n        checked={selected}\r\n        onCheckedChange={onToggle}\r\n      >\r\n        <LabeledSwitchButton selected={selected}>\r\n          {firstLabel}\r\n        </LabeledSwitchButton>\r\n        <LabeledSwitchButton selected={!selected}>\r\n          {secondLabel}\r\n        </LabeledSwitchButton>\r\n        <SwitchPrimitives.Thumb\r\n          className={cn(\r\n            \"absolute inset-0 w-full z-0 flex data-[state=unchecked]:justify-start data-[state=checked]:justify-end\",\r\n          )}\r\n        >\r\n          <motion.span\r\n            layout\r\n            transition={{ type: \"spring\", damping: 15, stiffness: 250 }}\r\n            className='h-full w-1/2 rounded-full bg-muted'\r\n          />\r\n        </SwitchPrimitives.Thumb>\r\n      </SwitchPrimitives.Root>\r\n    );\r\n  },\r\n);\r\nLabeledSwitch.displayName = \"LabeledSwitch\";\r\n\r\nconst LabeledSwitchButton = ({\r\n  children,\r\n  selected,\r\n}: {\r\n  children: React.ReactNode;\r\n  selected: boolean;\r\n}) => (\r\n  <div\r\n    className={cn(\r\n      \"relative z-10 flex w-full items-center justify-center gap-2 px-3 py-3 text-xs font-bold transition-colors md:py-1.5 md:pl-3 md:pr-3.5\",\r\n      selected ? \"text-primary\" : \"text-muted-foreground\",\r\n    )}\r\n    onMouseDown={(e) => e.preventDefault()}\r\n  >\r\n    <span className='relative z-10'>{children}</span>\r\n  </div>\r\n);\r\n\r\nexport { LabeledSwitch };\r\n",
      "type": "registry:ui"
    }
  ]
}