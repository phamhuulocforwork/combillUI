{
  "name": "animated-label-input",
  "type": "registry:ui",
  "registryDependencies": [
    "input",
    "label"
  ],
  "dependencies": [
    "react"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "animated-label-input.tsx",
      "content": "import * as React from \"react\";\r\n\r\nimport { Slot } from \"@radix-ui/react-slot\";\r\n\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nexport interface AnimatedLabelProps\r\n  extends React.ComponentPropsWithoutRef<typeof Label> {\r\n  asChild?: boolean;\r\n}\r\n\r\nconst AnimatedLabel = React.forwardRef<\r\n  React.ElementRef<typeof Label>,\r\n  AnimatedLabelProps\r\n>(({ className, asChild = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : Label;\r\n\r\n  return (\r\n    <Comp\r\n      className={cn(\r\n        \"peer-focus:secondary peer-focus:dark:secondary absolute start-2 top-1.5 z-10 origin-[0] -translate-y-4 scale-[0.85] transform bg-background px-2 text-sm text-muted-foreground duration-300 peer-placeholder-shown:top-1/2 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:scale-100 peer-focus:top-1.5 peer-focus:-translate-y-4 peer-focus:scale-[0.85] peer-focus:px-2 dark:bg-background rtl:peer-focus:left-auto rtl:peer-focus:translate-x-1/4 cursor-text\",\r\n        className,\r\n      )}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nAnimatedLabel.displayName = \"AnimatedLabel\";\r\n\r\nexport interface AnimatedLabelInputProps extends InputProps {\r\n  label?: string;\r\n  asChild?: boolean;\r\n}\r\n\r\nconst AnimatedLabelInput = React.forwardRef<\r\n  React.ElementRef<typeof AnimatedInput>,\r\n  AnimatedLabelInputProps\r\n>(({ id, label, asChild = false, ...props }, ref) => {\r\n  const inputRef = React.useRef<HTMLInputElement>(null);\r\n  const Comp = asChild ? Slot : \"div\";\r\n\r\n  React.useImperativeHandle(ref, () => inputRef.current!);\r\n\r\n  const handleLabelClick = () => {\r\n    if (inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Comp className='relative'>\r\n      <AnimatedInput ref={inputRef} id={id} {...props} />\r\n      <AnimatedLabel htmlFor={id} onClick={handleLabelClick}>\r\n        {label}\r\n      </AnimatedLabel>\r\n    </Comp>\r\n  );\r\n});\r\nAnimatedLabelInput.displayName = \"AnimatedLabelInput\";\r\n\r\nexport interface InputProps\r\n  extends React.InputHTMLAttributes<HTMLInputElement> {\r\n  asChild?: boolean;\r\n}\r\n\r\nconst AnimatedInput = React.forwardRef<HTMLInputElement, InputProps>(\r\n  ({ className, asChild = false, ...props }, ref) => {\r\n    const Comp = asChild ? Slot : Input;\r\n\r\n    return (\r\n      <Comp\r\n        placeholder=' '\r\n        className={cn(\"peer\", className)}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nAnimatedInput.displayName = \"AnimatedInput\";\r\n\r\nexport { AnimatedLabelInput, AnimatedLabel, AnimatedInput };\r\n",
      "type": "registry:ui"
    }
  ]
}