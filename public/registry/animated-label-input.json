{
  "name": "animated-label-input",
  "type": "registry:ui",
  "registryDependencies": [
    "input",
    "label"
  ],
  "dependencies": [
    "react"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "animated-label-input.tsx",
      "content": "import * as React from \"react\";\n\nimport { Slot } from \"@radix-ui/react-slot\";\n\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport interface AnimatedLabelProps\n  extends React.ComponentPropsWithoutRef<typeof Label> {\n  asChild?: boolean;\n}\n\nconst AnimatedLabel = React.forwardRef<\n  React.ElementRef<typeof Label>,\n  AnimatedLabelProps\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : Label;\n\n  return (\n    <Comp\n      className={cn(\n        \"peer-focus:secondary peer-focus:dark:secondary absolute start-2 top-1.5 z-10 origin-[0] -translate-y-4 scale-[0.85] transform bg-background px-2 text-sm text-muted-foreground duration-300 peer-placeholder-shown:top-1/2 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:scale-100 peer-focus:top-1.5 peer-focus:-translate-y-4 peer-focus:scale-[0.85] peer-focus:px-2 dark:bg-background rtl:peer-focus:left-auto rtl:peer-focus:translate-x-1/4 cursor-text\",\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  );\n});\nAnimatedLabel.displayName = \"AnimatedLabel\";\n\nexport interface AnimatedLabelInputProps extends InputProps {\n  label?: string;\n  asChild?: boolean;\n}\n\nconst AnimatedLabelInput = React.forwardRef<\n  React.ElementRef<typeof AnimatedInput>,\n  AnimatedLabelInputProps\n>(({ id, label, asChild = false, ...props }, ref) => {\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const Comp = asChild ? Slot : \"div\";\n\n  React.useImperativeHandle(ref, () => inputRef.current!);\n\n  const handleLabelClick = () => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n\n  return (\n    <Comp className='relative'>\n      <AnimatedInput ref={inputRef} id={id} {...props} />\n      <AnimatedLabel htmlFor={id} onClick={handleLabelClick}>\n        {label}\n      </AnimatedLabel>\n    </Comp>\n  );\n});\nAnimatedLabelInput.displayName = \"AnimatedLabelInput\";\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {\n  asChild?: boolean;\n}\n\nconst AnimatedInput = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : Input;\n\n    return (\n      <Comp\n        placeholder=' '\n        className={cn(\"peer\", className)}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nAnimatedInput.displayName = \"AnimatedInput\";\n\nexport { AnimatedLabelInput, AnimatedLabel, AnimatedInput };\n",
      "type": "registry:ui"
    }
  ]
}