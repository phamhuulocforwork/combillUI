{
  "name": "use-click-outside",
  "type": "registry:hook",
  "registryDependencies": [],
  "dependencies": [
    "react"
  ],
  "devDependencies": [],
  "files": [
    {
      "path": "use-click-outside.ts",
      "content": "import * as React from \"react\";\r\n\r\nconst DEFAULT_EVENTS = [\"mousedown\", \"touchstart\"];\r\n\r\nexport function useClickOutside<T extends HTMLElement = any>(\r\n  handler: () => void,\r\n  events?: string[] | null,\r\n  nodes?: (HTMLElement | null)[],\r\n) {\r\n  const ref = React.useRef<T>(null);\r\n\r\n  React.useEffect(() => {\r\n    const listener = (event: any) => {\r\n      const { target } = event ?? {};\r\n      if (Array.isArray(nodes)) {\r\n        const shouldIgnore =\r\n          target?.hasAttribute(\"data-ignore-outside-clicks\") ||\r\n          (!document.body.contains(target) && target.tagName !== \"HTML\");\r\n        const shouldTrigger = nodes.every(\r\n          (node) => !!node && !event.composedPath().includes(node),\r\n        );\r\n        shouldTrigger && !shouldIgnore && handler();\r\n      } else if (ref.current && !ref.current.contains(target)) {\r\n        handler();\r\n      }\r\n    };\r\n\r\n    (events || DEFAULT_EVENTS).forEach((fn) =>\r\n      document.addEventListener(fn, listener),\r\n    );\r\n\r\n    return () => {\r\n      (events || DEFAULT_EVENTS).forEach((fn) =>\r\n        document.removeEventListener(fn, listener),\r\n      );\r\n    };\r\n  }, [ref, handler, nodes]);\r\n\r\n  return ref;\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}