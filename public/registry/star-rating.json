{
  "name": "star-rating",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "react",
    "lucide-react"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "star-rating.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\n\r\nimport { Star } from \"lucide-react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nlet nextId = 0;\r\nconst generateStarIds = (count: number) =>\r\n  Array.from({ length: count }, () => `star-${nextId++}`);\r\n\r\ninterface StarRatingProps {\r\n  value: number;\r\n  onChange?: (value: number) => void;\r\n  className?: string;\r\n  size?: number;\r\n  maxStars?: number;\r\n  readOnly?: boolean;\r\n  color?: string;\r\n}\r\n\r\nconst StarIcon = React.memo(\r\n  ({\r\n    size,\r\n    index,\r\n    isInteractive,\r\n    onClick,\r\n    onMouseMove,\r\n    style,\r\n  }: {\r\n    index: number;\r\n    style: React.CSSProperties;\r\n    size: number;\r\n    onClick: (e: React.MouseEvent<SVGElement>) => void;\r\n    onMouseMove: (e: React.MouseEvent<SVGElement>) => void;\r\n    isInteractive: boolean;\r\n  }) => (\r\n    <Star\r\n      key={index}\r\n      size={size}\r\n      fill={style.fill}\r\n      color={style.color}\r\n      onClick={onClick}\r\n      onMouseMove={onMouseMove}\r\n      className={cn(\r\n        \"transition-colors duration-200\",\r\n        isInteractive && \"cursor-pointer hover:scale-110\",\r\n      )}\r\n      style={style}\r\n    />\r\n  ),\r\n);\r\nStarIcon.displayName = \"StarIcon\";\r\n\r\nconst StarRating = ({\r\n  className,\r\n  color = \"#e4c616\",\r\n  size = 24,\r\n  maxStars = 5,\r\n  onChange,\r\n  readOnly = false,\r\n  value,\r\n}: StarRatingProps) => {\r\n  const [hoverRating, setHoverRating] = React.useState<number | null>(null);\r\n  const [starIds] = React.useState(() => generateStarIds(maxStars));\r\n\r\n  const handleStarClick = React.useCallback(\r\n    (index: number, event: React.MouseEvent<SVGElement>) => {\r\n      if (readOnly || !onChange) return;\r\n      const newRating = index + 1;\r\n      onChange(newRating);\r\n    },\r\n    [readOnly, onChange],\r\n  );\r\n\r\n  const handleStarHover = React.useCallback(\r\n    (index: number, event: React.MouseEvent<SVGElement>) => {\r\n      if (!readOnly) {\r\n        setHoverRating(index + 1);\r\n      }\r\n    },\r\n    [readOnly],\r\n  );\r\n\r\n  const handleMouseLeave = React.useCallback(() => {\r\n    if (!readOnly) {\r\n      setHoverRating(null);\r\n    }\r\n  }, [readOnly]);\r\n\r\n  const getStarStyle = React.useCallback(\r\n    (index: number) => {\r\n      const ratingToUse =\r\n        !readOnly && hoverRating !== null ? hoverRating : value;\r\n\r\n      const difference = ratingToUse - index;\r\n\r\n      if (difference <= 0) return { color: \"gray\", fill: \"transparent\" };\r\n      if (difference >= 1) return { color: color, fill: color };\r\n\r\n      return {\r\n        color: color,\r\n        fill: `url(#${starIds[index]})`,\r\n      } as React.CSSProperties;\r\n    },\r\n    [readOnly, hoverRating, value, color, starIds],\r\n  );\r\n\r\n  const renderGradientDefs = () => {\r\n    if (!readOnly && hoverRating !== null) return null;\r\n\r\n    const partialStarIndex = Math.floor(value);\r\n    const partialFill = (value % 1) * 100;\r\n\r\n    if (partialFill > 0) {\r\n      return (\r\n        <linearGradient\r\n          id={starIds[partialStarIndex]}\r\n          x1='0%'\r\n          y1='0%'\r\n          x2='100%'\r\n          y2='0%'\r\n        >\r\n          <stop offset={`${partialFill}%`} stopColor={color} />\r\n          <stop offset={`${partialFill}%`} stopColor='transparent' />\r\n        </linearGradient>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const stars = React.useMemo(() => {\r\n    return Array.from({ length: maxStars }).map((_, index) => {\r\n      const style = getStarStyle(index);\r\n      return (\r\n        <StarIcon\r\n          key={index}\r\n          index={index}\r\n          style={style}\r\n          size={size}\r\n          onClick={(e) => handleStarClick(index, e)}\r\n          onMouseMove={(e) => handleStarHover(index, e)}\r\n          isInteractive={!readOnly}\r\n        />\r\n      );\r\n    });\r\n  }, [\r\n    maxStars,\r\n    getStarStyle,\r\n    size,\r\n    handleStarClick,\r\n    handleStarHover,\r\n    readOnly,\r\n  ]);\r\n\r\n  return (\r\n    <div\r\n      className={cn(\"relative flex items-center gap-x-0.5\", className)}\r\n      onMouseLeave={handleMouseLeave}\r\n    >\r\n      <svg width='0' height='0' style={{ position: \"absolute\" }}>\r\n        <defs>{renderGradientDefs()}</defs>\r\n      </svg>\r\n      {stars}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StarRating;\r\n",
      "type": "registry:ui"
    }
  ]
}