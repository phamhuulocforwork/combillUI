{
  "name": "code-editor",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "react",
    "class-variance-authority",
    "monaco-editor"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "code-editor.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\n\r\nimport {\r\n  type BeforeMount,\r\n  Editor as MonacoEditor,\r\n  type OnMount,\r\n} from \"@monaco-editor/react\";\r\nimport { type VariantProps, cva } from \"class-variance-authority\";\r\nimport type { editor } from \"monaco-editor\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nexport interface Language {\r\n  value: string;\r\n  label: string;\r\n}\r\n\r\nexport const languages: Language[] = [\r\n  { value: \"javascript\", label: \"JavaScript\" },\r\n  { value: \"typescript\", label: \"TypeScript\" },\r\n  { value: \"html\", label: \"HTML\" },\r\n  { value: \"css\", label: \"CSS\" },\r\n  { value: \"json\", label: \"JSON\" },\r\n  { value: \"markdown\", label: \"Markdown\" },\r\n  { value: \"python\", label: \"Python\" },\r\n  { value: \"java\", label: \"Java\" },\r\n  { value: \"csharp\", label: \"C#\" },\r\n  { value: \"cpp\", label: \"C++\" },\r\n];\r\n\r\nconst codeEditorVariants = cva(\r\n  \"w-full overflow-hidden rounded-md border bg-background\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"border-border\",\r\n        outline: \"border-2\",\r\n      },\r\n      size: {\r\n        default: \"min-h-[300px]\",\r\n        sm: \"min-h-[200px]\",\r\n        lg: \"min-h-[500px]\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  },\r\n);\r\n\r\nexport interface CodeEditorProps\r\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, \"onChange\">,\r\n    VariantProps<typeof codeEditorVariants> {\r\n  value: string;\r\n  onChange?: (value: string) => void;\r\n  language?: string;\r\n  height?: string;\r\n  theme?: \"light\" | \"dark\";\r\n  options?: editor.IStandaloneEditorConstructionOptions;\r\n  onMount?: OnMount;\r\n  readOnly?: boolean;\r\n}\r\n\r\nconst CodeEditor = React.forwardRef<HTMLDivElement, CodeEditorProps>(\r\n  (\r\n    {\r\n      className,\r\n      variant,\r\n      size,\r\n      value,\r\n      onChange,\r\n      language = \"javascript\",\r\n      height = \"300px\",\r\n      theme = \"dark\",\r\n      options,\r\n      onMount,\r\n      readOnly = false,\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => {\r\n    const handleEditorDidMount: OnMount = (editor, monaco) => {\r\n      if (onMount) {\r\n        onMount(editor, monaco);\r\n      }\r\n    };\r\n\r\n    const handleBeforeMount: BeforeMount = (monaco) => {\r\n      // Define VS Code dark theme\r\n      monaco.editor.defineTheme(\"vs-dark-custom\", {\r\n        base: \"vs-dark\",\r\n        inherit: true,\r\n        rules: [],\r\n        colors: {\r\n          \"editor.background\": \"#1e1e1e\",\r\n          \"editor.foreground\": \"#d4d4d4\",\r\n          \"editor.lineHighlightBackground\": \"#2d2d2d\",\r\n          \"editorLineNumber.foreground\": \"#858585\",\r\n          \"editor.selectionBackground\": \"#264f78\",\r\n          \"editor.inactiveSelectionBackground\": \"#3a3d41\",\r\n        },\r\n      });\r\n\r\n      monaco.editor.defineTheme(\"vs-light-custom\", {\r\n        base: \"vs\",\r\n        inherit: true,\r\n        rules: [],\r\n        colors: {\r\n          \"editor.background\": \"#ffffff\",\r\n          \"editor.foreground\": \"#000000\",\r\n          \"editor.lineHighlightBackground\": \"#f5f5f5\",\r\n          \"editorLineNumber.foreground\": \"#999999\",\r\n          \"editor.selectionBackground\": \"#b3d7ff\",\r\n          \"editor.inactiveSelectionBackground\": \"#e5ebf1\",\r\n        },\r\n      });\r\n\r\n      if (monaco.languages.typescript) {\r\n        monaco.languages.typescript.typescriptDefaults.setCompilerOptions({\r\n          target: monaco.languages.typescript.ScriptTarget.Latest,\r\n          allowNonTsExtensions: true,\r\n          moduleResolution:\r\n            monaco.languages.typescript.ModuleResolutionKind.NodeJs,\r\n          module: monaco.languages.typescript.ModuleKind.CommonJS,\r\n          noEmit: true,\r\n          esModuleInterop: true,\r\n          jsx: monaco.languages.typescript.JsxEmit.React,\r\n          reactNamespace: \"React\",\r\n          allowJs: true,\r\n        });\r\n      }\r\n    };\r\n\r\n    const defaultOptions: editor.IStandaloneEditorConstructionOptions = {\r\n      fontSize: 14,\r\n      scrollBeyondLastLine: false,\r\n      automaticLayout: true,\r\n      minimap: { enabled: false },\r\n      folding: true,\r\n      lineNumbers: \"on\",\r\n      wordWrap: \"on\",\r\n      tabSize: 2,\r\n      bracketPairColorization: { enabled: true },\r\n      cursorBlinking: \"blink\",\r\n      formatOnPaste: true,\r\n      readOnly,\r\n      ...options,\r\n    };\r\n\r\n    return (\r\n      <div\r\n        className={cn(codeEditorVariants({ variant, size, className }))}\r\n        ref={ref}\r\n        {...props}\r\n      >\r\n        <MonacoEditor\r\n          height={height}\r\n          language={language}\r\n          value={value}\r\n          onChange={(value) => onChange?.(value || \"\")}\r\n          theme={theme === \"dark\" ? \"vs-dark-custom\" : \"vs-light-custom\"}\r\n          options={defaultOptions}\r\n          beforeMount={handleBeforeMount}\r\n          onMount={handleEditorDidMount}\r\n          loading={\r\n            <div className='flex h-full w-full items-center justify-center text-sm text-muted-foreground'>\r\n              Loading editor...\r\n            </div>\r\n          }\r\n        />\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\nCodeEditor.displayName = \"CodeEditor\";\r\n\r\nexport { CodeEditor, codeEditorVariants };\r\n",
      "type": "registry:ui"
    }
  ]
}