{
  "name": "code-editor",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "react",
    "class-variance-authority",
    "monaco-editor"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "code-editor.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport {\n  type BeforeMount,\n  Editor as MonacoEditor,\n  type OnMount,\n} from \"@monaco-editor/react\";\nimport { type VariantProps, cva } from \"class-variance-authority\";\nimport type { editor } from \"monaco-editor\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport interface Language {\n  value: string;\n  label: string;\n}\n\nexport const languages: Language[] = [\n  { value: \"javascript\", label: \"JavaScript\" },\n  { value: \"typescript\", label: \"TypeScript\" },\n  { value: \"html\", label: \"HTML\" },\n  { value: \"css\", label: \"CSS\" },\n  { value: \"json\", label: \"JSON\" },\n  { value: \"markdown\", label: \"Markdown\" },\n  { value: \"python\", label: \"Python\" },\n  { value: \"java\", label: \"Java\" },\n  { value: \"csharp\", label: \"C#\" },\n  { value: \"cpp\", label: \"C++\" },\n];\n\nconst codeEditorVariants = cva(\n  \"w-full overflow-hidden rounded-md border bg-background\",\n  {\n    variants: {\n      variant: {\n        default: \"border-border\",\n        outline: \"border-2\",\n      },\n      size: {\n        default: \"min-h-[300px]\",\n        sm: \"min-h-[200px]\",\n        lg: \"min-h-[500px]\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface CodeEditorProps\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, \"onChange\">,\n    VariantProps<typeof codeEditorVariants> {\n  value: string;\n  onChange?: (value: string) => void;\n  language?: string;\n  height?: string;\n  theme?: \"light\" | \"dark\";\n  options?: editor.IStandaloneEditorConstructionOptions;\n  onMount?: OnMount;\n  readOnly?: boolean;\n}\n\nconst CodeEditor = React.forwardRef<HTMLDivElement, CodeEditorProps>(\n  (\n    {\n      className,\n      variant,\n      size,\n      value,\n      onChange,\n      language = \"javascript\",\n      height = \"300px\",\n      theme = \"dark\",\n      options,\n      onMount,\n      readOnly = false,\n      ...props\n    },\n    ref,\n  ) => {\n    const handleEditorDidMount: OnMount = (editor, monaco) => {\n      if (onMount) {\n        onMount(editor, monaco);\n      }\n    };\n\n    const handleBeforeMount: BeforeMount = (monaco) => {\n      // Define VS Code dark theme\n      monaco.editor.defineTheme(\"vs-dark-custom\", {\n        base: \"vs-dark\",\n        inherit: true,\n        rules: [],\n        colors: {\n          \"editor.background\": \"#1e1e1e\",\n          \"editor.foreground\": \"#d4d4d4\",\n          \"editor.lineHighlightBackground\": \"#2d2d2d\",\n          \"editorLineNumber.foreground\": \"#858585\",\n          \"editor.selectionBackground\": \"#264f78\",\n          \"editor.inactiveSelectionBackground\": \"#3a3d41\",\n        },\n      });\n\n      monaco.editor.defineTheme(\"vs-light-custom\", {\n        base: \"vs\",\n        inherit: true,\n        rules: [],\n        colors: {\n          \"editor.background\": \"#ffffff\",\n          \"editor.foreground\": \"#000000\",\n          \"editor.lineHighlightBackground\": \"#f5f5f5\",\n          \"editorLineNumber.foreground\": \"#999999\",\n          \"editor.selectionBackground\": \"#b3d7ff\",\n          \"editor.inactiveSelectionBackground\": \"#e5ebf1\",\n        },\n      });\n\n      if (monaco.languages.typescript) {\n        monaco.languages.typescript.typescriptDefaults.setCompilerOptions({\n          target: monaco.languages.typescript.ScriptTarget.Latest,\n          allowNonTsExtensions: true,\n          moduleResolution:\n            monaco.languages.typescript.ModuleResolutionKind.NodeJs,\n          module: monaco.languages.typescript.ModuleKind.CommonJS,\n          noEmit: true,\n          esModuleInterop: true,\n          jsx: monaco.languages.typescript.JsxEmit.React,\n          reactNamespace: \"React\",\n          allowJs: true,\n        });\n      }\n    };\n\n    const defaultOptions: editor.IStandaloneEditorConstructionOptions = {\n      fontSize: 14,\n      scrollBeyondLastLine: false,\n      automaticLayout: true,\n      minimap: { enabled: false },\n      folding: true,\n      lineNumbers: \"on\",\n      wordWrap: \"on\",\n      tabSize: 2,\n      bracketPairColorization: { enabled: true },\n      cursorBlinking: \"blink\",\n      formatOnPaste: true,\n      readOnly,\n      ...options,\n    };\n\n    return (\n      <div\n        className={cn(codeEditorVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      >\n        <MonacoEditor\n          height={height}\n          language={language}\n          value={value}\n          onChange={(value) => onChange?.(value || \"\")}\n          theme={theme === \"dark\" ? \"vs-dark-custom\" : \"vs-light-custom\"}\n          options={defaultOptions}\n          beforeMount={handleBeforeMount}\n          onMount={handleEditorDidMount}\n          loading={\n            <div className='flex h-full w-full items-center justify-center text-sm text-muted-foreground'>\n              Loading editor...\n            </div>\n          }\n        />\n      </div>\n    );\n  },\n);\n\nCodeEditor.displayName = \"CodeEditor\";\n\nexport { CodeEditor, codeEditorVariants };\n",
      "type": "registry:ui"
    }
  ]
}