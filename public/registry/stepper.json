{
  "name": "stepper",
  "type": "registry:ui",
  "registryDependencies": [
    "button"
  ],
  "dependencies": [
    "react",
    "class-variance-authority"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "stepper.tsx",
      "content": "import * as React from \"react\";\n\nimport * as Stepperize from \"@stepperize/react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { type VariantProps, cva } from \"class-variance-authority\";\n\nimport { Button } from \"@/components/ui/button\";\n\nimport { cn } from \"@/lib/utils\";\n\ntype StepperVariant = \"horizontal\" | \"vertical\" | \"circle\";\ntype StepperLabelOrientation = \"horizontal\" | \"vertical\";\n\ntype StepperConfig = {\n  variant?: StepperVariant;\n  labelOrientation?: StepperLabelOrientation;\n  tracking?: boolean;\n};\n\ntype DefineStepperProps<Steps extends Stepperize.Step[]> = Omit<\n  Stepperize.StepperReturn<Steps>,\n  \"Scoped\"\n> & {\n  StepperProvider: (\n    props: Omit<Stepperize.ScopedProps<Steps>, \"children\"> &\n      Omit<React.ComponentProps<\"div\">, \"children\"> &\n      StepperConfig & {\n        children:\n          | React.ReactNode\n          | ((props: {\n              methods: Stepperize.Stepper<Steps>;\n            }) => React.ReactNode);\n      },\n  ) => React.ReactElement;\n  StepperNavigation: (props: React.ComponentProps<\"nav\">) => React.ReactElement;\n  StepperStep: (\n    props: React.ComponentProps<\"button\"> & {\n      of: Stepperize.Get.Id<Steps>;\n      icon?: React.ReactNode;\n    },\n  ) => React.ReactElement;\n  StepperTitle: (\n    props: React.ComponentProps<\"h4\"> & { asChild?: boolean },\n  ) => React.ReactElement;\n  StepperDescription: (\n    props: React.ComponentProps<\"p\"> & { asChild?: boolean },\n  ) => React.ReactElement;\n  StepperPanel: (\n    props: React.ComponentProps<\"div\"> & { asChild?: boolean },\n  ) => React.ReactElement;\n  StepperControls: (\n    props: React.ComponentProps<\"div\"> & { asChild?: boolean },\n  ) => React.ReactElement;\n};\n\ntype CircleStepIndicatorProps = {\n  currentStep: number;\n  totalSteps: number;\n  size?: number;\n  strokeWidth?: number;\n};\n\nconst StepperContext = React.createContext<StepperConfig | null>(null);\n\nconst useStepperProvider = (): StepperConfig => {\n  const context = React.useContext(StepperContext);\n  if (!context) {\n    throw new Error(\"useStepper must be used within a StepperProvider.\");\n  }\n  return context;\n};\n\nconst defineStepper = <const Steps extends Stepperize.Step[]>(\n  ...steps: Steps\n): DefineStepperProps<Steps> => {\n  const { Scoped, useStepper, ...rest } = Stepperize.defineStepper(...steps);\n\n  const StepperContainer = ({\n    children,\n    className,\n    ...props\n  }: Omit<React.ComponentProps<\"div\">, \"children\"> & {\n    children:\n      | React.ReactNode\n      | ((props: { methods: Stepperize.Stepper<Steps> }) => React.ReactNode);\n  }) => {\n    const methods = useStepper();\n\n    return (\n      <div className={cn(\"w-full\", className)} {...props}>\n        {typeof children === \"function\" ? children({ methods }) : children}\n      </div>\n    );\n  };\n\n  return {\n    ...rest,\n    useStepper,\n    StepperProvider: ({\n      variant = \"horizontal\",\n      labelOrientation = \"horizontal\",\n      tracking = false,\n      children,\n      className,\n      ...props\n    }) => {\n      return (\n        <StepperContext.Provider\n          value={{ variant, labelOrientation, tracking }}\n        >\n          <Scoped\n            initialStep={props.initialStep}\n            initialMetadata={props.initialMetadata}\n          >\n            <StepperContainer className={className} {...props}>\n              {children}\n            </StepperContainer>\n          </Scoped>\n        </StepperContext.Provider>\n      );\n    },\n    StepperNavigation: ({\n      children,\n      className,\n      \"aria-label\": ariaLabel = \"Stepper Navigation\",\n      ...props\n    }) => {\n      const { variant } = useStepperProvider();\n      return (\n        <nav\n          aria-label={ariaLabel}\n          role='tablist'\n          className={cn(\"stepper-navigation\", className)}\n          {...props}\n        >\n          <ol className={listVariants({ variant: variant })}>{children}</ol>\n        </nav>\n      );\n    },\n    StepperStep: ({ children, className, icon, ...props }) => {\n      const { variant, labelOrientation } = useStepperProvider();\n      const { current } = useStepper();\n\n      const utils = rest.utils;\n      const steps = rest.steps;\n\n      const stepIndex = utils.getIndex(props.of);\n      const step = steps[stepIndex];\n      const currentIndex = utils.getIndex(current.id);\n\n      const isLast = utils.getLast().id === props.of;\n      const isActive = current.id === props.of;\n\n      const dataState = getStepState(currentIndex, stepIndex);\n      const childMap = useStepChildren(children);\n\n      const title = childMap.get(\"title\");\n      const description = childMap.get(\"description\");\n      const panel = childMap.get(\"panel\");\n\n      if (variant === \"circle\") {\n        return (\n          <li\n            className={cn(\n              \"flex shrink-0 items-center gap-4 rounded-md transition-colors\",\n              className,\n            )}\n          >\n            <CircleStepIndicator\n              currentStep={stepIndex + 1}\n              totalSteps={steps.length}\n            />\n            <div className='flex flex-col items-start gap-1'>\n              {title}\n              {description}\n            </div>\n          </li>\n        );\n      }\n\n      return (\n        <>\n          <li\n            className={cn([\n              \"group peer relative flex items-center gap-2\",\n              \"data-[variant=vertical]:flex-row\",\n              \"data-[label-orientation=vertical]:w-full\",\n              \"data-[label-orientation=vertical]:flex-col\",\n              \"data-[label-orientation=vertical]:justify-center\",\n            ])}\n            data-variant={variant}\n            data-label-orientation={labelOrientation}\n            data-state={dataState}\n            data-disabled={props.disabled}\n          >\n            <Button\n              id={`step-${step.id}`}\n              type='button'\n              role='tab'\n              tabIndex={dataState !== \"inactive\" ? 0 : -1}\n              className='rounded-full'\n              variant={dataState !== \"inactive\" ? \"default\" : \"secondary\"}\n              size='icon'\n              aria-controls={`step-panel-${props.of}`}\n              aria-current={isActive ? \"step\" : undefined}\n              aria-posinset={stepIndex + 1}\n              aria-setsize={steps.length}\n              aria-selected={isActive}\n              onKeyDown={(e) =>\n                onStepKeyDown(\n                  e,\n                  utils.getNext(props.of),\n                  utils.getPrev(props.of),\n                )\n              }\n              {...props}\n            >\n              {icon ?? stepIndex + 1}\n            </Button>\n            {variant === \"horizontal\" && labelOrientation === \"vertical\" && (\n              <StepperSeparator\n                orientation='horizontal'\n                labelOrientation={labelOrientation}\n                isLast={isLast}\n                state={dataState}\n                disabled={props.disabled}\n              />\n            )}\n            <div className='flex flex-col items-start'>\n              {title}\n              {description}\n            </div>\n          </li>\n\n          {variant === \"horizontal\" && labelOrientation === \"horizontal\" && (\n            <StepperSeparator\n              orientation='horizontal'\n              isLast={isLast}\n              state={dataState}\n              disabled={props.disabled}\n            />\n          )}\n\n          {variant === \"vertical\" && (\n            <div className='flex gap-4'>\n              {!isLast && (\n                <div className='flex justify-center ps-5'>\n                  <StepperSeparator\n                    orientation='vertical'\n                    isLast={isLast}\n                    state={dataState}\n                    disabled={props.disabled}\n                  />\n                </div>\n              )}\n              <div className='my-3 flex-1 ps-4'>{panel}</div>\n            </div>\n          )}\n        </>\n      );\n    },\n    StepperTitle,\n    StepperDescription,\n    StepperPanel: ({ children, className, asChild, ...props }) => {\n      const Comp = asChild ? Slot : \"div\";\n      const { tracking } = useStepperProvider();\n\n      return (\n        <Comp\n          className={className}\n          ref={(node) => scrollIntoStepperPanel(node, tracking)}\n          {...props}\n        >\n          {children}\n        </Comp>\n      );\n    },\n    StepperControls: ({ children, className, asChild, ...props }) => {\n      const Comp = asChild ? Slot : \"div\";\n      return (\n        <Comp className={cn(\" flex justify-end gap-4\", className)} {...props}>\n          {children}\n        </Comp>\n      );\n    },\n  };\n};\n\nconst StepperTitle = ({\n  children,\n  className,\n  asChild,\n  ...props\n}: React.ComponentProps<\"h4\"> & { asChild?: boolean }) => {\n  const Comp = asChild ? Slot : \"h4\";\n\n  return (\n    <Comp className={cn(\"text-base font-medium m-0\", className)} {...props}>\n      {children}\n    </Comp>\n  );\n};\n\nconst StepperDescription = ({\n  children,\n  className,\n  asChild,\n  ...props\n}: React.ComponentProps<\"p\"> & { asChild?: boolean }) => {\n  const Comp = asChild ? Slot : \"p\";\n\n  return (\n    <Comp className={cn(\"text-sm text-muted-foreground\", className)} {...props}>\n      {children}\n    </Comp>\n  );\n};\n\nconst StepperSeparator = ({\n  orientation,\n  isLast,\n  labelOrientation,\n  state,\n  disabled,\n}: {\n  isLast: boolean;\n  state: string;\n  disabled?: boolean;\n} & VariantProps<typeof classForSeparator>) => {\n  if (isLast) {\n    return null;\n  }\n  return (\n    <div\n      data-orientation={orientation}\n      data-state={state}\n      data-disabled={disabled}\n      role='separator'\n      tabIndex={-1}\n      className={classForSeparator({ orientation, labelOrientation })}\n    />\n  );\n};\n\nconst CircleStepIndicator = ({\n  currentStep,\n  totalSteps,\n  size = 80,\n  strokeWidth = 6,\n}: CircleStepIndicatorProps) => {\n  const radius = (size - strokeWidth) / 2;\n  const circumference = radius * 2 * Math.PI;\n  const fillPercentage = (currentStep / totalSteps) * 100;\n  const dashOffset = circumference - (circumference * fillPercentage) / 100;\n  return (\n    <div\n      role='progressbar'\n      aria-valuenow={currentStep}\n      aria-valuemin={1}\n      aria-valuemax={totalSteps}\n      tabIndex={-1}\n      className='relative inline-flex items-center justify-center'\n    >\n      <svg width={size} height={size}>\n        <title>Step Indicator</title>\n        <circle\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          fill='none'\n          stroke='currentColor'\n          strokeWidth={strokeWidth}\n          className='text-muted-foreground'\n        />\n        <circle\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          fill='none'\n          stroke='currentColor'\n          strokeWidth={strokeWidth}\n          strokeDasharray={circumference}\n          strokeDashoffset={dashOffset}\n          className='text-primary transition-all duration-300 ease-in-out'\n          transform={`rotate(-90 ${size / 2} ${size / 2})`}\n        />\n      </svg>\n      <div className='absolute inset-0 flex items-center justify-center'>\n        <span className='text-sm font-medium' aria-live='polite'>\n          {currentStep} of {totalSteps}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nconst listVariants = cva(\" flex gap-2\", {\n  variants: {\n    variant: {\n      horizontal: \"flex-row items-center justify-between\",\n      vertical: \"flex-col\",\n      circle: \"flex-row items-center justify-between\",\n    },\n  },\n});\n\nconst classForSeparator = cva(\n  [\n    \"bg-muted\",\n    \"data-[state=completed]:bg-primary data-[disabled]:opacity-50\",\n    \"transition-all duration-300 ease-in-out\",\n  ],\n  {\n    variants: {\n      orientation: {\n        horizontal: \"h-0.5 flex-1\",\n        vertical: \"h-full w-0.5\",\n      },\n      labelOrientation: {\n        vertical:\n          \"absolute left-[calc(50%+30px)] right-[calc(-50%+20px)] top-5 block shrink-0\",\n      },\n    },\n  },\n);\n\nfunction scrollIntoStepperPanel(\n  node: HTMLDivElement | null,\n  tracking?: boolean,\n) {\n  if (tracking) {\n    node?.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n  }\n}\n\nconst useStepChildren = (children: React.ReactNode) => {\n  return React.useMemo(() => extractChildren(children), [children]);\n};\n\nconst extractChildren = (children: React.ReactNode) => {\n  const childrenArray = React.Children.toArray(children);\n  const map = new Map<string, React.ReactNode>();\n\n  for (const child of childrenArray) {\n    if (React.isValidElement(child)) {\n      if (child.type === StepperTitle) {\n        map.set(\"title\", child);\n      } else if (child.type === StepperDescription) {\n        map.set(\"description\", child);\n      } else {\n        map.set(\"panel\", child);\n      }\n    }\n  }\n\n  return map;\n};\n\nconst onStepKeyDown = (\n  e: React.KeyboardEvent<HTMLButtonElement>,\n  nextStep: Stepperize.Step,\n  prevStep: Stepperize.Step,\n) => {\n  const { key } = e;\n  const directions = {\n    next: [\"ArrowRight\", \"ArrowDown\"],\n    prev: [\"ArrowLeft\", \"ArrowUp\"],\n  };\n\n  if (directions.next.includes(key) || directions.prev.includes(key)) {\n    const direction = directions.next.includes(key) ? \"next\" : \"prev\";\n    const step = direction === \"next\" ? nextStep : prevStep;\n\n    if (!step) {\n      return;\n    }\n\n    const stepElement = document.getElementById(`step-${step.id}`);\n    if (!stepElement) {\n      return;\n    }\n\n    const isActive =\n      stepElement.parentElement?.getAttribute(\"data-state\") !== \"inactive\";\n    if (isActive || direction === \"prev\") {\n      stepElement.focus();\n    }\n  }\n};\n\nconst getStepState = (currentIndex: number, stepIndex: number) => {\n  if (currentIndex === stepIndex) {\n    return \"active\";\n  }\n  if (currentIndex > stepIndex) {\n    return \"completed\";\n  }\n  return \"inactive\";\n};\n\nexport { defineStepper };\n",
      "type": "registry:ui"
    }
  ]
}