{
  "name": "stepper",
  "type": "registry:ui",
  "registryDependencies": [
    "button"
  ],
  "dependencies": [
    "react",
    "class-variance-authority"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "stepper.tsx",
      "content": "import * as React from \"react\";\r\nimport { Slot } from \"@radix-ui/react-slot\";\r\nimport * as Stepperize from \"@stepperize/react\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\ntype StepperVariant = \"horizontal\" | \"vertical\" | \"circle\";\r\ntype StepperLabelOrientation = \"horizontal\" | \"vertical\";\r\n\r\ntype StepperConfig = {\r\n  variant?: StepperVariant;\r\n  labelOrientation?: StepperLabelOrientation;\r\n  tracking?: boolean;\r\n};\r\n\r\ntype DefineStepperProps<Steps extends Stepperize.Step[]> = Omit<\r\n  Stepperize.StepperReturn<Steps>,\r\n  \"Scoped\"\r\n> & {\r\n  StepperProvider: (\r\n    props: Omit<Stepperize.ScopedProps<Steps>, \"children\"> &\r\n      Omit<React.ComponentProps<\"div\">, \"children\"> &\r\n      StepperConfig & {\r\n        children:\r\n          | React.ReactNode\r\n          | ((props: { methods: Stepperize.Stepper<Steps> }) => React.ReactNode);\r\n      }\r\n  ) => React.ReactElement;\r\n  StepperNavigation: (props: React.ComponentProps<\"nav\">) => React.ReactElement;\r\n  StepperStep: (\r\n    props: React.ComponentProps<\"button\"> & {\r\n      of: Stepperize.Get.Id<Steps>;\r\n      icon?: React.ReactNode;\r\n    }\r\n  ) => React.ReactElement;\r\n  StepperTitle: (props: React.ComponentProps<\"h4\"> & { asChild?: boolean }) => React.ReactElement;\r\n  StepperDescription: (\r\n    props: React.ComponentProps<\"p\"> & { asChild?: boolean }\r\n  ) => React.ReactElement;\r\n  StepperPanel: (props: React.ComponentProps<\"div\"> & { asChild?: boolean }) => React.ReactElement;\r\n  StepperControls: (\r\n    props: React.ComponentProps<\"div\"> & { asChild?: boolean }\r\n  ) => React.ReactElement;\r\n};\r\n\r\ntype CircleStepIndicatorProps = {\r\n  currentStep: number;\r\n  totalSteps: number;\r\n  size?: number;\r\n  strokeWidth?: number;\r\n};\r\n\r\nconst StepperContext = React.createContext<StepperConfig | null>(null);\r\n\r\nconst useStepperProvider = (): StepperConfig => {\r\n  const context = React.useContext(StepperContext);\r\n  if (!context) {\r\n    throw new Error(\"useStepper must be used within a StepperProvider.\");\r\n  }\r\n  return context;\r\n};\r\n\r\nconst defineStepper = <const Steps extends Stepperize.Step[]>(\r\n  ...steps: Steps\r\n): DefineStepperProps<Steps> => {\r\n  const { Scoped, useStepper, ...rest } = Stepperize.defineStepper(...steps);\r\n\r\n  const StepperContainer = ({\r\n    children,\r\n    className,\r\n    ...props\r\n  }: Omit<React.ComponentProps<\"div\">, \"children\"> & {\r\n    children:\r\n      | React.ReactNode\r\n      | ((props: { methods: Stepperize.Stepper<Steps> }) => React.ReactNode);\r\n  }) => {\r\n    const methods = useStepper();\r\n\r\n    return (\r\n      <div className={cn(\"w-full\", className)} {...props}>\r\n        {typeof children === \"function\" ? children({ methods }) : children}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return {\r\n    ...rest,\r\n    useStepper,\r\n    StepperProvider: ({\r\n      variant = \"horizontal\",\r\n      labelOrientation = \"horizontal\",\r\n      tracking = false,\r\n      children,\r\n      className,\r\n      ...props\r\n    }) => {\r\n      return (\r\n        <StepperContext.Provider value={{ variant, labelOrientation, tracking }}>\r\n          <Scoped initialStep={props.initialStep} initialMetadata={props.initialMetadata}>\r\n            <StepperContainer className={className} {...props}>\r\n              {children}\r\n            </StepperContainer>\r\n          </Scoped>\r\n        </StepperContext.Provider>\r\n      );\r\n    },\r\n    StepperNavigation: ({\r\n      children,\r\n      className,\r\n      \"aria-label\": ariaLabel = \"Stepper Navigation\",\r\n      ...props\r\n    }) => {\r\n      const { variant } = useStepperProvider();\r\n      return (\r\n        <nav\r\n          aria-label={ariaLabel}\r\n          role=\"tablist\"\r\n          className={cn(\"stepper-navigation\", className)}\r\n          {...props}\r\n        >\r\n          <ol className={listVariants({ variant: variant })}>{children}</ol>\r\n        </nav>\r\n      );\r\n    },\r\n    StepperStep: ({ children, className, icon, ...props }) => {\r\n      const { variant, labelOrientation } = useStepperProvider();\r\n      const { current } = useStepper();\r\n\r\n      const utils = rest.utils;\r\n      const steps = rest.steps;\r\n\r\n      const stepIndex = utils.getIndex(props.of);\r\n      const step = steps[stepIndex];\r\n      const currentIndex = utils.getIndex(current.id);\r\n\r\n      const isLast = utils.getLast().id === props.of;\r\n      const isActive = current.id === props.of;\r\n\r\n      const dataState = getStepState(currentIndex, stepIndex);\r\n      const childMap = useStepChildren(children);\r\n\r\n      const title = childMap.get(\"title\");\r\n      const description = childMap.get(\"description\");\r\n      const panel = childMap.get(\"panel\");\r\n\r\n      if (variant === \"circle\") {\r\n        return (\r\n          <li\r\n            className={cn(\r\n              \" flex shrink-0 items-center gap-4 rounded-md transition-colors\",\r\n              className\r\n            )}\r\n          >\r\n            <CircleStepIndicator currentStep={stepIndex + 1} totalSteps={steps.length} />\r\n            <div className=\" flex flex-col items-start gap-1\">\r\n              {title}\r\n              {description}\r\n            </div>\r\n          </li>\r\n        );\r\n      }\r\n\r\n      return (\r\n        <>\r\n          <li\r\n            className={cn([\r\n              \" group peer relative flex items-center gap-2\",\r\n              \"data-[variant=vertical]:flex-row\",\r\n              \"data-[label-orientation=vertical]:w-full\",\r\n              \"data-[label-orientation=vertical]:flex-col\",\r\n              \"data-[label-orientation=vertical]:justify-center\",\r\n            ])}\r\n            data-variant={variant}\r\n            data-label-orientation={labelOrientation}\r\n            data-state={dataState}\r\n            data-disabled={props.disabled}\r\n          >\r\n            <Button\r\n              id={`step-${step.id}`}\r\n              type=\"button\"\r\n              role=\"tab\"\r\n              tabIndex={dataState !== \"inactive\" ? 0 : -1}\r\n              className=\"rounded-full\"\r\n              variant={dataState !== \"inactive\" ? \"default\" : \"secondary\"}\r\n              size=\"icon\"\r\n              aria-controls={`step-panel-${props.of}`}\r\n              aria-current={isActive ? \"step\" : undefined}\r\n              aria-posinset={stepIndex + 1}\r\n              aria-setsize={steps.length}\r\n              aria-selected={isActive}\r\n              onKeyDown={(e) => onStepKeyDown(e, utils.getNext(props.of), utils.getPrev(props.of))}\r\n              {...props}\r\n            >\r\n              {icon ?? stepIndex + 1}\r\n            </Button>\r\n            {variant === \"horizontal\" && labelOrientation === \"vertical\" && (\r\n              <StepperSeparator\r\n                orientation=\"horizontal\"\r\n                labelOrientation={labelOrientation}\r\n                isLast={isLast}\r\n                state={dataState}\r\n                disabled={props.disabled}\r\n              />\r\n            )}\r\n            <div className=\"flex flex-col items-start\">\r\n              {title}\r\n              {description}\r\n            </div>\r\n          </li>\r\n\r\n          {variant === \"horizontal\" && labelOrientation === \"horizontal\" && (\r\n            <StepperSeparator\r\n              orientation=\"horizontal\"\r\n              isLast={isLast}\r\n              state={dataState}\r\n              disabled={props.disabled}\r\n            />\r\n          )}\r\n\r\n          {variant === \"vertical\" && (\r\n            <div className=\"flex gap-4\">\r\n              {!isLast && (\r\n                <div className=\"flex justify-center ps-5\">\r\n                  <StepperSeparator\r\n                    orientation=\"vertical\"\r\n                    isLast={isLast}\r\n                    state={dataState}\r\n                    disabled={props.disabled}\r\n                  />\r\n                </div>\r\n              )}\r\n              <div className=\"my-3 flex-1 ps-4\">{panel}</div>\r\n            </div>\r\n          )}\r\n        </>\r\n      );\r\n    },\r\n    StepperTitle,\r\n    StepperDescription,\r\n    StepperPanel: ({ children, className, asChild, ...props }) => {\r\n      const Comp = asChild ? Slot : \"div\";\r\n      const { tracking } = useStepperProvider();\r\n\r\n      return (\r\n        <Comp\r\n          className={className}\r\n          ref={(node) => scrollIntoStepperPanel(node, tracking)}\r\n          {...props}\r\n        >\r\n          {children}\r\n        </Comp>\r\n      );\r\n    },\r\n    StepperControls: ({ children, className, asChild, ...props }) => {\r\n      const Comp = asChild ? Slot : \"div\";\r\n      return (\r\n        <Comp className={cn(\" flex justify-end gap-4\", className)} {...props}>\r\n          {children}\r\n        </Comp>\r\n      );\r\n    },\r\n  };\r\n};\r\n\r\nconst StepperTitle = ({\r\n  children,\r\n  className,\r\n  asChild,\r\n  ...props\r\n}: React.ComponentProps<\"h4\"> & { asChild?: boolean }) => {\r\n  const Comp = asChild ? Slot : \"h4\";\r\n\r\n  return (\r\n    <Comp className={cn(\" text-base font-medium\", className)} {...props}>\r\n      {children}\r\n    </Comp>\r\n  );\r\n};\r\n\r\nconst StepperDescription = ({\r\n  children,\r\n  className,\r\n  asChild,\r\n  ...props\r\n}: React.ComponentProps<\"p\"> & { asChild?: boolean }) => {\r\n  const Comp = asChild ? Slot : \"p\";\r\n\r\n  return (\r\n    <Comp className={cn(\" text-sm text-muted-foreground\", className)} {...props}>\r\n      {children}\r\n    </Comp>\r\n  );\r\n};\r\n\r\nconst StepperSeparator = ({\r\n  orientation,\r\n  isLast,\r\n  labelOrientation,\r\n  state,\r\n  disabled,\r\n}: {\r\n  isLast: boolean;\r\n  state: string;\r\n  disabled?: boolean;\r\n} & VariantProps<typeof classForSeparator>) => {\r\n  if (isLast) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div\r\n      data-orientation={orientation}\r\n      data-state={state}\r\n      data-disabled={disabled}\r\n      role=\"separator\"\r\n      tabIndex={-1}\r\n      className={classForSeparator({ orientation, labelOrientation })}\r\n    />\r\n  );\r\n};\r\n\r\nconst CircleStepIndicator = ({\r\n  currentStep,\r\n  totalSteps,\r\n  size = 80,\r\n  strokeWidth = 6,\r\n}: CircleStepIndicatorProps) => {\r\n  const radius = (size - strokeWidth) / 2;\r\n  const circumference = radius * 2 * Math.PI;\r\n  const fillPercentage = (currentStep / totalSteps) * 100;\r\n  const dashOffset = circumference - (circumference * fillPercentage) / 100;\r\n  return (\r\n    <div\r\n      role=\"progressbar\"\r\n      aria-valuenow={currentStep}\r\n      aria-valuemin={1}\r\n      aria-valuemax={totalSteps}\r\n      tabIndex={-1}\r\n      className=\"relative inline-flex items-center justify-center\"\r\n    >\r\n      <svg width={size} height={size}>\r\n        <title>Step Indicator</title>\r\n        <circle\r\n          cx={size / 2}\r\n          cy={size / 2}\r\n          r={radius}\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth={strokeWidth}\r\n          className=\"text-muted-foreground\"\r\n        />\r\n        <circle\r\n          cx={size / 2}\r\n          cy={size / 2}\r\n          r={radius}\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth={strokeWidth}\r\n          strokeDasharray={circumference}\r\n          strokeDashoffset={dashOffset}\r\n          className=\"text-primary transition-all duration-300 ease-in-out\"\r\n          transform={`rotate(-90 ${size / 2} ${size / 2})`}\r\n        />\r\n      </svg>\r\n      <div className=\"absolute inset-0 flex items-center justify-center\">\r\n        <span className=\"text-sm font-medium\" aria-live=\"polite\">\r\n          {currentStep} of {totalSteps}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst listVariants = cva(\" flex gap-2\", {\r\n  variants: {\r\n    variant: {\r\n      horizontal: \"flex-row items-center justify-between\",\r\n      vertical: \"flex-col\",\r\n      circle: \"flex-row items-center justify-between\",\r\n    },\r\n  },\r\n});\r\n\r\nconst classForSeparator = cva(\r\n  [\r\n    \"bg-muted\",\r\n    \"data-[state=completed]:bg-primary data-[disabled]:opacity-50\",\r\n    \"transition-all duration-300 ease-in-out\",\r\n  ],\r\n  {\r\n    variants: {\r\n      orientation: {\r\n        horizontal: \"h-0.5 flex-1\",\r\n        vertical: \"h-full w-0.5\",\r\n      },\r\n      labelOrientation: {\r\n        vertical: \"absolute left-[calc(50%+30px)] right-[calc(-50%+20px)] top-5 block shrink-0\",\r\n      },\r\n    },\r\n  }\r\n);\r\n\r\nfunction scrollIntoStepperPanel(node: HTMLDivElement | null, tracking?: boolean) {\r\n  if (tracking) {\r\n    node?.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\r\n  }\r\n}\r\n\r\nconst useStepChildren = (children: React.ReactNode) => {\r\n  return React.useMemo(() => extractChildren(children), [children]);\r\n};\r\n\r\nconst extractChildren = (children: React.ReactNode) => {\r\n  const childrenArray = React.Children.toArray(children);\r\n  const map = new Map<string, React.ReactNode>();\r\n\r\n  for (const child of childrenArray) {\r\n    if (React.isValidElement(child)) {\r\n      if (child.type === StepperTitle) {\r\n        map.set(\"title\", child);\r\n      } else if (child.type === StepperDescription) {\r\n        map.set(\"description\", child);\r\n      } else {\r\n        map.set(\"panel\", child);\r\n      }\r\n    }\r\n  }\r\n\r\n  return map;\r\n};\r\n\r\nconst onStepKeyDown = (\r\n  e: React.KeyboardEvent<HTMLButtonElement>,\r\n  nextStep: Stepperize.Step,\r\n  prevStep: Stepperize.Step\r\n) => {\r\n  const { key } = e;\r\n  const directions = {\r\n    next: [\"ArrowRight\", \"ArrowDown\"],\r\n    prev: [\"ArrowLeft\", \"ArrowUp\"],\r\n  };\r\n\r\n  if (directions.next.includes(key) || directions.prev.includes(key)) {\r\n    const direction = directions.next.includes(key) ? \"next\" : \"prev\";\r\n    const step = direction === \"next\" ? nextStep : prevStep;\r\n\r\n    if (!step) {\r\n      return;\r\n    }\r\n\r\n    const stepElement = document.getElementById(`step-${step.id}`);\r\n    if (!stepElement) {\r\n      return;\r\n    }\r\n\r\n    const isActive = stepElement.parentElement?.getAttribute(\"data-state\") !== \"inactive\";\r\n    if (isActive || direction === \"prev\") {\r\n      stepElement.focus();\r\n    }\r\n  }\r\n};\r\n\r\nconst getStepState = (currentIndex: number, stepIndex: number) => {\r\n  if (currentIndex === stepIndex) {\r\n    return \"active\";\r\n  }\r\n  if (currentIndex > stepIndex) {\r\n    return \"completed\";\r\n  }\r\n  return \"inactive\";\r\n};\r\n\r\nexport { defineStepper };\r\n",
      "type": "registry:ui"
    }
  ]
}