{
  "name": "range-slider",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "react"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "range-slider.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\n\r\nimport * as SliderPrimitive from \"@radix-ui/react-slider\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface RangeSliderProps\r\n  extends React.ComponentProps<typeof SliderPrimitive.Root> {\r\n  labelPosition?: \"top\" | \"bottom\";\r\n  label?: (value: number | undefined) => React.ReactNode;\r\n  orientation?: \"horizontal\" | \"vertical\";\r\n}\r\n\r\nconst RangeSlider = React.forwardRef<\r\n  React.ElementRef<typeof SliderPrimitive.Root>,\r\n  RangeSliderProps\r\n>(\r\n  (\r\n    {\r\n      className,\r\n      label,\r\n      labelPosition = \"top\",\r\n      orientation = \"horizontal\",\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => {\r\n    const initialValue = Array.isArray(props.value)\r\n      ? props.value\r\n      : [props.min, props.max];\r\n\r\n    return (\r\n      <SliderPrimitive.Root\r\n        ref={ref}\r\n        orientation={orientation}\r\n        className={cn(\r\n          orientation === \"horizontal\"\r\n            ? \"relative flex w-full touch-none select-none items-center\"\r\n            : \"relative flex h-full min-h-[200px] touch-none select-none flex-col items-center\",\r\n          className,\r\n        )}\r\n        {...props}\r\n      >\r\n        <SliderPrimitive.Track\r\n          className={cn(\r\n            orientation === \"horizontal\"\r\n              ? \"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\"\r\n              : \"relative w-2 h-full grow overflow-hidden rounded-full bg-secondary\",\r\n          )}\r\n        >\r\n          <SliderPrimitive.Range\r\n            className={cn(\r\n              orientation === \"horizontal\"\r\n                ? \"absolute h-full bg-primary\"\r\n                : \"absolute w-full bg-primary\",\r\n            )}\r\n          />\r\n        </SliderPrimitive.Track>\r\n        {initialValue.map((value, index) => (\r\n          <React.Fragment key={index}>\r\n            <SliderPrimitive.Thumb\r\n              className={cn(\r\n                \"relative block border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\r\n                orientation === \"horizontal\"\r\n                  ? \"h-5 w-2 rounded-sm\"\r\n                  : \"h-2 w-5 rounded-sm\",\r\n              )}\r\n            >\r\n              {label && (\r\n                <span\r\n                  className={cn(\r\n                    \"absolute flex text-xs justify-center font-medium\",\r\n                    orientation === \"horizontal\"\r\n                      ? labelPosition === \"top\"\r\n                        ? \"-left-2 -top-5\"\r\n                        : \"-left-2 top-5\"\r\n                      : labelPosition === \"top\"\r\n                        ? \"-translate-x-full -translate-y-1/2 -left-2\"\r\n                        : \"translate-x-full -translate-y-1/2\",\r\n                  )}\r\n                >\r\n                  {label(value)}\r\n                </span>\r\n              )}\r\n            </SliderPrimitive.Thumb>\r\n          </React.Fragment>\r\n        ))}\r\n      </SliderPrimitive.Root>\r\n    );\r\n  },\r\n);\r\nRangeSlider.displayName = \"RangeSlider\";\r\n\r\nexport { RangeSlider };\r\n",
      "type": "registry:ui"
    }
  ]
}