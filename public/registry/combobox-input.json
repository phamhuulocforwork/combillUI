{
  "name": "combobox-input",
  "type": "registry:ui",
  "registryDependencies": [
    "command",
    "skeleton"
  ],
  "dependencies": [
    "react",
    "lucide-react",
    "react-popper"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "combobox-input.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport { Check } from \"lucide-react\";\nimport { type PopperProps, usePopper } from \"react-popper\";\n\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandLoading,\n} from \"@/components/ui/command\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport { useControllableState } from \"@/registry/default/hooks/use-controllable-state\";\n\ninterface Option {\n  label: string;\n  value: string;\n  icon?: React.ComponentType<{ className?: string }>;\n  withCount?: boolean;\n}\n\nconst nonPrintableKeys = [\n  \"Tab\",\n  \"Control\",\n  \"Alt\",\n  \"Shift\",\n  \"Delete\",\n  \"Home\",\n  \"End\",\n  \"PageUp\",\n  \"PageDown\",\n  \"Insert\",\n  \"ArrowLeft\",\n  \"ArrowRight\",\n];\n\ninterface ComboboxInputProps\n  extends Omit<\n    React.ComponentPropsWithoutRef<typeof CommandInput>,\n    \"defaultValue\" | \"value\" | \"onValueChange\"\n  > {\n  options: Option[];\n  input?: string;\n  onInputChange?: (value: string) => void;\n  defaultValue?: Option;\n  value?: Option;\n  onValueChange?: (option: Option) => void;\n  emptyMessage?: string;\n  immediate?: boolean;\n  placement?: PopperProps<HTMLElement>[\"placement\"];\n  alignOffset?: number;\n  sideOffset?: number;\n  loading?: boolean;\n}\n\nexport function ComboboxInput({\n  options,\n  input,\n  onInputChange,\n  defaultValue,\n  value,\n  onValueChange,\n  placeholder,\n  emptyMessage = \"No results found\",\n  placement = \"bottom-start\",\n  alignOffset = 0,\n  sideOffset = 4,\n  immediate = false,\n  loading = false,\n  className,\n  ...props\n}: ComboboxInputProps) {\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const [open, setOpen] = React.useState(false);\n  const [controlledInput, setControlledInput] = useControllableState({\n    prop: input,\n    onChange: onInputChange,\n  });\n\n  const [currentOption, setCurrentOption] = useControllableState({\n    defaultProp: defaultValue,\n    prop: value,\n    onChange: onValueChange,\n  });\n\n  const [referenceElement, setReferenceElement] =\n    React.useState<HTMLDivElement | null>(null);\n  const [popperElement, setPopperElement] =\n    React.useState<HTMLDivElement | null>(null);\n  const { styles, attributes } = usePopper(referenceElement, popperElement, {\n    modifiers: [\n      { name: \"offset\", options: { offset: [alignOffset, sideOffset] } },\n    ],\n    placement,\n  });\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      const inputElement = inputRef.current;\n      if (!inputElement) return;\n\n      if (nonPrintableKeys.includes(event.key)) return;\n\n      if (event.key === \"Backspace\" && inputElement.value === \"\" && !open) {\n        if (open) setOpen(false);\n        return;\n      }\n\n      if (event.key === \"Escape\") {\n        if (currentOption && inputElement.value === currentOption.label) {\n          if (open) setOpen(false);\n          return;\n        }\n\n        if (inputElement.value === \"\") {\n          if (open) setOpen(false);\n          return;\n        }\n\n        setControlledInput(\"\");\n        setOpen(false);\n        setCurrentOption(undefined);\n        inputRef.current?.focus();\n      }\n\n      if (event.key === \"Enter\" && inputElement.value !== \"\") {\n        const selectedOption = options.find(\n          (option) => option.label === inputElement.value,\n        );\n        setCurrentOption(selectedOption);\n      }\n\n      if (!open) setOpen(true);\n    },\n    [currentOption, open, options, setControlledInput, setCurrentOption],\n  );\n\n  const onBlur = React.useCallback(() => {\n    setOpen(false);\n    setControlledInput(currentOption?.label ?? \"\");\n  }, [currentOption?.label, setControlledInput]);\n\n  const onSelect = React.useCallback(\n    (selectedOption: Option) => {\n      setControlledInput(selectedOption.label);\n      setCurrentOption(selectedOption);\n      setOpen(false);\n    },\n    [setControlledInput, setCurrentOption],\n  );\n\n  return (\n    <Command\n      ref={setReferenceElement}\n      className='relative overflow-visible [&_[cmdk-input-wrapper]]:rounded-md [&_[cmdk-input-wrapper]]:border'\n      onKeyDown={onKeyDown}\n      {...attributes.reference}\n    >\n      <CommandInput\n        ref={inputRef}\n        value={controlledInput}\n        onValueChange={(value) => {\n          if (loading) return;\n\n          setControlledInput(value);\n          if (value === \"\") {\n            setCurrentOption(undefined);\n          }\n        }}\n        onBlur={onBlur}\n        onFocus={() => {\n          if (immediate) {\n            setOpen(true);\n          }\n        }}\n        placeholder={placeholder}\n        className={cn(\"border-b-0\", className)}\n        {...props}\n      />\n      <CommandList\n        ref={setPopperElement}\n        data-state={open ? \"open\" : \"closed\"}\n        style={styles.popper}\n        className={cn(\n          \"z-50 w-full rounded-md border bg-popover text-popover-foreground shadow-md outline-none data-[state=open]:visible data-[state=closed]:invisible data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95\",\n          \"data-[popper-placement=bottom-end]:translate-x-1/2 data-[popper-placement=bottom-start]:-translate-x-1/2 data-[popper-placement=left-end]:translate-y-1/2 data-[popper-placement=left-start]:-translate-y-1/2 data-[popper-placement=right-end]:translate-y-1/2 data-[popper-placement=right-start]:-translate-y-1/2 data-[popper-placement=top-end]:translate-x-1/2 data-[popper-placement=top-start]:-translate-x-1/2 data-[popper-placement=bottom-end]:slide-in-from-top-2 data-[popper-placement=bottom-start]:slide-in-from-top-2 data-[popper-placement=bottom]:slide-in-from-top-2 data-[popper-placement=left-end]:slide-in-from-right-2 data-[popper-placement=left-start]:slide-in-from-right-2 data-[popper-placement=left]:slide-in-from-right-2 data-[popper-placement=right-end]:slide-in-from-left-2 data-[popper-placement=right-start]:slide-in-from-left-2 data-[popper-placement=right]:slide-in-from-left-2 data-[popper-placement=top-end]:slide-in-from-bottom-2 data-[popper-placement=top-start]:slide-in-from-bottom-2 data-[popper-placement=top]:slide-in-from-bottom-2\",\n        )}\n        {...attributes.popper}\n      >\n        {loading ? (\n          <CommandLoading className='p-1'>\n            <Skeleton className='h-8 w-full' />\n          </CommandLoading>\n        ) : null}\n        {options.length > 0 && !loading ? (\n          <CommandGroup>\n            {options.map((option) => {\n              const isSelected = currentOption?.value === option.value;\n\n              return (\n                <CommandItem\n                  key={option.value}\n                  value={option.label}\n                  onMouseDown={(event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                  }}\n                  onSelect={() => onSelect(option)}\n                  className={cn(\"flex w-full items-center gap-2\", {\n                    \"pl-8\": !isSelected,\n                  })}\n                >\n                  {isSelected ? (\n                    <Check className='w-4' aria-hidden='true' />\n                  ) : null}\n                  {option.label}\n                </CommandItem>\n              );\n            })}\n          </CommandGroup>\n        ) : null}\n        {loading ? null : <CommandEmpty>{emptyMessage}</CommandEmpty>}\n      </CommandList>\n    </Command>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}