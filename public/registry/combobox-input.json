{
  "name": "combobox-input",
  "type": "registry:ui",
  "registryDependencies": [
    "command",
    "skeleton"
  ],
  "dependencies": [
    "react",
    "lucide-react",
    "react-popper"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "combobox-input.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\n\r\nimport { Check } from \"lucide-react\";\r\nimport { type PopperProps, usePopper } from \"react-popper\";\r\n\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n  CommandLoading,\r\n} from \"@/components/ui/command\";\r\nimport { Skeleton } from \"@/components/ui/skeleton\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nimport { useControllableState } from \"@/registry/default/hooks/use-controllable-state\";\r\n\r\ninterface Option {\r\n  label: string;\r\n  value: string;\r\n  icon?: React.ComponentType<{ className?: string }>;\r\n  withCount?: boolean;\r\n}\r\n\r\nconst nonPrintableKeys = [\r\n  \"Tab\",\r\n  \"Control\",\r\n  \"Alt\",\r\n  \"Shift\",\r\n  \"Delete\",\r\n  \"Home\",\r\n  \"End\",\r\n  \"PageUp\",\r\n  \"PageDown\",\r\n  \"Insert\",\r\n  \"ArrowLeft\",\r\n  \"ArrowRight\",\r\n];\r\n\r\ninterface ComboboxInputProps\r\n  extends Omit<\r\n    React.ComponentPropsWithoutRef<typeof CommandInput>,\r\n    \"defaultValue\" | \"value\" | \"onValueChange\"\r\n  > {\r\n  options: Option[];\r\n  input?: string;\r\n  onInputChange?: (value: string) => void;\r\n  defaultValue?: Option;\r\n  value?: Option;\r\n  onValueChange?: (option: Option) => void;\r\n  emptyMessage?: string;\r\n  immediate?: boolean;\r\n  placement?: PopperProps<HTMLElement>[\"placement\"];\r\n  alignOffset?: number;\r\n  sideOffset?: number;\r\n  loading?: boolean;\r\n}\r\n\r\nexport function ComboboxInput({\r\n  options,\r\n  input,\r\n  onInputChange,\r\n  defaultValue,\r\n  value,\r\n  onValueChange,\r\n  placeholder,\r\n  emptyMessage = \"No results found\",\r\n  placement = \"bottom-start\",\r\n  alignOffset = 0,\r\n  sideOffset = 4,\r\n  immediate = false,\r\n  loading = false,\r\n  className,\r\n  ...props\r\n}: ComboboxInputProps) {\r\n  const inputRef = React.useRef<HTMLInputElement>(null);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [controlledInput, setControlledInput] = useControllableState({\r\n    prop: input,\r\n    onChange: onInputChange,\r\n  });\r\n\r\n  const [currentOption, setCurrentOption] = useControllableState({\r\n    defaultProp: defaultValue,\r\n    prop: value,\r\n    onChange: onValueChange,\r\n  });\r\n\r\n  const [referenceElement, setReferenceElement] =\r\n    React.useState<HTMLDivElement | null>(null);\r\n  const [popperElement, setPopperElement] =\r\n    React.useState<HTMLDivElement | null>(null);\r\n  const { styles, attributes } = usePopper(referenceElement, popperElement, {\r\n    modifiers: [\r\n      { name: \"offset\", options: { offset: [alignOffset, sideOffset] } },\r\n    ],\r\n    placement,\r\n  });\r\n\r\n  const onKeyDown = React.useCallback(\r\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\r\n      const inputElement = inputRef.current;\r\n      if (!inputElement) return;\r\n\r\n      if (nonPrintableKeys.includes(event.key)) return;\r\n\r\n      if (event.key === \"Backspace\" && inputElement.value === \"\" && !open) {\r\n        if (open) setOpen(false);\r\n        return;\r\n      }\r\n\r\n      if (event.key === \"Escape\") {\r\n        if (currentOption && inputElement.value === currentOption.label) {\r\n          if (open) setOpen(false);\r\n          return;\r\n        }\r\n\r\n        if (inputElement.value === \"\") {\r\n          if (open) setOpen(false);\r\n          return;\r\n        }\r\n\r\n        setControlledInput(\"\");\r\n        setOpen(false);\r\n        setCurrentOption(undefined);\r\n        inputRef.current?.focus();\r\n      }\r\n\r\n      if (event.key === \"Enter\" && inputElement.value !== \"\") {\r\n        const selectedOption = options.find(\r\n          (option) => option.label === inputElement.value,\r\n        );\r\n        setCurrentOption(selectedOption);\r\n      }\r\n\r\n      if (!open) setOpen(true);\r\n    },\r\n    [currentOption, open, options, setControlledInput, setCurrentOption],\r\n  );\r\n\r\n  const onBlur = React.useCallback(() => {\r\n    setOpen(false);\r\n    setControlledInput(currentOption?.label ?? \"\");\r\n  }, [currentOption?.label, setControlledInput]);\r\n\r\n  const onSelect = React.useCallback(\r\n    (selectedOption: Option) => {\r\n      setControlledInput(selectedOption.label);\r\n      setCurrentOption(selectedOption);\r\n      setOpen(false);\r\n    },\r\n    [setControlledInput, setCurrentOption],\r\n  );\r\n\r\n  return (\r\n    <Command\r\n      ref={setReferenceElement}\r\n      className='relative overflow-visible [&_[cmdk-input-wrapper]]:rounded-md [&_[cmdk-input-wrapper]]:border'\r\n      onKeyDown={onKeyDown}\r\n      {...attributes.reference}\r\n    >\r\n      <CommandInput\r\n        ref={inputRef}\r\n        value={controlledInput}\r\n        onValueChange={(value) => {\r\n          if (loading) return;\r\n\r\n          setControlledInput(value);\r\n          if (value === \"\") {\r\n            setCurrentOption(undefined);\r\n          }\r\n        }}\r\n        onBlur={onBlur}\r\n        onFocus={() => {\r\n          if (immediate) {\r\n            setOpen(true);\r\n          }\r\n        }}\r\n        placeholder={placeholder}\r\n        className={cn(\"border-b-0\", className)}\r\n        {...props}\r\n      />\r\n      <CommandList\r\n        ref={setPopperElement}\r\n        data-state={open ? \"open\" : \"closed\"}\r\n        style={styles.popper}\r\n        className={cn(\r\n          \"z-50 w-full rounded-md border bg-popover text-popover-foreground shadow-md outline-none data-[state=open]:visible data-[state=closed]:invisible data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95\",\r\n          \"data-[popper-placement=bottom-end]:translate-x-1/2 data-[popper-placement=bottom-start]:-translate-x-1/2 data-[popper-placement=left-end]:translate-y-1/2 data-[popper-placement=left-start]:-translate-y-1/2 data-[popper-placement=right-end]:translate-y-1/2 data-[popper-placement=right-start]:-translate-y-1/2 data-[popper-placement=top-end]:translate-x-1/2 data-[popper-placement=top-start]:-translate-x-1/2 data-[popper-placement=bottom-end]:slide-in-from-top-2 data-[popper-placement=bottom-start]:slide-in-from-top-2 data-[popper-placement=bottom]:slide-in-from-top-2 data-[popper-placement=left-end]:slide-in-from-right-2 data-[popper-placement=left-start]:slide-in-from-right-2 data-[popper-placement=left]:slide-in-from-right-2 data-[popper-placement=right-end]:slide-in-from-left-2 data-[popper-placement=right-start]:slide-in-from-left-2 data-[popper-placement=right]:slide-in-from-left-2 data-[popper-placement=top-end]:slide-in-from-bottom-2 data-[popper-placement=top-start]:slide-in-from-bottom-2 data-[popper-placement=top]:slide-in-from-bottom-2\",\r\n        )}\r\n        {...attributes.popper}\r\n      >\r\n        {loading ? (\r\n          <CommandLoading className='p-1'>\r\n            <Skeleton className='h-8 w-full' />\r\n          </CommandLoading>\r\n        ) : null}\r\n        {options.length > 0 && !loading ? (\r\n          <CommandGroup>\r\n            {options.map((option) => {\r\n              const isSelected = currentOption?.value === option.value;\r\n\r\n              return (\r\n                <CommandItem\r\n                  key={option.value}\r\n                  value={option.label}\r\n                  onMouseDown={(event) => {\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                  }}\r\n                  onSelect={() => onSelect(option)}\r\n                  className={cn(\"flex w-full items-center gap-2\", {\r\n                    \"pl-8\": !isSelected,\r\n                  })}\r\n                >\r\n                  {isSelected ? (\r\n                    <Check className='w-4' aria-hidden='true' />\r\n                  ) : null}\r\n                  {option.label}\r\n                </CommandItem>\r\n              );\r\n            })}\r\n          </CommandGroup>\r\n        ) : null}\r\n        {loading ? null : <CommandEmpty>{emptyMessage}</CommandEmpty>}\r\n      </CommandList>\r\n    </Command>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}