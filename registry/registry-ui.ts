import type { Registry } from "@/registry/schema";

export const ui: Registry = [
  {
    name: "animated-label-input",
    type: "registry:ui",
    registryDependencies: ["input", "label"],
    dependencies: ["react"],
    devDependencies: [],
    tailwind: {},
    cssVars: {
      light: {},
      dark: {},
    },
    files: [
      {
        path: "registry/default/ui/animated-label-input.tsx",
        content:
          'import * as React from "react";\r\n\r\nimport { Input } from "@/components/ui/input";\r\nimport { Label } from "@/components/ui/label";\r\n\r\nimport { cn } from "@/lib/utils";\r\n\r\nconst AnimatedLabel = React.forwardRef<\r\n  React.ElementRef<typeof Label>,\r\n  React.ComponentPropsWithoutRef<typeof Label>\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <Label\r\n      className={cn(\r\n        "peer-focus:secondary peer-focus:dark:secondary absolute start-2 top-1.5 z-10 origin-[0] -translate-y-4 scale-[0.85] transform bg-background px-2 text-sm text-muted-foreground duration-300 peer-placeholder-shown:top-1/2 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:scale-100 peer-focus:top-1.5 peer-focus:-translate-y-4 peer-focus:scale-[0.85] peer-focus:px-2 dark:bg-background rtl:peer-focus:left-auto rtl:peer-focus:translate-x-1/4 cursor-text",\r\n        className,\r\n      )}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nAnimatedLabel.displayName = "AnimatedLabel";\r\n\r\ntype AnimatedLabelInputProps = InputProps & { label?: string };\r\n\r\nconst AnimatedLabelInput = React.forwardRef<\r\n  React.ElementRef<typeof AnimatedInput>,\r\n  React.PropsWithoutRef<AnimatedLabelInputProps>\r\n>(({ id, label, ...props }, ref) => {\r\n  const inputRef = React.useRef<HTMLInputElement>(null);\r\n\r\n  React.useImperativeHandle(ref, () => inputRef.current!);\r\n\r\n  const handleLabelClick = () => {\r\n    if (inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\'relative \'>\r\n      <AnimatedInput ref={inputRef} id={id} {...props} />\r\n      <AnimatedLabel htmlFor={id} onClick={handleLabelClick}>\r\n        {label}\r\n      </AnimatedLabel>\r\n    </div>\r\n  );\r\n});\r\nAnimatedLabelInput.displayName = "AnimatedLabelInput";\r\n\r\nexport interface InputProps\r\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\r\n\r\nconst AnimatedInput = React.forwardRef<HTMLInputElement, InputProps>(\r\n  ({ className, ...props }, ref) => {\r\n    return (\r\n      <Input\r\n        placeholder=\' \'\r\n        className={cn("peer", className)}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nAnimatedInput.displayName = "AnimatedInput";\r\n\r\nexport { AnimatedLabelInput, AnimatedLabel, AnimatedInput };\r\n',
        type: "registry:ui",
      },
    ],
  },
  {
    name: "animated-tooltip",
    type: "registry:ui",
    registryDependencies: [],
    dependencies: ["react", "framer-motion"],
    devDependencies: [],
    tailwind: {},
    cssVars: {
      light: {},
      dark: {},
    },
    files: [
      {
        path: "registry/default/ui/animated-tooltip.tsx",
        content:
          '"use client";\r\n\r\nimport * as React from "react";\r\n\r\nimport * as TooltipPrimitive from "@radix-ui/react-tooltip";\r\nimport { motion, useMotionValue, useSpring, useTransform } from "framer-motion";\r\n\r\nimport { cn } from "@/lib/utils";\r\n\r\nconst AnimatedTooltipProvider = TooltipPrimitive.Provider;\r\nconst AnimatedTooltip = TooltipPrimitive.Root;\r\nconst AnimatedTooltipTrigger = TooltipPrimitive.Trigger;\r\n\r\nconst springConfig = { stiffness: 100, damping: 5 };\r\n\r\nconst AnimatedTooltipContent = React.forwardRef<\r\n  React.ElementRef<typeof TooltipPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\r\n>(({ className, sideOffset = 4, ...props }, ref) => {\r\n  const x = useMotionValue(0);\r\n  const rotate = useSpring(\r\n    useTransform(x, [-100, 100], [-45, 45]),\r\n    springConfig,\r\n  );\r\n  const translateX = useSpring(\r\n    useTransform(x, [-100, 100], [-50, 50]),\r\n    springConfig,\r\n  );\r\n\r\n  const handleMouseMove = (event: any) => {\r\n    const halfWidth = event.currentTarget.offsetWidth / 2;\r\n    x.set(event.nativeEvent.offsetX - halfWidth);\r\n  };\r\n\r\n  return (\r\n    <TooltipPrimitive.Portal>\r\n      <TooltipPrimitive.Content ref={ref} sideOffset={sideOffset} {...props}>\r\n        <motion.div\r\n          onMouseMove={handleMouseMove}\r\n          initial={{ opacity: 0, y: 20, scale: 0.6 }}\r\n          animate={{\r\n            opacity: 1,\r\n            y: 0,\r\n            scale: 1,\r\n            transition: {\r\n              type: "spring",\r\n              stiffness: 260,\r\n              damping: 10,\r\n            },\r\n          }}\r\n          exit={{ opacity: 0, y: 20, scale: 0.6 }}\r\n          style={{\r\n            translateX: translateX,\r\n            rotate: rotate,\r\n          }}\r\n          className={cn(\r\n            "flex flex-col items-center justify-center rounded-md z-50 shadow-xl bg-primary px-3 py-1.5 text-primary-foreground ",\r\n            className,\r\n          )}\r\n        >\r\n          {props.children}\r\n        </motion.div>\r\n      </TooltipPrimitive.Content>\r\n    </TooltipPrimitive.Portal>\r\n  );\r\n});\r\nAnimatedTooltipContent.displayName = TooltipPrimitive.Content.displayName;\r\n\r\nexport {\r\n  AnimatedTooltip,\r\n  AnimatedTooltipTrigger,\r\n  AnimatedTooltipContent,\r\n  AnimatedTooltipProvider,\r\n};\r\n',
        type: "registry:ui",
      },
    ],
  },
  {
    name: "combobox-input",
    type: "registry:ui",
    registryDependencies: ["command", "skeleton"],
    dependencies: ["react", "lucide-react", "react-popper"],
    devDependencies: [],
    tailwind: {},
    cssVars: {
      light: {},
      dark: {},
    },
    files: [
      {
        path: "registry/default/ui/combobox-input.tsx",
        content:
          '"use client";\r\n\r\nimport * as React from "react";\r\n\r\nimport { Check } from "lucide-react";\r\nimport { type PopperProps, usePopper } from "react-popper";\r\n\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n  CommandLoading,\r\n} from "@/components/ui/command";\r\nimport { Skeleton } from "@/components/ui/skeleton";\r\n\r\nimport { cn } from "@/lib/utils";\r\n\r\nimport { useControllableState } from "@/registry/default/hooks/use-controllable-state";\r\n\r\ninterface Option {\r\n  label: string;\r\n  value: string;\r\n  icon?: React.ComponentType<{ className?: string }>;\r\n  withCount?: boolean;\r\n}\r\n\r\nconst nonPrintableKeys = [\r\n  "Tab",\r\n  "Control",\r\n  "Alt",\r\n  "Shift",\r\n  "Delete",\r\n  "Home",\r\n  "End",\r\n  "PageUp",\r\n  "PageDown",\r\n  "Insert",\r\n  "ArrowLeft",\r\n  "ArrowRight",\r\n];\r\n\r\ninterface ComboboxInputProps\r\n  extends Omit<\r\n    React.ComponentPropsWithoutRef<typeof CommandInput>,\r\n    "defaultValue" | "value" | "onValueChange"\r\n  > {\r\n  options: Option[];\r\n  input?: string;\r\n  onInputChange?: (value: string) => void;\r\n  defaultValue?: Option;\r\n  value?: Option;\r\n  onValueChange?: (option: Option) => void;\r\n  emptyMessage?: string;\r\n  immediate?: boolean;\r\n  placement?: PopperProps<HTMLElement>["placement"];\r\n  alignOffset?: number;\r\n  sideOffset?: number;\r\n  loading?: boolean;\r\n}\r\n\r\nexport function ComboboxInput({\r\n  options,\r\n  input,\r\n  onInputChange,\r\n  defaultValue,\r\n  value,\r\n  onValueChange,\r\n  placeholder,\r\n  emptyMessage = "No results found",\r\n  placement = "bottom-start",\r\n  alignOffset = 0,\r\n  sideOffset = 4,\r\n  immediate = false,\r\n  loading = false,\r\n  className,\r\n  ...props\r\n}: ComboboxInputProps) {\r\n  const inputRef = React.useRef<HTMLInputElement>(null);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [controlledInput, setControlledInput] = useControllableState({\r\n    prop: input,\r\n    onChange: onInputChange,\r\n  });\r\n\r\n  const [currentOption, setCurrentOption] = useControllableState({\r\n    defaultProp: defaultValue,\r\n    prop: value,\r\n    onChange: onValueChange,\r\n  });\r\n\r\n  const [referenceElement, setReferenceElement] =\r\n    React.useState<HTMLDivElement | null>(null);\r\n  const [popperElement, setPopperElement] =\r\n    React.useState<HTMLDivElement | null>(null);\r\n  const { styles, attributes } = usePopper(referenceElement, popperElement, {\r\n    modifiers: [\r\n      { name: "offset", options: { offset: [alignOffset, sideOffset] } },\r\n    ],\r\n    placement,\r\n  });\r\n\r\n  const onKeyDown = React.useCallback(\r\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\r\n      const inputElement = inputRef.current;\r\n      if (!inputElement) return;\r\n\r\n      if (nonPrintableKeys.includes(event.key)) return;\r\n\r\n      if (event.key === "Backspace" && inputElement.value === "" && !open) {\r\n        if (open) setOpen(false);\r\n        return;\r\n      }\r\n\r\n      if (event.key === "Escape") {\r\n        if (currentOption && inputElement.value === currentOption.label) {\r\n          if (open) setOpen(false);\r\n          return;\r\n        }\r\n\r\n        if (inputElement.value === "") {\r\n          if (open) setOpen(false);\r\n          return;\r\n        }\r\n\r\n        setControlledInput("");\r\n        setOpen(false);\r\n        setCurrentOption(undefined);\r\n        inputRef.current?.focus();\r\n      }\r\n\r\n      if (event.key === "Enter" && inputElement.value !== "") {\r\n        const selectedOption = options.find(\r\n          (option) => option.label === inputElement.value,\r\n        );\r\n        setCurrentOption(selectedOption);\r\n      }\r\n\r\n      if (!open) setOpen(true);\r\n    },\r\n    [currentOption, open, options, setControlledInput, setCurrentOption],\r\n  );\r\n\r\n  const onBlur = React.useCallback(() => {\r\n    setOpen(false);\r\n    setControlledInput(currentOption?.label ?? "");\r\n  }, [currentOption?.label, setControlledInput]);\r\n\r\n  const onSelect = React.useCallback(\r\n    (selectedOption: Option) => {\r\n      setControlledInput(selectedOption.label);\r\n      setCurrentOption(selectedOption);\r\n      setOpen(false);\r\n    },\r\n    [setControlledInput, setCurrentOption],\r\n  );\r\n\r\n  return (\r\n    <Command\r\n      ref={setReferenceElement}\r\n      className=\'relative overflow-visible [&_[cmdk-input-wrapper]]:rounded-md [&_[cmdk-input-wrapper]]:border\'\r\n      onKeyDown={onKeyDown}\r\n      {...attributes.reference}\r\n    >\r\n      <CommandInput\r\n        ref={inputRef}\r\n        value={controlledInput}\r\n        onValueChange={(value) => {\r\n          if (loading) return;\r\n\r\n          setControlledInput(value);\r\n          if (value === "") {\r\n            setCurrentOption(undefined);\r\n          }\r\n        }}\r\n        onBlur={onBlur}\r\n        onFocus={() => {\r\n          if (immediate) {\r\n            setOpen(true);\r\n          }\r\n        }}\r\n        placeholder={placeholder}\r\n        className={cn("border-b-0", className)}\r\n        {...props}\r\n      />\r\n      <CommandList\r\n        ref={setPopperElement}\r\n        data-state={open ? "open" : "closed"}\r\n        style={styles.popper}\r\n        className={cn(\r\n          "z-50 w-full rounded-md border bg-popover text-popover-foreground shadow-md outline-none data-[state=open]:visible data-[state=closed]:invisible data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95",\r\n          "data-[popper-placement=bottom-end]:translate-x-1/2 data-[popper-placement=bottom-start]:-translate-x-1/2 data-[popper-placement=left-end]:translate-y-1/2 data-[popper-placement=left-start]:-translate-y-1/2 data-[popper-placement=right-end]:translate-y-1/2 data-[popper-placement=right-start]:-translate-y-1/2 data-[popper-placement=top-end]:translate-x-1/2 data-[popper-placement=top-start]:-translate-x-1/2 data-[popper-placement=bottom-end]:slide-in-from-top-2 data-[popper-placement=bottom-start]:slide-in-from-top-2 data-[popper-placement=bottom]:slide-in-from-top-2 data-[popper-placement=left-end]:slide-in-from-right-2 data-[popper-placement=left-start]:slide-in-from-right-2 data-[popper-placement=left]:slide-in-from-right-2 data-[popper-placement=right-end]:slide-in-from-left-2 data-[popper-placement=right-start]:slide-in-from-left-2 data-[popper-placement=right]:slide-in-from-left-2 data-[popper-placement=top-end]:slide-in-from-bottom-2 data-[popper-placement=top-start]:slide-in-from-bottom-2 data-[popper-placement=top]:slide-in-from-bottom-2",\r\n        )}\r\n        {...attributes.popper}\r\n      >\r\n        {loading ? (\r\n          <CommandLoading className=\'p-1\'>\r\n            <Skeleton className=\'h-8 w-full\' />\r\n          </CommandLoading>\r\n        ) : null}\r\n        {options.length > 0 && !loading ? (\r\n          <CommandGroup>\r\n            {options.map((option) => {\r\n              const isSelected = currentOption?.value === option.value;\r\n\r\n              return (\r\n                <CommandItem\r\n                  key={option.value}\r\n                  value={option.label}\r\n                  onMouseDown={(event) => {\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                  }}\r\n                  onSelect={() => onSelect(option)}\r\n                  className={cn("flex w-full items-center gap-2", {\r\n                    "pl-8": !isSelected,\r\n                  })}\r\n                >\r\n                  {isSelected ? (\r\n                    <Check className=\'w-4\' aria-hidden=\'true\' />\r\n                  ) : null}\r\n                  {option.label}\r\n                </CommandItem>\r\n              );\r\n            })}\r\n          </CommandGroup>\r\n        ) : null}\r\n        {loading ? null : <CommandEmpty>{emptyMessage}</CommandEmpty>}\r\n      </CommandList>\r\n    </Command>\r\n  );\r\n}\r\n',
        type: "registry:ui",
      },
    ],
  },
  {
    name: "labeled-switch",
    type: "registry:ui",
    registryDependencies: [],
    dependencies: ["react", "framer-motion"],
    devDependencies: [],
    tailwind: {},
    cssVars: {
      light: {},
      dark: {},
    },
    files: [
      {
        path: "registry/default/ui/labeled-switch.tsx",
        content:
          '"use client";\r\n\r\nimport * as React from "react";\r\n\r\nimport * as SwitchPrimitives from "@radix-ui/react-switch";\r\nimport { motion } from "framer-motion";\r\n\r\nimport { cn } from "@/lib/utils";\r\n\r\ninterface LabeledSwitchProps {\r\n  firstLabel: React.ReactNode;\r\n  secondLabel: React.ReactNode;\r\n  selected: boolean;\r\n  onToggle: (checked: boolean) => void;\r\n  className?: string;\r\n}\r\n\r\nconst LabeledSwitch = React.forwardRef<\r\n  React.ElementRef<typeof SwitchPrimitives.Root>,\r\n  LabeledSwitchProps\r\n>(\r\n  (\r\n    { className, firstLabel, secondLabel, selected, onToggle, ...props },\r\n    ref,\r\n  ) => {\r\n    return (\r\n      <SwitchPrimitives.Root\r\n        className={cn(\r\n          "relative flex w-fit cursor-pointer items-center rounded-full ring-2 ring-input transition-colors",\r\n          className,\r\n        )}\r\n        ref={ref}\r\n        checked={selected}\r\n        onCheckedChange={onToggle}\r\n      >\r\n        <LabeledSwitchButton selected={selected}>\r\n          {firstLabel}\r\n        </LabeledSwitchButton>\r\n        <LabeledSwitchButton selected={!selected}>\r\n          {secondLabel}\r\n        </LabeledSwitchButton>\r\n        <SwitchPrimitives.Thumb\r\n          className={cn(\r\n            "absolute inset-0 w-full z-0 flex data-[state=unchecked]:justify-start data-[state=checked]:justify-end",\r\n          )}\r\n        >\r\n          <motion.span\r\n            layout\r\n            transition={{ type: "spring", damping: 15, stiffness: 250 }}\r\n            className=\'h-full w-1/2 rounded-full bg-muted\'\r\n          />\r\n        </SwitchPrimitives.Thumb>\r\n      </SwitchPrimitives.Root>\r\n    );\r\n  },\r\n);\r\nLabeledSwitch.displayName = "LabeledSwitch";\r\n\r\nconst LabeledSwitchButton = ({\r\n  children,\r\n  selected,\r\n}: {\r\n  children: React.ReactNode;\r\n  selected: boolean;\r\n}) => (\r\n  <div\r\n    className={cn(\r\n      "relative z-10 flex w-full items-center justify-center gap-2 px-3 py-3 text-xs font-bold transition-colors md:py-1.5 md:pl-3 md:pr-3.5",\r\n      selected ? "text-primary" : "text-muted-foreground",\r\n    )}\r\n    onMouseDown={(e) => e.preventDefault()}\r\n  >\r\n    <span className=\'relative z-10\'>{children}</span>\r\n  </div>\r\n);\r\n\r\nexport { LabeledSwitch };\r\n',
        type: "registry:ui",
      },
    ],
  },
  {
    name: "range-slider",
    type: "registry:ui",
    registryDependencies: [],
    dependencies: ["react"],
    devDependencies: [],
    tailwind: {},
    cssVars: {
      light: {},
      dark: {},
    },
    files: [
      {
        path: "registry/default/ui/range-slider.tsx",
        content:
          '"use client";\r\n\r\nimport * as React from "react";\r\n\r\nimport * as SliderPrimitive from "@radix-ui/react-slider";\r\n\r\nimport { cn } from "@/lib/utils";\r\n\r\ninterface RangeSliderProps\r\n  extends React.ComponentProps<typeof SliderPrimitive.Root> {\r\n  labelPosition?: "top" | "bottom";\r\n  label?: (value: number | undefined) => React.ReactNode;\r\n  orientation?: "horizontal" | "vertical";\r\n}\r\n\r\nconst RangeSlider = React.forwardRef<\r\n  React.ElementRef<typeof SliderPrimitive.Root>,\r\n  RangeSliderProps\r\n>(\r\n  (\r\n    {\r\n      className,\r\n      label,\r\n      labelPosition = "top",\r\n      orientation = "horizontal",\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => {\r\n    const initialValue = Array.isArray(props.value)\r\n      ? props.value\r\n      : [props.min, props.max];\r\n\r\n    return (\r\n      <SliderPrimitive.Root\r\n        ref={ref}\r\n        orientation={orientation}\r\n        className={cn(\r\n          orientation === "horizontal"\r\n            ? "relative flex w-full touch-none select-none items-center"\r\n            : "relative flex h-full min-h-[200px] touch-none select-none flex-col items-center",\r\n          className,\r\n        )}\r\n        {...props}\r\n      >\r\n        <SliderPrimitive.Track\r\n          className={cn(\r\n            orientation === "horizontal"\r\n              ? "relative h-2 w-full grow overflow-hidden rounded-full bg-secondary"\r\n              : "relative w-2 h-full grow overflow-hidden rounded-full bg-secondary",\r\n          )}\r\n        >\r\n          <SliderPrimitive.Range\r\n            className={cn(\r\n              orientation === "horizontal"\r\n                ? "absolute h-full bg-primary"\r\n                : "absolute w-full bg-primary",\r\n            )}\r\n          />\r\n        </SliderPrimitive.Track>\r\n        {initialValue.map((value, index) => (\r\n          <React.Fragment key={index}>\r\n            <SliderPrimitive.Thumb\r\n              className={cn(\r\n                "relative block border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",\r\n                orientation === "horizontal"\r\n                  ? "h-5 w-2 rounded-sm"\r\n                  : "h-2 w-5 rounded-sm",\r\n              )}\r\n            >\r\n              {label && (\r\n                <span\r\n                  className={cn(\r\n                    "absolute flex text-xs justify-center font-medium",\r\n                    orientation === "horizontal"\r\n                      ? labelPosition === "top"\r\n                        ? "-left-2 -top-5"\r\n                        : "-left-2 top-5"\r\n                      : labelPosition === "top"\r\n                        ? "-translate-x-full -translate-y-1/2 -left-2"\r\n                        : "translate-x-full -translate-y-1/2",\r\n                  )}\r\n                >\r\n                  {label(value)}\r\n                </span>\r\n              )}\r\n            </SliderPrimitive.Thumb>\r\n          </React.Fragment>\r\n        ))}\r\n      </SliderPrimitive.Root>\r\n    );\r\n  },\r\n);\r\nRangeSlider.displayName = "RangeSlider";\r\n\r\nexport { RangeSlider };\r\n',
        type: "registry:ui",
      },
    ],
  },
  {
    name: "responsive-textarea",
    type: "registry:ui",
    registryDependencies: [],
    dependencies: ["react"],
    devDependencies: [],
    tailwind: {},
    cssVars: {
      light: {},
      dark: {},
    },
    files: [
      {
        path: "registry/default/ui/responsive-textarea.tsx",
        content:
          '"use client";\r\n\r\nimport * as React from "react";\r\n\r\nimport { cn } from "@/lib/utils";\r\n\r\nconst ResponsiveTextarea = React.forwardRef<\r\n  HTMLTextAreaElement,\r\n  React.ComponentProps<"textarea">\r\n>(({ className, ...props }, ref) => {\r\n  const textAreaRef = React.useRef<HTMLTextAreaElement>(null);\r\n  const [val, setVal] = React.useState<string>("");\r\n\r\n  React.useEffect(() => {\r\n    if (textAreaRef.current) {\r\n      textAreaRef.current.style.height = "auto";\r\n      textAreaRef.current.style.height =\r\n        textAreaRef.current.scrollHeight + "px";\r\n    }\r\n  }, [val]);\r\n\r\n  return (\r\n    <textarea\r\n      className={cn(\r\n        "placeholder:text-muted-foreground flex min-h-[80px] w-full resize-none overflow-hidden rounded-md border border-input bg-background px-3 py-2 text-sm text-foreground ring-offset-primary focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",\r\n        className,\r\n      )}\r\n      ref={textAreaRef}\r\n      onChange={(e) => setVal(e.target.value)}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nResponsiveTextarea.displayName = "ResponsiveTextarea";\r\n\r\nexport { ResponsiveTextarea };\r\n',
        type: "registry:ui",
      },
    ],
  },
  {
    name: "star-rating",
    type: "registry:ui",
    registryDependencies: [],
    dependencies: ["react", "lucide-react"],
    devDependencies: [],
    tailwind: {},
    cssVars: {
      light: {},
      dark: {},
    },
    files: [
      {
        path: "registry/default/ui/star-rating.tsx",
        content:
          '"use client";\r\n\r\nimport * as React from "react";\r\n\r\nimport { Star } from "lucide-react";\r\n\r\nimport { cn } from "@/lib/utils";\r\n\r\nlet nextId = 0;\r\nconst generateStarIds = (count: number) =>\r\n  Array.from({ length: count }, () => `star-${nextId++}`);\r\n\r\ninterface StarRatingProps {\r\n  value: number;\r\n  onChange?: (value: number) => void;\r\n  className?: string;\r\n  size?: number;\r\n  maxStars?: number;\r\n  readOnly?: boolean;\r\n  color?: string;\r\n}\r\n\r\nconst StarIcon = React.memo(\r\n  ({\r\n    size,\r\n    index,\r\n    isInteractive,\r\n    onClick,\r\n    onMouseMove,\r\n    style,\r\n  }: {\r\n    index: number;\r\n    style: React.CSSProperties;\r\n    size: number;\r\n    onClick: (e: React.MouseEvent<SVGElement>) => void;\r\n    onMouseMove: (e: React.MouseEvent<SVGElement>) => void;\r\n    isInteractive: boolean;\r\n  }) => (\r\n    <Star\r\n      key={index}\r\n      size={size}\r\n      fill={style.fill}\r\n      color={style.color}\r\n      onClick={onClick}\r\n      onMouseMove={onMouseMove}\r\n      className={cn(\r\n        "transition-colors duration-200",\r\n        isInteractive && "cursor-pointer hover:scale-110",\r\n      )}\r\n      style={style}\r\n    />\r\n  ),\r\n);\r\nStarIcon.displayName = "StarIcon";\r\n\r\nconst StarRating = ({\r\n  className,\r\n  color = "#e4c616",\r\n  size = 24,\r\n  maxStars = 5,\r\n  onChange,\r\n  readOnly = false,\r\n  value,\r\n}: StarRatingProps) => {\r\n  const [hoverRating, setHoverRating] = React.useState<number | null>(null);\r\n  const [starIds] = React.useState(() => generateStarIds(maxStars));\r\n\r\n  const handleStarClick = React.useCallback(\r\n    (index: number, event: React.MouseEvent<SVGElement>) => {\r\n      if (readOnly || !onChange) return;\r\n      const newRating = index + 1;\r\n      onChange(newRating);\r\n    },\r\n    [readOnly, onChange],\r\n  );\r\n\r\n  const handleStarHover = React.useCallback(\r\n    (index: number, event: React.MouseEvent<SVGElement>) => {\r\n      if (!readOnly) {\r\n        setHoverRating(index + 1);\r\n      }\r\n    },\r\n    [readOnly],\r\n  );\r\n\r\n  const handleMouseLeave = React.useCallback(() => {\r\n    if (!readOnly) {\r\n      setHoverRating(null);\r\n    }\r\n  }, [readOnly]);\r\n\r\n  const getStarStyle = React.useCallback(\r\n    (index: number) => {\r\n      const ratingToUse =\r\n        !readOnly && hoverRating !== null ? hoverRating : value;\r\n\r\n      const difference = ratingToUse - index;\r\n\r\n      if (difference <= 0) return { color: "gray", fill: "transparent" };\r\n      if (difference >= 1) return { color: color, fill: color };\r\n\r\n      return {\r\n        color: color,\r\n        fill: `url(#${starIds[index]})`,\r\n      } as React.CSSProperties;\r\n    },\r\n    [readOnly, hoverRating, value, color, starIds],\r\n  );\r\n\r\n  const renderGradientDefs = () => {\r\n    if (!readOnly && hoverRating !== null) return null;\r\n\r\n    const partialStarIndex = Math.floor(value);\r\n    const partialFill = (value % 1) * 100;\r\n\r\n    if (partialFill > 0) {\r\n      return (\r\n        <linearGradient\r\n          id={starIds[partialStarIndex]}\r\n          x1=\'0%\'\r\n          y1=\'0%\'\r\n          x2=\'100%\'\r\n          y2=\'0%\'\r\n        >\r\n          <stop offset={`${partialFill}%`} stopColor={color} />\r\n          <stop offset={`${partialFill}%`} stopColor=\'transparent\' />\r\n        </linearGradient>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const stars = React.useMemo(() => {\r\n    return Array.from({ length: maxStars }).map((_, index) => {\r\n      const style = getStarStyle(index);\r\n      return (\r\n        <StarIcon\r\n          key={index}\r\n          index={index}\r\n          style={style}\r\n          size={size}\r\n          onClick={(e) => handleStarClick(index, e)}\r\n          onMouseMove={(e) => handleStarHover(index, e)}\r\n          isInteractive={!readOnly}\r\n        />\r\n      );\r\n    });\r\n  }, [\r\n    maxStars,\r\n    getStarStyle,\r\n    size,\r\n    handleStarClick,\r\n    handleStarHover,\r\n    readOnly,\r\n  ]);\r\n\r\n  return (\r\n    <div\r\n      className={cn("relative flex items-center gap-x-0.5", className)}\r\n      onMouseLeave={handleMouseLeave}\r\n    >\r\n      <svg width=\'0\' height=\'0\' style={{ position: "absolute" }}>\r\n        <defs>{renderGradientDefs()}</defs>\r\n      </svg>\r\n      {stars}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StarRating;\r\n',
        type: "registry:ui",
      },
    ],
  },
  {
    name: "stepper",
    type: "registry:ui",
    registryDependencies: ["button"],
    dependencies: ["react", "class-variance-authority"],
    devDependencies: [],
    tailwind: {},
    cssVars: {
      light: {},
      dark: {},
    },
    files: [
      {
        path: "registry/default/ui/stepper.tsx",
        content:
          'import * as React from "react";\r\n\r\nimport * as Stepperize from "@stepperize/react";\r\nimport { Slot } from "@radix-ui/react-slot";\r\nimport { type VariantProps, cva } from "class-variance-authority";\r\n\r\nimport { Button } from "@/components/ui/button";\r\n\r\nimport { cn } from "@/lib/utils";\r\n\r\ntype StepperVariant = "horizontal" | "vertical" | "circle";\r\ntype StepperLabelOrientation = "horizontal" | "vertical";\r\n\r\ntype StepperConfig = {\r\n  variant?: StepperVariant;\r\n  labelOrientation?: StepperLabelOrientation;\r\n  tracking?: boolean;\r\n};\r\n\r\ntype DefineStepperProps<Steps extends Stepperize.Step[]> = Omit<\r\n  Stepperize.StepperReturn<Steps>,\r\n  "Scoped"\r\n> & {\r\n  StepperProvider: (\r\n    props: Omit<Stepperize.ScopedProps<Steps>, "children"> &\r\n      Omit<React.ComponentProps<"div">, "children"> &\r\n      StepperConfig & {\r\n        children:\r\n          | React.ReactNode\r\n          | ((props: {\r\n              methods: Stepperize.Stepper<Steps>;\r\n            }) => React.ReactNode);\r\n      },\r\n  ) => React.ReactElement;\r\n  StepperNavigation: (props: React.ComponentProps<"nav">) => React.ReactElement;\r\n  StepperStep: (\r\n    props: React.ComponentProps<"button"> & {\r\n      of: Stepperize.Get.Id<Steps>;\r\n      icon?: React.ReactNode;\r\n    },\r\n  ) => React.ReactElement;\r\n  StepperTitle: (\r\n    props: React.ComponentProps<"h4"> & { asChild?: boolean },\r\n  ) => React.ReactElement;\r\n  StepperDescription: (\r\n    props: React.ComponentProps<"p"> & { asChild?: boolean },\r\n  ) => React.ReactElement;\r\n  StepperPanel: (\r\n    props: React.ComponentProps<"div"> & { asChild?: boolean },\r\n  ) => React.ReactElement;\r\n  StepperControls: (\r\n    props: React.ComponentProps<"div"> & { asChild?: boolean },\r\n  ) => React.ReactElement;\r\n};\r\n\r\ntype CircleStepIndicatorProps = {\r\n  currentStep: number;\r\n  totalSteps: number;\r\n  size?: number;\r\n  strokeWidth?: number;\r\n};\r\n\r\nconst StepperContext = React.createContext<StepperConfig | null>(null);\r\n\r\nconst useStepperProvider = (): StepperConfig => {\r\n  const context = React.useContext(StepperContext);\r\n  if (!context) {\r\n    throw new Error("useStepper must be used within a StepperProvider.");\r\n  }\r\n  return context;\r\n};\r\n\r\nconst defineStepper = <const Steps extends Stepperize.Step[]>(\r\n  ...steps: Steps\r\n): DefineStepperProps<Steps> => {\r\n  const { Scoped, useStepper, ...rest } = Stepperize.defineStepper(...steps);\r\n\r\n  const StepperContainer = ({\r\n    children,\r\n    className,\r\n    ...props\r\n  }: Omit<React.ComponentProps<"div">, "children"> & {\r\n    children:\r\n      | React.ReactNode\r\n      | ((props: { methods: Stepperize.Stepper<Steps> }) => React.ReactNode);\r\n  }) => {\r\n    const methods = useStepper();\r\n\r\n    return (\r\n      <div className={cn("w-full", className)} {...props}>\r\n        {typeof children === "function" ? children({ methods }) : children}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return {\r\n    ...rest,\r\n    useStepper,\r\n    StepperProvider: ({\r\n      variant = "horizontal",\r\n      labelOrientation = "horizontal",\r\n      tracking = false,\r\n      children,\r\n      className,\r\n      ...props\r\n    }) => {\r\n      return (\r\n        <StepperContext.Provider\r\n          value={{ variant, labelOrientation, tracking }}\r\n        >\r\n          <Scoped\r\n            initialStep={props.initialStep}\r\n            initialMetadata={props.initialMetadata}\r\n          >\r\n            <StepperContainer className={className} {...props}>\r\n              {children}\r\n            </StepperContainer>\r\n          </Scoped>\r\n        </StepperContext.Provider>\r\n      );\r\n    },\r\n    StepperNavigation: ({\r\n      children,\r\n      className,\r\n      "aria-label": ariaLabel = "Stepper Navigation",\r\n      ...props\r\n    }) => {\r\n      const { variant } = useStepperProvider();\r\n      return (\r\n        <nav\r\n          aria-label={ariaLabel}\r\n          role=\'tablist\'\r\n          className={cn("stepper-navigation", className)}\r\n          {...props}\r\n        >\r\n          <ol className={listVariants({ variant: variant })}>{children}</ol>\r\n        </nav>\r\n      );\r\n    },\r\n    StepperStep: ({ children, className, icon, ...props }) => {\r\n      const { variant, labelOrientation } = useStepperProvider();\r\n      const { current } = useStepper();\r\n\r\n      const utils = rest.utils;\r\n      const steps = rest.steps;\r\n\r\n      const stepIndex = utils.getIndex(props.of);\r\n      const step = steps[stepIndex];\r\n      const currentIndex = utils.getIndex(current.id);\r\n\r\n      const isLast = utils.getLast().id === props.of;\r\n      const isActive = current.id === props.of;\r\n\r\n      const dataState = getStepState(currentIndex, stepIndex);\r\n      const childMap = useStepChildren(children);\r\n\r\n      const title = childMap.get("title");\r\n      const description = childMap.get("description");\r\n      const panel = childMap.get("panel");\r\n\r\n      if (variant === "circle") {\r\n        return (\r\n          <li\r\n            className={cn(\r\n              "flex shrink-0 items-center gap-4 rounded-md transition-colors",\r\n              className,\r\n            )}\r\n          >\r\n            <CircleStepIndicator\r\n              currentStep={stepIndex + 1}\r\n              totalSteps={steps.length}\r\n            />\r\n            <div className=\'flex flex-col items-start gap-1\'>\r\n              {title}\r\n              {description}\r\n            </div>\r\n          </li>\r\n        );\r\n      }\r\n\r\n      return (\r\n        <>\r\n          <li\r\n            className={cn([\r\n              "group peer relative flex items-center gap-2",\r\n              "data-[variant=vertical]:flex-row",\r\n              "data-[label-orientation=vertical]:w-full",\r\n              "data-[label-orientation=vertical]:flex-col",\r\n              "data-[label-orientation=vertical]:justify-center",\r\n            ])}\r\n            data-variant={variant}\r\n            data-label-orientation={labelOrientation}\r\n            data-state={dataState}\r\n            data-disabled={props.disabled}\r\n          >\r\n            <Button\r\n              id={`step-${step.id}`}\r\n              type=\'button\'\r\n              role=\'tab\'\r\n              tabIndex={dataState !== "inactive" ? 0 : -1}\r\n              className=\'rounded-full\'\r\n              variant={dataState !== "inactive" ? "default" : "secondary"}\r\n              size=\'icon\'\r\n              aria-controls={`step-panel-${props.of}`}\r\n              aria-current={isActive ? "step" : undefined}\r\n              aria-posinset={stepIndex + 1}\r\n              aria-setsize={steps.length}\r\n              aria-selected={isActive}\r\n              onKeyDown={(e) =>\r\n                onStepKeyDown(\r\n                  e,\r\n                  utils.getNext(props.of),\r\n                  utils.getPrev(props.of),\r\n                )\r\n              }\r\n              {...props}\r\n            >\r\n              {icon ?? stepIndex + 1}\r\n            </Button>\r\n            {variant === "horizontal" && labelOrientation === "vertical" && (\r\n              <StepperSeparator\r\n                orientation=\'horizontal\'\r\n                labelOrientation={labelOrientation}\r\n                isLast={isLast}\r\n                state={dataState}\r\n                disabled={props.disabled}\r\n              />\r\n            )}\r\n            <div className=\'flex flex-col items-start\'>\r\n              {title}\r\n              {description}\r\n            </div>\r\n          </li>\r\n\r\n          {variant === "horizontal" && labelOrientation === "horizontal" && (\r\n            <StepperSeparator\r\n              orientation=\'horizontal\'\r\n              isLast={isLast}\r\n              state={dataState}\r\n              disabled={props.disabled}\r\n            />\r\n          )}\r\n\r\n          {variant === "vertical" && (\r\n            <div className=\'flex gap-4\'>\r\n              {!isLast && (\r\n                <div className=\'flex justify-center ps-5\'>\r\n                  <StepperSeparator\r\n                    orientation=\'vertical\'\r\n                    isLast={isLast}\r\n                    state={dataState}\r\n                    disabled={props.disabled}\r\n                  />\r\n                </div>\r\n              )}\r\n              <div className=\'my-3 flex-1 ps-4\'>{panel}</div>\r\n            </div>\r\n          )}\r\n        </>\r\n      );\r\n    },\r\n    StepperTitle,\r\n    StepperDescription,\r\n    StepperPanel: ({ children, className, asChild, ...props }) => {\r\n      const Comp = asChild ? Slot : "div";\r\n      const { tracking } = useStepperProvider();\r\n\r\n      return (\r\n        <Comp\r\n          className={className}\r\n          ref={(node) => scrollIntoStepperPanel(node, tracking)}\r\n          {...props}\r\n        >\r\n          {children}\r\n        </Comp>\r\n      );\r\n    },\r\n    StepperControls: ({ children, className, asChild, ...props }) => {\r\n      const Comp = asChild ? Slot : "div";\r\n      return (\r\n        <Comp className={cn(" flex justify-end gap-4", className)} {...props}>\r\n          {children}\r\n        </Comp>\r\n      );\r\n    },\r\n  };\r\n};\r\n\r\nconst StepperTitle = ({\r\n  children,\r\n  className,\r\n  asChild,\r\n  ...props\r\n}: React.ComponentProps<"h4"> & { asChild?: boolean }) => {\r\n  const Comp = asChild ? Slot : "h4";\r\n\r\n  return (\r\n    <Comp className={cn("text-base font-medium m-0", className)} {...props}>\r\n      {children}\r\n    </Comp>\r\n  );\r\n};\r\n\r\nconst StepperDescription = ({\r\n  children,\r\n  className,\r\n  asChild,\r\n  ...props\r\n}: React.ComponentProps<"p"> & { asChild?: boolean }) => {\r\n  const Comp = asChild ? Slot : "p";\r\n\r\n  return (\r\n    <Comp className={cn("text-sm text-muted-foreground", className)} {...props}>\r\n      {children}\r\n    </Comp>\r\n  );\r\n};\r\n\r\nconst StepperSeparator = ({\r\n  orientation,\r\n  isLast,\r\n  labelOrientation,\r\n  state,\r\n  disabled,\r\n}: {\r\n  isLast: boolean;\r\n  state: string;\r\n  disabled?: boolean;\r\n} & VariantProps<typeof classForSeparator>) => {\r\n  if (isLast) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div\r\n      data-orientation={orientation}\r\n      data-state={state}\r\n      data-disabled={disabled}\r\n      role=\'separator\'\r\n      tabIndex={-1}\r\n      className={classForSeparator({ orientation, labelOrientation })}\r\n    />\r\n  );\r\n};\r\n\r\nconst CircleStepIndicator = ({\r\n  currentStep,\r\n  totalSteps,\r\n  size = 80,\r\n  strokeWidth = 6,\r\n}: CircleStepIndicatorProps) => {\r\n  const radius = (size - strokeWidth) / 2;\r\n  const circumference = radius * 2 * Math.PI;\r\n  const fillPercentage = (currentStep / totalSteps) * 100;\r\n  const dashOffset = circumference - (circumference * fillPercentage) / 100;\r\n  return (\r\n    <div\r\n      role=\'progressbar\'\r\n      aria-valuenow={currentStep}\r\n      aria-valuemin={1}\r\n      aria-valuemax={totalSteps}\r\n      tabIndex={-1}\r\n      className=\'relative inline-flex items-center justify-center\'\r\n    >\r\n      <svg width={size} height={size}>\r\n        <title>Step Indicator</title>\r\n        <circle\r\n          cx={size / 2}\r\n          cy={size / 2}\r\n          r={radius}\r\n          fill=\'none\'\r\n          stroke=\'currentColor\'\r\n          strokeWidth={strokeWidth}\r\n          className=\'text-muted-foreground\'\r\n        />\r\n        <circle\r\n          cx={size / 2}\r\n          cy={size / 2}\r\n          r={radius}\r\n          fill=\'none\'\r\n          stroke=\'currentColor\'\r\n          strokeWidth={strokeWidth}\r\n          strokeDasharray={circumference}\r\n          strokeDashoffset={dashOffset}\r\n          className=\'text-primary transition-all duration-300 ease-in-out\'\r\n          transform={`rotate(-90 ${size / 2} ${size / 2})`}\r\n        />\r\n      </svg>\r\n      <div className=\'absolute inset-0 flex items-center justify-center\'>\r\n        <span className=\'text-sm font-medium\' aria-live=\'polite\'>\r\n          {currentStep} of {totalSteps}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst listVariants = cva(" flex gap-2", {\r\n  variants: {\r\n    variant: {\r\n      horizontal: "flex-row items-center justify-between",\r\n      vertical: "flex-col",\r\n      circle: "flex-row items-center justify-between",\r\n    },\r\n  },\r\n});\r\n\r\nconst classForSeparator = cva(\r\n  [\r\n    "bg-muted",\r\n    "data-[state=completed]:bg-primary data-[disabled]:opacity-50",\r\n    "transition-all duration-300 ease-in-out",\r\n  ],\r\n  {\r\n    variants: {\r\n      orientation: {\r\n        horizontal: "h-0.5 flex-1",\r\n        vertical: "h-full w-0.5",\r\n      },\r\n      labelOrientation: {\r\n        vertical:\r\n          "absolute left-[calc(50%+30px)] right-[calc(-50%+20px)] top-5 block shrink-0",\r\n      },\r\n    },\r\n  },\r\n);\r\n\r\nfunction scrollIntoStepperPanel(\r\n  node: HTMLDivElement | null,\r\n  tracking?: boolean,\r\n) {\r\n  if (tracking) {\r\n    node?.scrollIntoView({ behavior: "smooth", block: "center" });\r\n  }\r\n}\r\n\r\nconst useStepChildren = (children: React.ReactNode) => {\r\n  return React.useMemo(() => extractChildren(children), [children]);\r\n};\r\n\r\nconst extractChildren = (children: React.ReactNode) => {\r\n  const childrenArray = React.Children.toArray(children);\r\n  const map = new Map<string, React.ReactNode>();\r\n\r\n  for (const child of childrenArray) {\r\n    if (React.isValidElement(child)) {\r\n      if (child.type === StepperTitle) {\r\n        map.set("title", child);\r\n      } else if (child.type === StepperDescription) {\r\n        map.set("description", child);\r\n      } else {\r\n        map.set("panel", child);\r\n      }\r\n    }\r\n  }\r\n\r\n  return map;\r\n};\r\n\r\nconst onStepKeyDown = (\r\n  e: React.KeyboardEvent<HTMLButtonElement>,\r\n  nextStep: Stepperize.Step,\r\n  prevStep: Stepperize.Step,\r\n) => {\r\n  const { key } = e;\r\n  const directions = {\r\n    next: ["ArrowRight", "ArrowDown"],\r\n    prev: ["ArrowLeft", "ArrowUp"],\r\n  };\r\n\r\n  if (directions.next.includes(key) || directions.prev.includes(key)) {\r\n    const direction = directions.next.includes(key) ? "next" : "prev";\r\n    const step = direction === "next" ? nextStep : prevStep;\r\n\r\n    if (!step) {\r\n      return;\r\n    }\r\n\r\n    const stepElement = document.getElementById(`step-${step.id}`);\r\n    if (!stepElement) {\r\n      return;\r\n    }\r\n\r\n    const isActive =\r\n      stepElement.parentElement?.getAttribute("data-state") !== "inactive";\r\n    if (isActive || direction === "prev") {\r\n      stepElement.focus();\r\n    }\r\n  }\r\n};\r\n\r\nconst getStepState = (currentIndex: number, stepIndex: number) => {\r\n  if (currentIndex === stepIndex) {\r\n    return "active";\r\n  }\r\n  if (currentIndex > stepIndex) {\r\n    return "completed";\r\n  }\r\n  return "inactive";\r\n};\r\n\r\nexport { defineStepper };\r\n',
        type: "registry:ui",
      },
    ],
  },
  {
    name: "tel-input",
    type: "registry:ui",
    registryDependencies: [
      "button",
      "command",
      "input",
      "popover",
      "scroll-area",
    ],
    dependencies: [
      "react",
      "react-phone-number-input",
      "lucide-react",
      "react-phone-number-input/flags",
    ],
    devDependencies: [],
    tailwind: {},
    cssVars: {
      light: {},
      dark: {},
    },
    files: [
      {
        path: "registry/default/ui/tel-input.tsx",
        content:
          'import * as React from "react";\r\n\r\nimport * as PhoneNumberInput from "react-phone-number-input";\r\nimport { CheckIcon, ChevronsUpDown } from "lucide-react";\r\nimport flags from "react-phone-number-input/flags";\r\n\r\nimport { Button } from "@/components/ui/button";\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n} from "@/components/ui/command";\r\nimport { Input } from "@/components/ui/input";\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from "@/components/ui/popover";\r\nimport { ScrollArea } from "@/components/ui/scroll-area";\r\n\r\nimport { cn } from "@/lib/utils";\r\n\r\ntype CountryEntry = {\r\n  label: string;\r\n  value: PhoneNumberInput.Country | undefined;\r\n};\r\n\r\ntype CountrySelectProps = {\r\n  disabled?: boolean;\r\n  value: PhoneNumberInput.Country;\r\n  options: CountryEntry[];\r\n  onChange: (country: PhoneNumberInput.Country) => void;\r\n};\r\n\r\ninterface CountrySelectOptionProps extends PhoneNumberInput.FlagProps {\r\n  selectedCountry: PhoneNumberInput.Country;\r\n  onChange: (country: PhoneNumberInput.Country) => void;\r\n}\r\n\r\ntype TelInputProps = Omit<\r\n  React.ComponentProps<"input">,\r\n  "onChange" | "value" | "ref"\r\n> &\r\n  Omit<PhoneNumberInput.Props<typeof PhoneNumberInput.default>, "onChange"> & {\r\n    onChange?: (value: PhoneNumberInput.Value) => void;\r\n  };\r\n\r\nconst FlagComponent = ({\r\n  country,\r\n  countryName,\r\n}: PhoneNumberInput.FlagProps) => {\r\n  const Flag = flags[country];\r\n\r\n  return (\r\n    <span className=\'flex h-4 w-6 overflow-hidden rounded-sm bg-foreground/20 [&_svg]:size-full\'>\r\n      {Flag && <Flag title={countryName} />}\r\n    </span>\r\n  );\r\n};\r\n\r\nconst CountrySelectOption = ({\r\n  country,\r\n  countryName,\r\n  selectedCountry,\r\n  onChange,\r\n}: CountrySelectOptionProps) => {\r\n  return (\r\n    <CommandItem\r\n      className=\'gap-2 cursor-pointer\'\r\n      onSelect={() => onChange(country)}\r\n    >\r\n      <FlagComponent country={country} countryName={countryName} />\r\n      <span className=\'flex-1 text-sm\'>{countryName}</span>\r\n      <span className=\'text-sm text-foreground/50\'>{`+${PhoneNumberInput.getCountryCallingCode(country)}`}</span>\r\n      <CheckIcon\r\n        className={`ml-auto size-4 ${country === selectedCountry ? "opacity-100" : "opacity-0"}`}\r\n      />\r\n    </CommandItem>\r\n  );\r\n};\r\n\r\nconst InputComponent = React.forwardRef<\r\n  HTMLInputElement,\r\n  React.ComponentProps<"input">\r\n>(({ className, ...props }, ref) => (\r\n  <Input\r\n    className={cn("rounded-e-lg rounded-s-none", className)}\r\n    {...props}\r\n    ref={ref}\r\n  />\r\n));\r\nInputComponent.displayName = "InputComponent";\r\n\r\nconst CountrySelect = ({\r\n  disabled,\r\n  value: selectedCountry,\r\n  options: countryList,\r\n  onChange,\r\n}: CountrySelectProps) => {\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger asChild>\r\n        <Button\r\n          type=\'button\'\r\n          variant=\'outline\'\r\n          className=\'flex gap-1 rounded-e-none rounded-s-lg border-r-0 px-3 focus:z-10\'\r\n          disabled={disabled}\r\n        >\r\n          <FlagComponent\r\n            country={selectedCountry}\r\n            countryName={selectedCountry}\r\n          />\r\n          <ChevronsUpDown\r\n            className={cn(\r\n              "-mr-2 size-4 opacity-50",\r\n              disabled ? "hidden" : "opacity-100",\r\n            )}\r\n          />\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent className=\'w-[300px] p-0\'>\r\n        <Command>\r\n          <CommandInput placeholder=\'Search country...\' />\r\n          <CommandList>\r\n            <ScrollArea className=\'h-72\'>\r\n              <CommandEmpty>No country found.</CommandEmpty>\r\n              <CommandGroup>\r\n                {countryList.map(({ value, label }) =>\r\n                  value ? (\r\n                    <CountrySelectOption\r\n                      key={value}\r\n                      country={value}\r\n                      countryName={label}\r\n                      selectedCountry={selectedCountry}\r\n                      onChange={onChange}\r\n                    />\r\n                  ) : null,\r\n                )}\r\n              </CommandGroup>\r\n            </ScrollArea>\r\n          </CommandList>\r\n        </Command>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n};\r\n\r\nconst TelInput: React.ForwardRefExoticComponent<TelInputProps> =\r\n  React.forwardRef<\r\n    React.ElementRef<typeof PhoneNumberInput.default>,\r\n    TelInputProps\r\n  >(({ className, onChange, ...props }, ref) => {\r\n    return (\r\n      <PhoneNumberInput.default\r\n        ref={ref}\r\n        className={cn("flex", className)}\r\n        flagComponent={FlagComponent}\r\n        countrySelectComponent={CountrySelect}\r\n        inputComponent={InputComponent}\r\n        smartCaret={false}\r\n        onChange={(value) =>\r\n          onChange?.(value || ("" as PhoneNumberInput.Value))\r\n        }\r\n        {...props}\r\n      />\r\n    );\r\n  });\r\nTelInput.displayName = "TelInput";\r\n\r\nexport { TelInput };\r\n',
        type: "registry:ui",
      },
    ],
  },
];
