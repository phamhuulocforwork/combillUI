import type { Registry } from "@/registry/schema";

export const ui: Registry = [
  {
    name: "animated-label-input",
    type: "registry:ui",
    registryDependencies: ["input", "label"],
    dependencies: ["react"],
    devDependencies: [],
    tailwind: {},
    cssVars: {
      light: {},
      dark: {},
    },
    files: [
      {
        path: "registry/default/ui/animated-label-input.tsx",
        content:
          'import * as React from "react";\n\nimport { Input } from "@/components/ui/input";\nimport { Label } from "@/components/ui/label";\n\nimport { cn } from "@/lib/utils";\n\nconst AnimatedLabel = React.forwardRef<\n  React.ElementRef<typeof Label>,\n  React.ComponentPropsWithoutRef<typeof Label>\n>(({ className, ...props }, ref) => {\n  return (\n    <Label\n      className={cn(\n        "peer-focus:secondary peer-focus:dark:secondary absolute start-2 top-1.5 z-10 origin-[0] -translate-y-4 scale-[0.85] transform bg-background px-2 text-sm text-muted-foreground duration-300 peer-placeholder-shown:top-1/2 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:scale-100 peer-focus:top-1.5 peer-focus:-translate-y-4 peer-focus:scale-[0.85] peer-focus:px-2 dark:bg-background rtl:peer-focus:left-auto rtl:peer-focus:translate-x-1/4 cursor-text",\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  );\n});\nAnimatedLabel.displayName = "AnimatedLabel";\n\ntype AnimatedLabelInputProps = InputProps & { label?: string };\n\nconst AnimatedLabelInput = React.forwardRef<\n  React.ElementRef<typeof AnimatedInput>,\n  React.PropsWithoutRef<AnimatedLabelInputProps>\n>(({ id, label, ...props }, ref) => {\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  React.useImperativeHandle(ref, () => inputRef.current!);\n\n  const handleLabelClick = () => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n\n  return (\n    <div className=\'relative \'>\n      <AnimatedInput ref={inputRef} id={id} {...props} />\n      <AnimatedLabel htmlFor={id} onClick={handleLabelClick}>\n        {label}\n      </AnimatedLabel>\n    </div>\n  );\n});\nAnimatedLabelInput.displayName = "AnimatedLabelInput";\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst AnimatedInput = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <Input\n        placeholder=\' \'\n        className={cn("peer", className)}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nAnimatedInput.displayName = "AnimatedInput";\n\nexport { AnimatedLabelInput, AnimatedLabel, AnimatedInput };\n',
        type: "registry:ui",
      },
    ],
  },
  {
    name: "animated-tooltip",
    type: "registry:ui",
    registryDependencies: [],
    dependencies: ["react", "framer-motion"],
    devDependencies: [],
    tailwind: {},
    cssVars: {
      light: {},
      dark: {},
    },
    files: [
      {
        path: "registry/default/ui/animated-tooltip.tsx",
        content:
          '"use client";\n\nimport * as React from "react";\n\nimport * as TooltipPrimitive from "@radix-ui/react-tooltip";\nimport { motion, useMotionValue, useSpring, useTransform } from "framer-motion";\n\nimport { cn } from "@/lib/utils";\n\nconst AnimatedTooltipProvider = TooltipPrimitive.Provider;\nconst AnimatedTooltip = TooltipPrimitive.Root;\nconst AnimatedTooltipTrigger = TooltipPrimitive.Trigger;\n\nconst springConfig = { stiffness: 100, damping: 5 };\n\nconst AnimatedTooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => {\n  const x = useMotionValue(0);\n  const rotate = useSpring(\n    useTransform(x, [-100, 100], [-45, 45]),\n    springConfig,\n  );\n  const translateX = useSpring(\n    useTransform(x, [-100, 100], [-50, 50]),\n    springConfig,\n  );\n\n  const handleMouseMove = (event: any) => {\n    const halfWidth = event.currentTarget.offsetWidth / 2;\n    x.set(event.nativeEvent.offsetX - halfWidth);\n  };\n\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content ref={ref} sideOffset={sideOffset} {...props}>\n        <motion.div\n          onMouseMove={handleMouseMove}\n          initial={{ opacity: 0, y: 20, scale: 0.6 }}\n          animate={{\n            opacity: 1,\n            y: 0,\n            scale: 1,\n            transition: {\n              type: "spring",\n              stiffness: 260,\n              damping: 10,\n            },\n          }}\n          exit={{ opacity: 0, y: 20, scale: 0.6 }}\n          style={{\n            translateX: translateX,\n            rotate: rotate,\n          }}\n          className={cn(\n            "flex flex-col items-center justify-center rounded-md z-50 shadow-xl bg-primary px-3 py-1.5 text-primary-foreground ",\n            className,\n          )}\n        >\n          {props.children}\n        </motion.div>\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  );\n});\nAnimatedTooltipContent.displayName = TooltipPrimitive.Content.displayName;\n\nexport {\n  AnimatedTooltip,\n  AnimatedTooltipTrigger,\n  AnimatedTooltipContent,\n  AnimatedTooltipProvider,\n};\n',
        type: "registry:ui",
      },
    ],
  },
  {
    name: "combobox-input",
    type: "registry:ui",
    registryDependencies: ["command", "skeleton"],
    dependencies: ["react", "lucide-react", "react-popper"],
    devDependencies: [],
    tailwind: {},
    cssVars: {
      light: {},
      dark: {},
    },
    files: [
      {
        path: "registry/default/ui/combobox-input.tsx",
        content:
          '"use client";\r\n\r\nimport * as React from "react";\r\n\r\nimport { Check } from "lucide-react";\r\nimport { type PopperProps, usePopper } from "react-popper";\r\n\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n  CommandLoading,\r\n} from "@/components/ui/command";\r\nimport { Skeleton } from "@/components/ui/skeleton";\r\n\r\nimport { cn } from "@/lib/utils";\r\n\r\nimport { useControllableState } from "@/registry/default/hooks/use-controllable-state";\r\n\r\ninterface Option {\r\n  label: string;\r\n  value: string;\r\n  icon?: React.ComponentType<{ className?: string }>;\r\n  withCount?: boolean;\r\n}\r\n\r\nconst nonPrintableKeys = [\r\n  "Tab",\r\n  "Control",\r\n  "Alt",\r\n  "Shift",\r\n  "Delete",\r\n  "Home",\r\n  "End",\r\n  "PageUp",\r\n  "PageDown",\r\n  "Insert",\r\n  "ArrowLeft",\r\n  "ArrowRight",\r\n];\r\n\r\ninterface ComboboxInputProps\r\n  extends Omit<\r\n    React.ComponentPropsWithoutRef<typeof CommandInput>,\r\n    "defaultValue" | "value" | "onValueChange"\r\n  > {\r\n  options: Option[];\r\n  input?: string;\r\n  onInputChange?: (value: string) => void;\r\n  defaultValue?: Option;\r\n  value?: Option;\r\n  onValueChange?: (option: Option) => void;\r\n  emptyMessage?: string;\r\n  immediate?: boolean;\r\n  placement?: PopperProps<HTMLElement>["placement"];\r\n  alignOffset?: number;\r\n  sideOffset?: number;\r\n  loading?: boolean;\r\n}\r\n\r\nexport function ComboboxInput({\r\n  options,\r\n  input,\r\n  onInputChange,\r\n  defaultValue,\r\n  value,\r\n  onValueChange,\r\n  placeholder,\r\n  emptyMessage = "No results found",\r\n  placement = "bottom-start",\r\n  alignOffset = 0,\r\n  sideOffset = 4,\r\n  immediate = false,\r\n  loading = false,\r\n  className,\r\n  ...props\r\n}: ComboboxInputProps) {\r\n  const inputRef = React.useRef<HTMLInputElement>(null);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [controlledInput, setControlledInput] = useControllableState({\r\n    prop: input,\r\n    onChange: onInputChange,\r\n  });\r\n\r\n  const [currentOption, setCurrentOption] = useControllableState({\r\n    defaultProp: defaultValue,\r\n    prop: value,\r\n    onChange: onValueChange,\r\n  });\r\n\r\n  const [referenceElement, setReferenceElement] =\r\n    React.useState<HTMLDivElement | null>(null);\r\n  const [popperElement, setPopperElement] =\r\n    React.useState<HTMLDivElement | null>(null);\r\n  const { styles, attributes } = usePopper(referenceElement, popperElement, {\r\n    modifiers: [\r\n      { name: "offset", options: { offset: [alignOffset, sideOffset] } },\r\n    ],\r\n    placement,\r\n  });\r\n\r\n  const onKeyDown = React.useCallback(\r\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\r\n      const inputElement = inputRef.current;\r\n      if (!inputElement) return;\r\n\r\n      if (nonPrintableKeys.includes(event.key)) return;\r\n\r\n      if (event.key === "Backspace" && inputElement.value === "" && !open) {\r\n        if (open) setOpen(false);\r\n        return;\r\n      }\r\n\r\n      if (event.key === "Escape") {\r\n        if (currentOption && inputElement.value === currentOption.label) {\r\n          if (open) setOpen(false);\r\n          return;\r\n        }\r\n\r\n        if (inputElement.value === "") {\r\n          if (open) setOpen(false);\r\n          return;\r\n        }\r\n\r\n        setControlledInput("");\r\n        setOpen(false);\r\n        setCurrentOption(undefined);\r\n        inputRef.current?.focus();\r\n      }\r\n\r\n      if (event.key === "Enter" && inputElement.value !== "") {\r\n        const selectedOption = options.find(\r\n          (option) => option.label === inputElement.value,\r\n        );\r\n        setCurrentOption(selectedOption);\r\n      }\r\n\r\n      if (!open) setOpen(true);\r\n    },\r\n    [currentOption, open, options, setControlledInput, setCurrentOption],\r\n  );\r\n\r\n  const onBlur = React.useCallback(() => {\r\n    setOpen(false);\r\n    setControlledInput(currentOption?.label ?? "");\r\n  }, [currentOption?.label, setControlledInput]);\r\n\r\n  const onSelect = React.useCallback(\r\n    (selectedOption: Option) => {\r\n      setControlledInput(selectedOption.label);\r\n      setCurrentOption(selectedOption);\r\n      setOpen(false);\r\n    },\r\n    [setControlledInput, setCurrentOption],\r\n  );\r\n\r\n  return (\r\n    <Command\r\n      ref={setReferenceElement}\r\n      className=\'relative overflow-visible [&_[cmdk-input-wrapper]]:rounded-md [&_[cmdk-input-wrapper]]:border\'\r\n      onKeyDown={onKeyDown}\r\n      {...attributes.reference}\r\n    >\r\n      <CommandInput\r\n        ref={inputRef}\r\n        value={controlledInput}\r\n        onValueChange={(value) => {\r\n          if (loading) return;\r\n\r\n          setControlledInput(value);\r\n          if (value === "") {\r\n            setCurrentOption(undefined);\r\n          }\r\n        }}\r\n        onBlur={onBlur}\r\n        onFocus={() => {\r\n          if (immediate) {\r\n            setOpen(true);\r\n          }\r\n        }}\r\n        placeholder={placeholder}\r\n        className={cn("border-b-0", className)}\r\n        {...props}\r\n      />\r\n      <CommandList\r\n        ref={setPopperElement}\r\n        data-state={open ? "open" : "closed"}\r\n        style={styles.popper}\r\n        className={cn(\r\n          "z-50 w-full rounded-md border bg-popover text-popover-foreground shadow-md outline-none data-[state=open]:visible data-[state=closed]:invisible data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95",\r\n          "data-[popper-placement=bottom-end]:translate-x-1/2 data-[popper-placement=bottom-start]:-translate-x-1/2 data-[popper-placement=left-end]:translate-y-1/2 data-[popper-placement=left-start]:-translate-y-1/2 data-[popper-placement=right-end]:translate-y-1/2 data-[popper-placement=right-start]:-translate-y-1/2 data-[popper-placement=top-end]:translate-x-1/2 data-[popper-placement=top-start]:-translate-x-1/2 data-[popper-placement=bottom-end]:slide-in-from-top-2 data-[popper-placement=bottom-start]:slide-in-from-top-2 data-[popper-placement=bottom]:slide-in-from-top-2 data-[popper-placement=left-end]:slide-in-from-right-2 data-[popper-placement=left-start]:slide-in-from-right-2 data-[popper-placement=left]:slide-in-from-right-2 data-[popper-placement=right-end]:slide-in-from-left-2 data-[popper-placement=right-start]:slide-in-from-left-2 data-[popper-placement=right]:slide-in-from-left-2 data-[popper-placement=top-end]:slide-in-from-bottom-2 data-[popper-placement=top-start]:slide-in-from-bottom-2 data-[popper-placement=top]:slide-in-from-bottom-2",\r\n        )}\r\n        {...attributes.popper}\r\n      >\r\n        {loading ? (\r\n          <CommandLoading className=\'p-1\'>\r\n            <Skeleton className=\'h-8 w-full\' />\r\n          </CommandLoading>\r\n        ) : null}\r\n        {options.length > 0 && !loading ? (\r\n          <CommandGroup>\r\n            {options.map((option) => {\r\n              const isSelected = currentOption?.value === option.value;\r\n\r\n              return (\r\n                <CommandItem\r\n                  key={option.value}\r\n                  value={option.label}\r\n                  onMouseDown={(event) => {\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                  }}\r\n                  onSelect={() => onSelect(option)}\r\n                  className={cn("flex w-full items-center gap-2", {\r\n                    "pl-8": !isSelected,\r\n                  })}\r\n                >\r\n                  {isSelected ? (\r\n                    <Check className=\'w-4\' aria-hidden=\'true\' />\r\n                  ) : null}\r\n                  {option.label}\r\n                </CommandItem>\r\n              );\r\n            })}\r\n          </CommandGroup>\r\n        ) : null}\r\n        {loading ? null : <CommandEmpty>{emptyMessage}</CommandEmpty>}\r\n      </CommandList>\r\n    </Command>\r\n  );\r\n}\r\n',
        type: "registry:ui",
      },
    ],
  },
  {
    name: "labeled-switch",
    type: "registry:ui",
    registryDependencies: [],
    dependencies: ["react", "framer-motion"],
    devDependencies: [],
    tailwind: {},
    cssVars: {
      light: {},
      dark: {},
    },
    files: [
      {
        path: "registry/default/ui/labeled-switch.tsx",
        content:
          '"use client";\n\nimport * as React from "react";\n\nimport * as SwitchPrimitives from "@radix-ui/react-switch";\nimport { motion } from "framer-motion";\n\nimport { cn } from "@/lib/utils";\n\ninterface LabeledSwitchProps {\n  firstLabel: React.ReactNode;\n  secondLabel: React.ReactNode;\n  selected: boolean;\n  onToggle: (checked: boolean) => void;\n  className?: string;\n}\n\nconst LabeledSwitch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  LabeledSwitchProps\n>(\n  (\n    { className, firstLabel, secondLabel, selected, onToggle, ...props },\n    ref,\n  ) => {\n    return (\n      <SwitchPrimitives.Root\n        className={cn(\n          "relative flex w-fit cursor-pointer items-center rounded-full ring-2 ring-input transition-colors",\n          className,\n        )}\n        ref={ref}\n        checked={selected}\n        onCheckedChange={onToggle}\n      >\n        <LabeledSwitchButton selected={selected}>\n          {firstLabel}\n        </LabeledSwitchButton>\n        <LabeledSwitchButton selected={!selected}>\n          {secondLabel}\n        </LabeledSwitchButton>\n        <SwitchPrimitives.Thumb\n          className={cn(\n            "absolute inset-0 w-full z-0 flex data-[state=unchecked]:justify-start data-[state=checked]:justify-end",\n          )}\n        >\n          <motion.span\n            layout\n            transition={{ type: "spring", damping: 15, stiffness: 250 }}\n            className=\'h-full w-1/2 rounded-full bg-muted\'\n          />\n        </SwitchPrimitives.Thumb>\n      </SwitchPrimitives.Root>\n    );\n  },\n);\nLabeledSwitch.displayName = "LabeledSwitch";\n\nconst LabeledSwitchButton = ({\n  children,\n  selected,\n}: {\n  children: React.ReactNode;\n  selected: boolean;\n}) => (\n  <div\n    className={cn(\n      "relative z-10 flex w-full items-center justify-center gap-2 px-3 py-3 text-xs font-bold transition-colors md:py-1.5 md:pl-3 md:pr-3.5",\n      selected ? "text-primary" : "text-muted-foreground",\n    )}\n    onMouseDown={(e) => e.preventDefault()}\n  >\n    <span className=\'relative z-10\'>{children}</span>\n  </div>\n);\n\nexport { LabeledSwitch };\n',
        type: "registry:ui",
      },
    ],
  },
  {
    name: "range-slider",
    type: "registry:ui",
    registryDependencies: [],
    dependencies: ["react"],
    devDependencies: [],
    tailwind: {},
    cssVars: {
      light: {},
      dark: {},
    },
    files: [
      {
        path: "registry/default/ui/range-slider.tsx",
        content:
          '"use client";\n\nimport * as React from "react";\n\nimport * as SliderPrimitive from "@radix-ui/react-slider";\n\nimport { cn } from "@/lib/utils";\n\ninterface RangeSliderProps\n  extends React.ComponentProps<typeof SliderPrimitive.Root> {\n  labelPosition?: "top" | "bottom";\n  label?: (value: number | undefined) => React.ReactNode;\n  orientation?: "horizontal" | "vertical";\n}\n\nconst RangeSlider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  RangeSliderProps\n>(\n  (\n    {\n      className,\n      label,\n      labelPosition = "top",\n      orientation = "horizontal",\n      ...props\n    },\n    ref,\n  ) => {\n    const initialValue = Array.isArray(props.value)\n      ? props.value\n      : [props.min, props.max];\n\n    return (\n      <SliderPrimitive.Root\n        ref={ref}\n        orientation={orientation}\n        className={cn(\n          orientation === "horizontal"\n            ? "relative flex w-full touch-none select-none items-center"\n            : "relative flex h-full min-h-[200px] touch-none select-none flex-col items-center",\n          className,\n        )}\n        {...props}\n      >\n        <SliderPrimitive.Track\n          className={cn(\n            orientation === "horizontal"\n              ? "relative h-2 w-full grow overflow-hidden rounded-full bg-secondary"\n              : "relative w-2 h-full grow overflow-hidden rounded-full bg-secondary",\n          )}\n        >\n          <SliderPrimitive.Range\n            className={cn(\n              orientation === "horizontal"\n                ? "absolute h-full bg-primary"\n                : "absolute w-full bg-primary",\n            )}\n          />\n        </SliderPrimitive.Track>\n        {initialValue.map((value, index) => (\n          <React.Fragment key={index}>\n            <SliderPrimitive.Thumb\n              className={cn(\n                "relative block border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",\n                orientation === "horizontal"\n                  ? "h-5 w-2 rounded-sm"\n                  : "h-2 w-5 rounded-sm",\n              )}\n            >\n              {label && (\n                <span\n                  className={cn(\n                    "absolute flex text-xs justify-center font-medium",\n                    orientation === "horizontal"\n                      ? labelPosition === "top"\n                        ? "-left-2 -top-5"\n                        : "-left-2 top-5"\n                      : labelPosition === "top"\n                        ? "-translate-x-full -translate-y-1/2 -left-2"\n                        : "translate-x-full -translate-y-1/2",\n                  )}\n                >\n                  {label(value)}\n                </span>\n              )}\n            </SliderPrimitive.Thumb>\n          </React.Fragment>\n        ))}\n      </SliderPrimitive.Root>\n    );\n  },\n);\nRangeSlider.displayName = "RangeSlider";\n\nexport { RangeSlider };\n',
        type: "registry:ui",
      },
    ],
  },
  {
    name: "responsive-textarea",
    type: "registry:ui",
    registryDependencies: [],
    dependencies: ["react"],
    devDependencies: [],
    tailwind: {},
    cssVars: {
      light: {},
      dark: {},
    },
    files: [
      {
        path: "registry/default/ui/responsive-textarea.tsx",
        content:
          '"use client";\n\nimport * as React from "react";\n\nimport { cn } from "@/lib/utils";\n\nconst ResponsiveTextarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<"textarea">\n>(({ className, ...props }, ref) => {\n  const textAreaRef = React.useRef<HTMLTextAreaElement>(null);\n  const [val, setVal] = React.useState<string>("");\n\n  React.useEffect(() => {\n    if (textAreaRef.current) {\n      textAreaRef.current.style.height = "auto";\n      textAreaRef.current.style.height =\n        textAreaRef.current.scrollHeight + "px";\n    }\n  }, [val]);\n\n  return (\n    <textarea\n      className={cn(\n        "placeholder:text-muted-foreground flex min-h-[80px] w-full resize-none overflow-hidden rounded-md border border-input bg-background px-3 py-2 text-sm text-foreground ring-offset-primary focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",\n        className,\n      )}\n      ref={textAreaRef}\n      onChange={(e) => setVal(e.target.value)}\n      {...props}\n    />\n  );\n});\nResponsiveTextarea.displayName = "ResponsiveTextarea";\n\nexport { ResponsiveTextarea };\n',
        type: "registry:ui",
      },
    ],
  },
  {
    name: "star-rating",
    type: "registry:ui",
    registryDependencies: [],
    dependencies: ["react", "lucide-react"],
    devDependencies: [],
    tailwind: {},
    cssVars: {
      light: {},
      dark: {},
    },
    files: [
      {
        path: "registry/default/ui/star-rating.tsx",
        content:
          '"use client";\n\nimport * as React from "react";\n\nimport { Star } from "lucide-react";\n\nimport { cn } from "@/lib/utils";\n\nlet nextId = 0;\nconst generateStarIds = (count: number) =>\n  Array.from({ length: count }, () => `star-${nextId++}`);\n\ninterface StarRatingProps {\n  value: number;\n  onChange?: (value: number) => void;\n  className?: string;\n  size?: number;\n  maxStars?: number;\n  readOnly?: boolean;\n  color?: string;\n}\n\nconst StarIcon = React.memo(\n  ({\n    size,\n    index,\n    isInteractive,\n    onClick,\n    onMouseMove,\n    style,\n  }: {\n    index: number;\n    style: React.CSSProperties;\n    size: number;\n    onClick: (e: React.MouseEvent<SVGElement>) => void;\n    onMouseMove: (e: React.MouseEvent<SVGElement>) => void;\n    isInteractive: boolean;\n  }) => (\n    <Star\n      key={index}\n      size={size}\n      fill={style.fill}\n      color={style.color}\n      onClick={onClick}\n      onMouseMove={onMouseMove}\n      className={cn(\n        "transition-colors duration-200",\n        isInteractive && "cursor-pointer hover:scale-110",\n      )}\n      style={style}\n    />\n  ),\n);\nStarIcon.displayName = "StarIcon";\n\nconst StarRating = ({\n  className,\n  color = "#e4c616",\n  size = 24,\n  maxStars = 5,\n  onChange,\n  readOnly = false,\n  value,\n}: StarRatingProps) => {\n  const [hoverRating, setHoverRating] = React.useState<number | null>(null);\n  const [starIds] = React.useState(() => generateStarIds(maxStars));\n\n  const handleStarClick = React.useCallback(\n    (index: number, event: React.MouseEvent<SVGElement>) => {\n      if (readOnly || !onChange) return;\n      const newRating = index + 1;\n      onChange(newRating);\n    },\n    [readOnly, onChange],\n  );\n\n  const handleStarHover = React.useCallback(\n    (index: number, event: React.MouseEvent<SVGElement>) => {\n      if (!readOnly) {\n        setHoverRating(index + 1);\n      }\n    },\n    [readOnly],\n  );\n\n  const handleMouseLeave = React.useCallback(() => {\n    if (!readOnly) {\n      setHoverRating(null);\n    }\n  }, [readOnly]);\n\n  const getStarStyle = React.useCallback(\n    (index: number) => {\n      const ratingToUse =\n        !readOnly && hoverRating !== null ? hoverRating : value;\n\n      const difference = ratingToUse - index;\n\n      if (difference <= 0) return { color: "gray", fill: "transparent" };\n      if (difference >= 1) return { color: color, fill: color };\n\n      return {\n        color: color,\n        fill: `url(#${starIds[index]})`,\n      } as React.CSSProperties;\n    },\n    [readOnly, hoverRating, value, color, starIds],\n  );\n\n  const renderGradientDefs = () => {\n    if (!readOnly && hoverRating !== null) return null;\n\n    const partialStarIndex = Math.floor(value);\n    const partialFill = (value % 1) * 100;\n\n    if (partialFill > 0) {\n      return (\n        <linearGradient\n          id={starIds[partialStarIndex]}\n          x1=\'0%\'\n          y1=\'0%\'\n          x2=\'100%\'\n          y2=\'0%\'\n        >\n          <stop offset={`${partialFill}%`} stopColor={color} />\n          <stop offset={`${partialFill}%`} stopColor=\'transparent\' />\n        </linearGradient>\n      );\n    }\n    return null;\n  };\n\n  const stars = React.useMemo(() => {\n    return Array.from({ length: maxStars }).map((_, index) => {\n      const style = getStarStyle(index);\n      return (\n        <StarIcon\n          key={index}\n          index={index}\n          style={style}\n          size={size}\n          onClick={(e) => handleStarClick(index, e)}\n          onMouseMove={(e) => handleStarHover(index, e)}\n          isInteractive={!readOnly}\n        />\n      );\n    });\n  }, [\n    maxStars,\n    getStarStyle,\n    size,\n    handleStarClick,\n    handleStarHover,\n    readOnly,\n  ]);\n\n  return (\n    <div\n      className={cn("relative flex items-center gap-x-0.5", className)}\n      onMouseLeave={handleMouseLeave}\n    >\n      <svg width=\'0\' height=\'0\' style={{ position: "absolute" }}>\n        <defs>{renderGradientDefs()}</defs>\n      </svg>\n      {stars}\n    </div>\n  );\n};\n\nexport default StarRating;\n',
        type: "registry:ui",
      },
    ],
  },
  {
    name: "stepper",
    type: "registry:ui",
    registryDependencies: ["button"],
    dependencies: ["react", "class-variance-authority"],
    devDependencies: [],
    tailwind: {},
    cssVars: {
      light: {},
      dark: {},
    },
    files: [
      {
        path: "registry/default/ui/stepper.tsx",
        content:
          'import * as React from "react";\n\nimport * as Stepperize from "@stepperize/react";\nimport { Slot } from "@radix-ui/react-slot";\nimport { type VariantProps, cva } from "class-variance-authority";\n\nimport { Button } from "@/components/ui/button";\n\nimport { cn } from "@/lib/utils";\n\ntype StepperVariant = "horizontal" | "vertical" | "circle";\ntype StepperLabelOrientation = "horizontal" | "vertical";\n\ntype StepperConfig = {\n  variant?: StepperVariant;\n  labelOrientation?: StepperLabelOrientation;\n  tracking?: boolean;\n};\n\ntype DefineStepperProps<Steps extends Stepperize.Step[]> = Omit<\n  Stepperize.StepperReturn<Steps>,\n  "Scoped"\n> & {\n  StepperProvider: (\n    props: Omit<Stepperize.ScopedProps<Steps>, "children"> &\n      Omit<React.ComponentProps<"div">, "children"> &\n      StepperConfig & {\n        children:\n          | React.ReactNode\n          | ((props: {\n              methods: Stepperize.Stepper<Steps>;\n            }) => React.ReactNode);\n      },\n  ) => React.ReactElement;\n  StepperNavigation: (props: React.ComponentProps<"nav">) => React.ReactElement;\n  StepperStep: (\n    props: React.ComponentProps<"button"> & {\n      of: Stepperize.Get.Id<Steps>;\n      icon?: React.ReactNode;\n    },\n  ) => React.ReactElement;\n  StepperTitle: (\n    props: React.ComponentProps<"h4"> & { asChild?: boolean },\n  ) => React.ReactElement;\n  StepperDescription: (\n    props: React.ComponentProps<"p"> & { asChild?: boolean },\n  ) => React.ReactElement;\n  StepperPanel: (\n    props: React.ComponentProps<"div"> & { asChild?: boolean },\n  ) => React.ReactElement;\n  StepperControls: (\n    props: React.ComponentProps<"div"> & { asChild?: boolean },\n  ) => React.ReactElement;\n};\n\ntype CircleStepIndicatorProps = {\n  currentStep: number;\n  totalSteps: number;\n  size?: number;\n  strokeWidth?: number;\n};\n\nconst StepperContext = React.createContext<StepperConfig | null>(null);\n\nconst useStepperProvider = (): StepperConfig => {\n  const context = React.useContext(StepperContext);\n  if (!context) {\n    throw new Error("useStepper must be used within a StepperProvider.");\n  }\n  return context;\n};\n\nconst defineStepper = <const Steps extends Stepperize.Step[]>(\n  ...steps: Steps\n): DefineStepperProps<Steps> => {\n  const { Scoped, useStepper, ...rest } = Stepperize.defineStepper(...steps);\n\n  const StepperContainer = ({\n    children,\n    className,\n    ...props\n  }: Omit<React.ComponentProps<"div">, "children"> & {\n    children:\n      | React.ReactNode\n      | ((props: { methods: Stepperize.Stepper<Steps> }) => React.ReactNode);\n  }) => {\n    const methods = useStepper();\n\n    return (\n      <div className={cn("w-full", className)} {...props}>\n        {typeof children === "function" ? children({ methods }) : children}\n      </div>\n    );\n  };\n\n  return {\n    ...rest,\n    useStepper,\n    StepperProvider: ({\n      variant = "horizontal",\n      labelOrientation = "horizontal",\n      tracking = false,\n      children,\n      className,\n      ...props\n    }) => {\n      return (\n        <StepperContext.Provider\n          value={{ variant, labelOrientation, tracking }}\n        >\n          <Scoped\n            initialStep={props.initialStep}\n            initialMetadata={props.initialMetadata}\n          >\n            <StepperContainer className={className} {...props}>\n              {children}\n            </StepperContainer>\n          </Scoped>\n        </StepperContext.Provider>\n      );\n    },\n    StepperNavigation: ({\n      children,\n      className,\n      "aria-label": ariaLabel = "Stepper Navigation",\n      ...props\n    }) => {\n      const { variant } = useStepperProvider();\n      return (\n        <nav\n          aria-label={ariaLabel}\n          role=\'tablist\'\n          className={cn("stepper-navigation", className)}\n          {...props}\n        >\n          <ol className={listVariants({ variant: variant })}>{children}</ol>\n        </nav>\n      );\n    },\n    StepperStep: ({ children, className, icon, ...props }) => {\n      const { variant, labelOrientation } = useStepperProvider();\n      const { current } = useStepper();\n\n      const utils = rest.utils;\n      const steps = rest.steps;\n\n      const stepIndex = utils.getIndex(props.of);\n      const step = steps[stepIndex];\n      const currentIndex = utils.getIndex(current.id);\n\n      const isLast = utils.getLast().id === props.of;\n      const isActive = current.id === props.of;\n\n      const dataState = getStepState(currentIndex, stepIndex);\n      const childMap = useStepChildren(children);\n\n      const title = childMap.get("title");\n      const description = childMap.get("description");\n      const panel = childMap.get("panel");\n\n      if (variant === "circle") {\n        return (\n          <li\n            className={cn(\n              "flex shrink-0 items-center gap-4 rounded-md transition-colors",\n              className,\n            )}\n          >\n            <CircleStepIndicator\n              currentStep={stepIndex + 1}\n              totalSteps={steps.length}\n            />\n            <div className=\'flex flex-col items-start gap-1\'>\n              {title}\n              {description}\n            </div>\n          </li>\n        );\n      }\n\n      return (\n        <>\n          <li\n            className={cn([\n              "group peer relative flex items-center gap-2",\n              "data-[variant=vertical]:flex-row",\n              "data-[label-orientation=vertical]:w-full",\n              "data-[label-orientation=vertical]:flex-col",\n              "data-[label-orientation=vertical]:justify-center",\n            ])}\n            data-variant={variant}\n            data-label-orientation={labelOrientation}\n            data-state={dataState}\n            data-disabled={props.disabled}\n          >\n            <Button\n              id={`step-${step.id}`}\n              type=\'button\'\n              role=\'tab\'\n              tabIndex={dataState !== "inactive" ? 0 : -1}\n              className=\'rounded-full\'\n              variant={dataState !== "inactive" ? "default" : "secondary"}\n              size=\'icon\'\n              aria-controls={`step-panel-${props.of}`}\n              aria-current={isActive ? "step" : undefined}\n              aria-posinset={stepIndex + 1}\n              aria-setsize={steps.length}\n              aria-selected={isActive}\n              onKeyDown={(e) =>\n                onStepKeyDown(\n                  e,\n                  utils.getNext(props.of),\n                  utils.getPrev(props.of),\n                )\n              }\n              {...props}\n            >\n              {icon ?? stepIndex + 1}\n            </Button>\n            {variant === "horizontal" && labelOrientation === "vertical" && (\n              <StepperSeparator\n                orientation=\'horizontal\'\n                labelOrientation={labelOrientation}\n                isLast={isLast}\n                state={dataState}\n                disabled={props.disabled}\n              />\n            )}\n            <div className=\'flex flex-col items-start\'>\n              {title}\n              {description}\n            </div>\n          </li>\n\n          {variant === "horizontal" && labelOrientation === "horizontal" && (\n            <StepperSeparator\n              orientation=\'horizontal\'\n              isLast={isLast}\n              state={dataState}\n              disabled={props.disabled}\n            />\n          )}\n\n          {variant === "vertical" && (\n            <div className=\'flex gap-4\'>\n              {!isLast && (\n                <div className=\'flex justify-center ps-5\'>\n                  <StepperSeparator\n                    orientation=\'vertical\'\n                    isLast={isLast}\n                    state={dataState}\n                    disabled={props.disabled}\n                  />\n                </div>\n              )}\n              <div className=\'my-3 flex-1 ps-4\'>{panel}</div>\n            </div>\n          )}\n        </>\n      );\n    },\n    StepperTitle,\n    StepperDescription,\n    StepperPanel: ({ children, className, asChild, ...props }) => {\n      const Comp = asChild ? Slot : "div";\n      const { tracking } = useStepperProvider();\n\n      return (\n        <Comp\n          className={className}\n          ref={(node) => scrollIntoStepperPanel(node, tracking)}\n          {...props}\n        >\n          {children}\n        </Comp>\n      );\n    },\n    StepperControls: ({ children, className, asChild, ...props }) => {\n      const Comp = asChild ? Slot : "div";\n      return (\n        <Comp className={cn(" flex justify-end gap-4", className)} {...props}>\n          {children}\n        </Comp>\n      );\n    },\n  };\n};\n\nconst StepperTitle = ({\n  children,\n  className,\n  asChild,\n  ...props\n}: React.ComponentProps<"h4"> & { asChild?: boolean }) => {\n  const Comp = asChild ? Slot : "h4";\n\n  return (\n    <Comp className={cn("text-base font-medium m-0", className)} {...props}>\n      {children}\n    </Comp>\n  );\n};\n\nconst StepperDescription = ({\n  children,\n  className,\n  asChild,\n  ...props\n}: React.ComponentProps<"p"> & { asChild?: boolean }) => {\n  const Comp = asChild ? Slot : "p";\n\n  return (\n    <Comp className={cn("text-sm text-muted-foreground", className)} {...props}>\n      {children}\n    </Comp>\n  );\n};\n\nconst StepperSeparator = ({\n  orientation,\n  isLast,\n  labelOrientation,\n  state,\n  disabled,\n}: {\n  isLast: boolean;\n  state: string;\n  disabled?: boolean;\n} & VariantProps<typeof classForSeparator>) => {\n  if (isLast) {\n    return null;\n  }\n  return (\n    <div\n      data-orientation={orientation}\n      data-state={state}\n      data-disabled={disabled}\n      role=\'separator\'\n      tabIndex={-1}\n      className={classForSeparator({ orientation, labelOrientation })}\n    />\n  );\n};\n\nconst CircleStepIndicator = ({\n  currentStep,\n  totalSteps,\n  size = 80,\n  strokeWidth = 6,\n}: CircleStepIndicatorProps) => {\n  const radius = (size - strokeWidth) / 2;\n  const circumference = radius * 2 * Math.PI;\n  const fillPercentage = (currentStep / totalSteps) * 100;\n  const dashOffset = circumference - (circumference * fillPercentage) / 100;\n  return (\n    <div\n      role=\'progressbar\'\n      aria-valuenow={currentStep}\n      aria-valuemin={1}\n      aria-valuemax={totalSteps}\n      tabIndex={-1}\n      className=\'relative inline-flex items-center justify-center\'\n    >\n      <svg width={size} height={size}>\n        <title>Step Indicator</title>\n        <circle\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          fill=\'none\'\n          stroke=\'currentColor\'\n          strokeWidth={strokeWidth}\n          className=\'text-muted-foreground\'\n        />\n        <circle\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          fill=\'none\'\n          stroke=\'currentColor\'\n          strokeWidth={strokeWidth}\n          strokeDasharray={circumference}\n          strokeDashoffset={dashOffset}\n          className=\'text-primary transition-all duration-300 ease-in-out\'\n          transform={`rotate(-90 ${size / 2} ${size / 2})`}\n        />\n      </svg>\n      <div className=\'absolute inset-0 flex items-center justify-center\'>\n        <span className=\'text-sm font-medium\' aria-live=\'polite\'>\n          {currentStep} of {totalSteps}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nconst listVariants = cva(" flex gap-2", {\n  variants: {\n    variant: {\n      horizontal: "flex-row items-center justify-between",\n      vertical: "flex-col",\n      circle: "flex-row items-center justify-between",\n    },\n  },\n});\n\nconst classForSeparator = cva(\n  [\n    "bg-muted",\n    "data-[state=completed]:bg-primary data-[disabled]:opacity-50",\n    "transition-all duration-300 ease-in-out",\n  ],\n  {\n    variants: {\n      orientation: {\n        horizontal: "h-0.5 flex-1",\n        vertical: "h-full w-0.5",\n      },\n      labelOrientation: {\n        vertical:\n          "absolute left-[calc(50%+30px)] right-[calc(-50%+20px)] top-5 block shrink-0",\n      },\n    },\n  },\n);\n\nfunction scrollIntoStepperPanel(\n  node: HTMLDivElement | null,\n  tracking?: boolean,\n) {\n  if (tracking) {\n    node?.scrollIntoView({ behavior: "smooth", block: "center" });\n  }\n}\n\nconst useStepChildren = (children: React.ReactNode) => {\n  return React.useMemo(() => extractChildren(children), [children]);\n};\n\nconst extractChildren = (children: React.ReactNode) => {\n  const childrenArray = React.Children.toArray(children);\n  const map = new Map<string, React.ReactNode>();\n\n  for (const child of childrenArray) {\n    if (React.isValidElement(child)) {\n      if (child.type === StepperTitle) {\n        map.set("title", child);\n      } else if (child.type === StepperDescription) {\n        map.set("description", child);\n      } else {\n        map.set("panel", child);\n      }\n    }\n  }\n\n  return map;\n};\n\nconst onStepKeyDown = (\n  e: React.KeyboardEvent<HTMLButtonElement>,\n  nextStep: Stepperize.Step,\n  prevStep: Stepperize.Step,\n) => {\n  const { key } = e;\n  const directions = {\n    next: ["ArrowRight", "ArrowDown"],\n    prev: ["ArrowLeft", "ArrowUp"],\n  };\n\n  if (directions.next.includes(key) || directions.prev.includes(key)) {\n    const direction = directions.next.includes(key) ? "next" : "prev";\n    const step = direction === "next" ? nextStep : prevStep;\n\n    if (!step) {\n      return;\n    }\n\n    const stepElement = document.getElementById(`step-${step.id}`);\n    if (!stepElement) {\n      return;\n    }\n\n    const isActive =\n      stepElement.parentElement?.getAttribute("data-state") !== "inactive";\n    if (isActive || direction === "prev") {\n      stepElement.focus();\n    }\n  }\n};\n\nconst getStepState = (currentIndex: number, stepIndex: number) => {\n  if (currentIndex === stepIndex) {\n    return "active";\n  }\n  if (currentIndex > stepIndex) {\n    return "completed";\n  }\n  return "inactive";\n};\n\nexport { defineStepper };\n',
        type: "registry:ui",
      },
    ],
  },
  {
    name: "tel-input",
    type: "registry:ui",
    registryDependencies: [
      "button",
      "command",
      "input",
      "popover",
      "scroll-area",
    ],
    dependencies: [
      "react",
      "react-phone-number-input",
      "lucide-react",
      "react-phone-number-input/flags",
    ],
    devDependencies: [],
    tailwind: {},
    cssVars: {
      light: {},
      dark: {},
    },
    files: [
      {
        path: "registry/default/ui/tel-input.tsx",
        content:
          'import * as React from "react";\n\nimport * as PhoneNumberInput from "react-phone-number-input";\nimport { CheckIcon, ChevronsUpDown } from "lucide-react";\nimport flags from "react-phone-number-input/flags";\n\nimport { Button } from "@/components/ui/button";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from "@/components/ui/command";\nimport { Input } from "@/components/ui/input";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from "@/components/ui/popover";\nimport { ScrollArea } from "@/components/ui/scroll-area";\n\nimport { cn } from "@/lib/utils";\n\ntype CountryEntry = {\n  label: string;\n  value: PhoneNumberInput.Country | undefined;\n};\n\ntype CountrySelectProps = {\n  disabled?: boolean;\n  value: PhoneNumberInput.Country;\n  options: CountryEntry[];\n  onChange: (country: PhoneNumberInput.Country) => void;\n};\n\ninterface CountrySelectOptionProps extends PhoneNumberInput.FlagProps {\n  selectedCountry: PhoneNumberInput.Country;\n  onChange: (country: PhoneNumberInput.Country) => void;\n}\n\ntype TelInputProps = Omit<\n  React.ComponentProps<"input">,\n  "onChange" | "value" | "ref"\n> &\n  Omit<PhoneNumberInput.Props<typeof PhoneNumberInput.default>, "onChange"> & {\n    onChange?: (value: PhoneNumberInput.Value) => void;\n  };\n\nconst FlagComponent = ({\n  country,\n  countryName,\n}: PhoneNumberInput.FlagProps) => {\n  const Flag = flags[country];\n\n  return (\n    <span className=\'flex h-4 w-6 overflow-hidden rounded-sm bg-foreground/20 [&_svg]:size-full\'>\n      {Flag && <Flag title={countryName} />}\n    </span>\n  );\n};\n\nconst CountrySelectOption = ({\n  country,\n  countryName,\n  selectedCountry,\n  onChange,\n}: CountrySelectOptionProps) => {\n  return (\n    <CommandItem\n      className=\'gap-2 cursor-pointer\'\n      onSelect={() => onChange(country)}\n    >\n      <FlagComponent country={country} countryName={countryName} />\n      <span className=\'flex-1 text-sm\'>{countryName}</span>\n      <span className=\'text-sm text-foreground/50\'>{`+${PhoneNumberInput.getCountryCallingCode(country)}`}</span>\n      <CheckIcon\n        className={`ml-auto size-4 ${country === selectedCountry ? "opacity-100" : "opacity-0"}`}\n      />\n    </CommandItem>\n  );\n};\n\nconst InputComponent = React.forwardRef<\n  HTMLInputElement,\n  React.ComponentProps<"input">\n>(({ className, ...props }, ref) => (\n  <Input\n    className={cn("rounded-e-lg rounded-s-none", className)}\n    {...props}\n    ref={ref}\n  />\n));\nInputComponent.displayName = "InputComponent";\n\nconst CountrySelect = ({\n  disabled,\n  value: selectedCountry,\n  options: countryList,\n  onChange,\n}: CountrySelectProps) => {\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          type=\'button\'\n          variant=\'outline\'\n          className=\'flex gap-1 rounded-e-none rounded-s-lg border-r-0 px-3 focus:z-10\'\n          disabled={disabled}\n        >\n          <FlagComponent\n            country={selectedCountry}\n            countryName={selectedCountry}\n          />\n          <ChevronsUpDown\n            className={cn(\n              "-mr-2 size-4 opacity-50",\n              disabled ? "hidden" : "opacity-100",\n            )}\n          />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\'w-[300px] p-0\'>\n        <Command>\n          <CommandInput placeholder=\'Search country...\' />\n          <CommandList>\n            <ScrollArea className=\'h-72\'>\n              <CommandEmpty>No country found.</CommandEmpty>\n              <CommandGroup>\n                {countryList.map(({ value, label }) =>\n                  value ? (\n                    <CountrySelectOption\n                      key={value}\n                      country={value}\n                      countryName={label}\n                      selectedCountry={selectedCountry}\n                      onChange={onChange}\n                    />\n                  ) : null,\n                )}\n              </CommandGroup>\n            </ScrollArea>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nconst TelInput: React.ForwardRefExoticComponent<TelInputProps> =\n  React.forwardRef<\n    React.ElementRef<typeof PhoneNumberInput.default>,\n    TelInputProps\n  >(({ className, onChange, ...props }, ref) => {\n    return (\n      <PhoneNumberInput.default\n        ref={ref}\n        className={cn("flex", className)}\n        flagComponent={FlagComponent}\n        countrySelectComponent={CountrySelect}\n        inputComponent={InputComponent}\n        smartCaret={false}\n        onChange={(value) =>\n          onChange?.(value || ("" as PhoneNumberInput.Value))\n        }\n        {...props}\n      />\n    );\n  });\nTelInput.displayName = "TelInput";\n\nexport { TelInput };\n',
        type: "registry:ui",
      },
    ],
  },
];
