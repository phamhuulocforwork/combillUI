// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react";

export const Index: Record<string, any> = {
  default: {
    
    "animated-label-input": {
      name: "animated-label-input",
      description: "",
      type: "registry:ui",
      files: [
  {
    "path": "registry/default/ui/animated-label-input.tsx",
    "content": "import * as React from \"react\";\n\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst AnimatedLabel = React.forwardRef<\n  React.ElementRef<typeof Label>,\n  React.ComponentPropsWithoutRef<typeof Label>\n>(({ className, ...props }, ref) => {\n  return (\n    <Label\n      className={cn(\n        \"peer-focus:secondary peer-focus:dark:secondary absolute start-2 top-1.5 z-10 origin-[0] -translate-y-4 scale-[0.85] transform bg-background px-2 text-sm text-muted-foreground duration-300 peer-placeholder-shown:top-1/2 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:scale-100 peer-focus:top-1.5 peer-focus:-translate-y-4 peer-focus:scale-[0.85] peer-focus:px-2 dark:bg-background rtl:peer-focus:left-auto rtl:peer-focus:translate-x-1/4 cursor-text\",\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  );\n});\nAnimatedLabel.displayName = \"AnimatedLabel\";\n\ntype AnimatedLabelInputProps = InputProps & { label?: string };\n\nconst AnimatedLabelInput = React.forwardRef<\n  React.ElementRef<typeof AnimatedInput>,\n  React.PropsWithoutRef<AnimatedLabelInputProps>\n>(({ id, label, ...props }, ref) => {\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  React.useImperativeHandle(ref, () => inputRef.current!);\n\n  const handleLabelClick = () => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n\n  return (\n    <div className='relative '>\n      <AnimatedInput ref={inputRef} id={id} {...props} />\n      <AnimatedLabel htmlFor={id} onClick={handleLabelClick}>\n        {label}\n      </AnimatedLabel>\n    </div>\n  );\n});\nAnimatedLabelInput.displayName = \"AnimatedLabelInput\";\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst AnimatedInput = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <Input\n        placeholder=' '\n        className={cn(\"peer\", className)}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nAnimatedInput.displayName = \"AnimatedInput\";\n\nexport { AnimatedLabelInput, AnimatedLabel, AnimatedInput };\n",
    "type": "registry:ui"
  }
],
      component: React.lazy(() => import("@/registry/default/ui/animated-label-input.tsx")),
    },

    "animated-tooltip": {
      name: "animated-tooltip",
      description: "",
      type: "registry:ui",
      files: [
  {
    "path": "registry/default/ui/animated-tooltip.tsx",
    "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\";\nimport { motion, useMotionValue, useSpring, useTransform } from \"framer-motion\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst AnimatedTooltipProvider = TooltipPrimitive.Provider;\nconst AnimatedTooltip = TooltipPrimitive.Root;\nconst AnimatedTooltipTrigger = TooltipPrimitive.Trigger;\n\nconst springConfig = { stiffness: 100, damping: 5 };\n\nconst AnimatedTooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => {\n  const x = useMotionValue(0);\n  const rotate = useSpring(\n    useTransform(x, [-100, 100], [-45, 45]),\n    springConfig,\n  );\n  const translateX = useSpring(\n    useTransform(x, [-100, 100], [-50, 50]),\n    springConfig,\n  );\n\n  const handleMouseMove = (event: any) => {\n    const halfWidth = event.currentTarget.offsetWidth / 2;\n    x.set(event.nativeEvent.offsetX - halfWidth);\n  };\n\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content ref={ref} sideOffset={sideOffset} {...props}>\n        <motion.div\n          onMouseMove={handleMouseMove}\n          initial={{ opacity: 0, y: 20, scale: 0.6 }}\n          animate={{\n            opacity: 1,\n            y: 0,\n            scale: 1,\n            transition: {\n              type: \"spring\",\n              stiffness: 260,\n              damping: 10,\n            },\n          }}\n          exit={{ opacity: 0, y: 20, scale: 0.6 }}\n          style={{\n            translateX: translateX,\n            rotate: rotate,\n          }}\n          className={cn(\n            \"flex flex-col items-center justify-center rounded-md z-50 shadow-xl bg-primary px-3 py-1.5 text-primary-foreground \",\n            className,\n          )}\n        >\n          {props.children}\n        </motion.div>\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  );\n});\nAnimatedTooltipContent.displayName = TooltipPrimitive.Content.displayName;\n\nexport {\n  AnimatedTooltip,\n  AnimatedTooltipTrigger,\n  AnimatedTooltipContent,\n  AnimatedTooltipProvider,\n};\n",
    "type": "registry:ui"
  }
],
      component: React.lazy(() => import("@/registry/default/ui/animated-tooltip.tsx")),
    },

    "combobox-input": {
      name: "combobox-input",
      description: "",
      type: "registry:ui",
      files: [
  {
    "path": "registry/default/ui/combobox-input.tsx",
    "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport { Check } from \"lucide-react\";\nimport { type PopperProps, usePopper } from \"react-popper\";\n\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandLoading,\n} from \"@/components/ui/command\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport { useControllableState } from \"@/registry/default/hooks/use-controllable-state\";\n\ninterface Option {\n  label: string;\n  value: string;\n  icon?: React.ComponentType<{ className?: string }>;\n  withCount?: boolean;\n}\n\nconst nonPrintableKeys = [\n  \"Tab\",\n  \"Control\",\n  \"Alt\",\n  \"Shift\",\n  \"Delete\",\n  \"Home\",\n  \"End\",\n  \"PageUp\",\n  \"PageDown\",\n  \"Insert\",\n  \"ArrowLeft\",\n  \"ArrowRight\",\n];\n\ninterface ComboboxInputProps\n  extends Omit<\n    React.ComponentPropsWithoutRef<typeof CommandInput>,\n    \"defaultValue\" | \"value\" | \"onValueChange\"\n  > {\n  options: Option[];\n  input?: string;\n  onInputChange?: (value: string) => void;\n  defaultValue?: Option;\n  value?: Option;\n  onValueChange?: (option: Option) => void;\n  emptyMessage?: string;\n  immediate?: boolean;\n  placement?: PopperProps<HTMLElement>[\"placement\"];\n  alignOffset?: number;\n  sideOffset?: number;\n  loading?: boolean;\n}\n\nexport function ComboboxInput({\n  options,\n  input,\n  onInputChange,\n  defaultValue,\n  value,\n  onValueChange,\n  placeholder,\n  emptyMessage = \"No results found\",\n  placement = \"bottom-start\",\n  alignOffset = 0,\n  sideOffset = 4,\n  immediate = false,\n  loading = false,\n  className,\n  ...props\n}: ComboboxInputProps) {\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const [open, setOpen] = React.useState(false);\n  const [controlledInput, setControlledInput] = useControllableState({\n    prop: input,\n    onChange: onInputChange,\n  });\n\n  const [currentOption, setCurrentOption] = useControllableState({\n    defaultProp: defaultValue,\n    prop: value,\n    onChange: onValueChange,\n  });\n\n  const [referenceElement, setReferenceElement] =\n    React.useState<HTMLDivElement | null>(null);\n  const [popperElement, setPopperElement] =\n    React.useState<HTMLDivElement | null>(null);\n  const { styles, attributes } = usePopper(referenceElement, popperElement, {\n    modifiers: [\n      { name: \"offset\", options: { offset: [alignOffset, sideOffset] } },\n    ],\n    placement,\n  });\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      const inputElement = inputRef.current;\n      if (!inputElement) return;\n\n      if (nonPrintableKeys.includes(event.key)) return;\n\n      if (event.key === \"Backspace\" && inputElement.value === \"\" && !open) {\n        if (open) setOpen(false);\n        return;\n      }\n\n      if (event.key === \"Escape\") {\n        if (currentOption && inputElement.value === currentOption.label) {\n          if (open) setOpen(false);\n          return;\n        }\n\n        if (inputElement.value === \"\") {\n          if (open) setOpen(false);\n          return;\n        }\n\n        setControlledInput(\"\");\n        setOpen(false);\n        setCurrentOption(undefined);\n        inputRef.current?.focus();\n      }\n\n      if (event.key === \"Enter\" && inputElement.value !== \"\") {\n        const selectedOption = options.find(\n          (option) => option.label === inputElement.value,\n        );\n        setCurrentOption(selectedOption);\n      }\n\n      if (!open) setOpen(true);\n    },\n    [currentOption, open, options, setControlledInput, setCurrentOption],\n  );\n\n  const onBlur = React.useCallback(() => {\n    setOpen(false);\n    setControlledInput(currentOption?.label ?? \"\");\n  }, [currentOption?.label, setControlledInput]);\n\n  const onSelect = React.useCallback(\n    (selectedOption: Option) => {\n      setControlledInput(selectedOption.label);\n      setCurrentOption(selectedOption);\n      setOpen(false);\n    },\n    [setControlledInput, setCurrentOption],\n  );\n\n  return (\n    <Command\n      ref={setReferenceElement}\n      className='relative overflow-visible [&_[cmdk-input-wrapper]]:rounded-md [&_[cmdk-input-wrapper]]:border'\n      onKeyDown={onKeyDown}\n      {...attributes.reference}\n    >\n      <CommandInput\n        ref={inputRef}\n        value={controlledInput}\n        onValueChange={(value) => {\n          if (loading) return;\n\n          setControlledInput(value);\n          if (value === \"\") {\n            setCurrentOption(undefined);\n          }\n        }}\n        onBlur={onBlur}\n        onFocus={() => {\n          if (immediate) {\n            setOpen(true);\n          }\n        }}\n        placeholder={placeholder}\n        className={cn(\"border-b-0\", className)}\n        {...props}\n      />\n      <CommandList\n        ref={setPopperElement}\n        data-state={open ? \"open\" : \"closed\"}\n        style={styles.popper}\n        className={cn(\n          \"z-50 w-full rounded-md border bg-popover text-popover-foreground shadow-md outline-none data-[state=open]:visible data-[state=closed]:invisible data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95\",\n          \"data-[popper-placement=bottom-end]:translate-x-1/2 data-[popper-placement=bottom-start]:-translate-x-1/2 data-[popper-placement=left-end]:translate-y-1/2 data-[popper-placement=left-start]:-translate-y-1/2 data-[popper-placement=right-end]:translate-y-1/2 data-[popper-placement=right-start]:-translate-y-1/2 data-[popper-placement=top-end]:translate-x-1/2 data-[popper-placement=top-start]:-translate-x-1/2 data-[popper-placement=bottom-end]:slide-in-from-top-2 data-[popper-placement=bottom-start]:slide-in-from-top-2 data-[popper-placement=bottom]:slide-in-from-top-2 data-[popper-placement=left-end]:slide-in-from-right-2 data-[popper-placement=left-start]:slide-in-from-right-2 data-[popper-placement=left]:slide-in-from-right-2 data-[popper-placement=right-end]:slide-in-from-left-2 data-[popper-placement=right-start]:slide-in-from-left-2 data-[popper-placement=right]:slide-in-from-left-2 data-[popper-placement=top-end]:slide-in-from-bottom-2 data-[popper-placement=top-start]:slide-in-from-bottom-2 data-[popper-placement=top]:slide-in-from-bottom-2\",\n        )}\n        {...attributes.popper}\n      >\n        {loading ? (\n          <CommandLoading className='p-1'>\n            <Skeleton className='h-8 w-full' />\n          </CommandLoading>\n        ) : null}\n        {options.length > 0 && !loading ? (\n          <CommandGroup>\n            {options.map((option) => {\n              const isSelected = currentOption?.value === option.value;\n\n              return (\n                <CommandItem\n                  key={option.value}\n                  value={option.label}\n                  onMouseDown={(event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                  }}\n                  onSelect={() => onSelect(option)}\n                  className={cn(\"flex w-full items-center gap-2\", {\n                    \"pl-8\": !isSelected,\n                  })}\n                >\n                  {isSelected ? (\n                    <Check className='w-4' aria-hidden='true' />\n                  ) : null}\n                  {option.label}\n                </CommandItem>\n              );\n            })}\n          </CommandGroup>\n        ) : null}\n        {loading ? null : <CommandEmpty>{emptyMessage}</CommandEmpty>}\n      </CommandList>\n    </Command>\n  );\n}\n",
    "type": "registry:ui"
  }
],
      component: React.lazy(() => import("@/registry/default/ui/combobox-input.tsx")),
    },

    "labeled-switch": {
      name: "labeled-switch",
      description: "",
      type: "registry:ui",
      files: [
  {
    "path": "registry/default/ui/labeled-switch.tsx",
    "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\";\nimport { motion } from \"framer-motion\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface LabeledSwitchProps {\n  firstLabel: React.ReactNode;\n  secondLabel: React.ReactNode;\n  selected: boolean;\n  onToggle: (checked: boolean) => void;\n  className?: string;\n}\n\nconst LabeledSwitch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  LabeledSwitchProps\n>(\n  (\n    { className, firstLabel, secondLabel, selected, onToggle, ...props },\n    ref,\n  ) => {\n    return (\n      <SwitchPrimitives.Root\n        className={cn(\n          \"relative flex w-fit cursor-pointer items-center rounded-full ring-2 ring-input transition-colors\",\n          className,\n        )}\n        ref={ref}\n        checked={selected}\n        onCheckedChange={onToggle}\n      >\n        <LabeledSwitchButton selected={selected}>\n          {firstLabel}\n        </LabeledSwitchButton>\n        <LabeledSwitchButton selected={!selected}>\n          {secondLabel}\n        </LabeledSwitchButton>\n        <SwitchPrimitives.Thumb\n          className={cn(\n            \"absolute inset-0 w-full z-0 flex data-[state=unchecked]:justify-start data-[state=checked]:justify-end\",\n          )}\n        >\n          <motion.span\n            layout\n            transition={{ type: \"spring\", damping: 15, stiffness: 250 }}\n            className='h-full w-1/2 rounded-full bg-muted'\n          />\n        </SwitchPrimitives.Thumb>\n      </SwitchPrimitives.Root>\n    );\n  },\n);\nLabeledSwitch.displayName = \"LabeledSwitch\";\n\nconst LabeledSwitchButton = ({\n  children,\n  selected,\n}: {\n  children: React.ReactNode;\n  selected: boolean;\n}) => (\n  <div\n    className={cn(\n      \"relative z-10 flex w-full items-center justify-center gap-2 px-3 py-3 text-xs font-bold transition-colors md:py-1.5 md:pl-3 md:pr-3.5\",\n      selected ? \"text-primary\" : \"text-muted-foreground\",\n    )}\n    onMouseDown={(e) => e.preventDefault()}\n  >\n    <span className='relative z-10'>{children}</span>\n  </div>\n);\n\nexport { LabeledSwitch };\n",
    "type": "registry:ui"
  }
],
      component: React.lazy(() => import("@/registry/default/ui/labeled-switch.tsx")),
    },

    "range-slider": {
      name: "range-slider",
      description: "",
      type: "registry:ui",
      files: [
  {
    "path": "registry/default/ui/range-slider.tsx",
    "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport * as SliderPrimitive from \"@radix-ui/react-slider\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface RangeSliderProps\n  extends React.ComponentProps<typeof SliderPrimitive.Root> {\n  labelPosition?: \"top\" | \"bottom\";\n  label?: (value: number | undefined) => React.ReactNode;\n  orientation?: \"horizontal\" | \"vertical\";\n}\n\nconst RangeSlider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  RangeSliderProps\n>(\n  (\n    {\n      className,\n      label,\n      labelPosition = \"top\",\n      orientation = \"horizontal\",\n      ...props\n    },\n    ref,\n  ) => {\n    const initialValue = Array.isArray(props.value)\n      ? props.value\n      : [props.min, props.max];\n\n    return (\n      <SliderPrimitive.Root\n        ref={ref}\n        orientation={orientation}\n        className={cn(\n          orientation === \"horizontal\"\n            ? \"relative flex w-full touch-none select-none items-center\"\n            : \"relative flex h-full min-h-[200px] touch-none select-none flex-col items-center\",\n          className,\n        )}\n        {...props}\n      >\n        <SliderPrimitive.Track\n          className={cn(\n            orientation === \"horizontal\"\n              ? \"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\"\n              : \"relative w-2 h-full grow overflow-hidden rounded-full bg-secondary\",\n          )}\n        >\n          <SliderPrimitive.Range\n            className={cn(\n              orientation === \"horizontal\"\n                ? \"absolute h-full bg-primary\"\n                : \"absolute w-full bg-primary\",\n            )}\n          />\n        </SliderPrimitive.Track>\n        {initialValue.map((value, index) => (\n          <React.Fragment key={index}>\n            <SliderPrimitive.Thumb\n              className={cn(\n                \"relative block border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n                orientation === \"horizontal\"\n                  ? \"h-5 w-2 rounded-sm\"\n                  : \"h-2 w-5 rounded-sm\",\n              )}\n            >\n              {label && (\n                <span\n                  className={cn(\n                    \"absolute flex text-xs justify-center font-medium\",\n                    orientation === \"horizontal\"\n                      ? labelPosition === \"top\"\n                        ? \"-left-2 -top-5\"\n                        : \"-left-2 top-5\"\n                      : labelPosition === \"top\"\n                        ? \"-translate-x-full -translate-y-1/2 -left-2\"\n                        : \"translate-x-full -translate-y-1/2\",\n                  )}\n                >\n                  {label(value)}\n                </span>\n              )}\n            </SliderPrimitive.Thumb>\n          </React.Fragment>\n        ))}\n      </SliderPrimitive.Root>\n    );\n  },\n);\nRangeSlider.displayName = \"RangeSlider\";\n\nexport { RangeSlider };\n",
    "type": "registry:ui"
  }
],
      component: React.lazy(() => import("@/registry/default/ui/range-slider.tsx")),
    },

    "responsive-textarea": {
      name: "responsive-textarea",
      description: "",
      type: "registry:ui",
      files: [
  {
    "path": "registry/default/ui/responsive-textarea.tsx",
    "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst ResponsiveTextarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  const textAreaRef = React.useRef<HTMLTextAreaElement>(null);\n  const [val, setVal] = React.useState<string>(\"\");\n\n  React.useEffect(() => {\n    if (textAreaRef.current) {\n      textAreaRef.current.style.height = \"auto\";\n      textAreaRef.current.style.height =\n        textAreaRef.current.scrollHeight + \"px\";\n    }\n  }, [val]);\n\n  return (\n    <textarea\n      className={cn(\n        \"placeholder:text-muted-foreground flex min-h-[80px] w-full resize-none overflow-hidden rounded-md border border-input bg-background px-3 py-2 text-sm text-foreground ring-offset-primary focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className,\n      )}\n      ref={textAreaRef}\n      onChange={(e) => setVal(e.target.value)}\n      {...props}\n    />\n  );\n});\nResponsiveTextarea.displayName = \"ResponsiveTextarea\";\n\nexport { ResponsiveTextarea };\n",
    "type": "registry:ui"
  }
],
      component: React.lazy(() => import("@/registry/default/ui/responsive-textarea.tsx")),
    },

    "tel-input": {
      name: "tel-input",
      description: "",
      type: "registry:ui",
      files: [
  {
    "path": "registry/default/ui/tel-input.tsx",
    "content": "import * as React from \"react\";\n\nimport * as PhoneNumberInput from \"react-phone-number-input\";\nimport { CheckIcon, ChevronsUpDown } from \"lucide-react\";\nimport flags from \"react-phone-number-input/flags\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\nimport { cn } from \"@/lib/utils\";\n\ntype CountryEntry = {\n  label: string;\n  value: PhoneNumberInput.Country | undefined;\n};\n\ntype CountrySelectProps = {\n  disabled?: boolean;\n  value: PhoneNumberInput.Country;\n  options: CountryEntry[];\n  onChange: (country: PhoneNumberInput.Country) => void;\n};\n\ninterface CountrySelectOptionProps extends PhoneNumberInput.FlagProps {\n  selectedCountry: PhoneNumberInput.Country;\n  onChange: (country: PhoneNumberInput.Country) => void;\n}\n\ntype TelInputProps = Omit<\n  React.ComponentProps<\"input\">,\n  \"onChange\" | \"value\" | \"ref\"\n> &\n  Omit<PhoneNumberInput.Props<typeof PhoneNumberInput.default>, \"onChange\"> & {\n    onChange?: (value: PhoneNumberInput.Value) => void;\n  };\n\nconst FlagComponent = ({\n  country,\n  countryName,\n}: PhoneNumberInput.FlagProps) => {\n  const Flag = flags[country];\n\n  return (\n    <span className='flex h-4 w-6 overflow-hidden rounded-sm bg-foreground/20 [&_svg]:size-full'>\n      {Flag && <Flag title={countryName} />}\n    </span>\n  );\n};\n\nconst CountrySelectOption = ({\n  country,\n  countryName,\n  selectedCountry,\n  onChange,\n}: CountrySelectOptionProps) => {\n  return (\n    <CommandItem\n      className='gap-2 cursor-pointer'\n      onSelect={() => onChange(country)}\n    >\n      <FlagComponent country={country} countryName={countryName} />\n      <span className='flex-1 text-sm'>{countryName}</span>\n      <span className='text-sm text-foreground/50'>{`+${PhoneNumberInput.getCountryCallingCode(country)}`}</span>\n      <CheckIcon\n        className={`ml-auto size-4 ${country === selectedCountry ? \"opacity-100\" : \"opacity-0\"}`}\n      />\n    </CommandItem>\n  );\n};\n\nconst InputComponent = React.forwardRef<\n  HTMLInputElement,\n  React.ComponentProps<\"input\">\n>(({ className, ...props }, ref) => (\n  <Input\n    className={cn(\"rounded-e-lg rounded-s-none\", className)}\n    {...props}\n    ref={ref}\n  />\n));\nInputComponent.displayName = \"InputComponent\";\n\nconst CountrySelect = ({\n  disabled,\n  value: selectedCountry,\n  options: countryList,\n  onChange,\n}: CountrySelectProps) => {\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          type='button'\n          variant='outline'\n          className='flex gap-1 rounded-e-none rounded-s-lg border-r-0 px-3 focus:z-10'\n          disabled={disabled}\n        >\n          <FlagComponent\n            country={selectedCountry}\n            countryName={selectedCountry}\n          />\n          <ChevronsUpDown\n            className={cn(\n              \"-mr-2 size-4 opacity-50\",\n              disabled ? \"hidden\" : \"opacity-100\",\n            )}\n          />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className='w-[300px] p-0'>\n        <Command>\n          <CommandInput placeholder='Search country...' />\n          <CommandList>\n            <ScrollArea className='h-72'>\n              <CommandEmpty>No country found.</CommandEmpty>\n              <CommandGroup>\n                {countryList.map(({ value, label }) =>\n                  value ? (\n                    <CountrySelectOption\n                      key={value}\n                      country={value}\n                      countryName={label}\n                      selectedCountry={selectedCountry}\n                      onChange={onChange}\n                    />\n                  ) : null,\n                )}\n              </CommandGroup>\n            </ScrollArea>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nconst TelInput: React.ForwardRefExoticComponent<TelInputProps> =\n  React.forwardRef<\n    React.ElementRef<typeof PhoneNumberInput.default>,\n    TelInputProps\n  >(({ className, onChange, ...props }, ref) => {\n    return (\n      <PhoneNumberInput.default\n        ref={ref}\n        className={cn(\"flex\", className)}\n        flagComponent={FlagComponent}\n        countrySelectComponent={CountrySelect}\n        inputComponent={InputComponent}\n        smartCaret={false}\n        onChange={(value) =>\n          onChange?.(value || (\"\" as PhoneNumberInput.Value))\n        }\n        {...props}\n      />\n    );\n  });\nTelInput.displayName = \"TelInput\";\n\nexport { TelInput };\n",
    "type": "registry:ui"
  }
],
      component: React.lazy(() => import("@/registry/default/ui/tel-input.tsx")),
    },

    "animated-label-input-default": {
      name: "animated-label-input-default",
      description: "",
      type: "registry:example",
      files: [
  {
    "path": "registry/default/example/animated-label-input-default.tsx",
    "type": "registry:example"
  }
],
      component: React.lazy(() => import("@/registry/default/example/animated-label-input-default.tsx")),
    },

    "animated-label-input-with-form": {
      name: "animated-label-input-with-form",
      description: "",
      type: "registry:example",
      files: [
  {
    "path": "registry/default/example/animated-label-input-with-form.tsx",
    "type": "registry:example"
  }
],
      component: React.lazy(() => import("@/registry/default/example/animated-label-input-with-form.tsx")),
    },

    "animated-tooltip-default": {
      name: "animated-tooltip-default",
      description: "",
      type: "registry:example",
      files: [
  {
    "path": "registry/default/example/animated-tooltip-default.tsx",
    "type": "registry:example"
  }
],
      component: React.lazy(() => import("@/registry/default/example/animated-tooltip-default.tsx")),
    },

    "combobox-input-default": {
      name: "combobox-input-default",
      description: "",
      type: "registry:example",
      files: [
  {
    "path": "registry/default/example/combobox-input-default.tsx",
    "type": "registry:example"
  }
],
      component: React.lazy(() => import("@/registry/default/example/combobox-input-default.tsx")),
    },

    "labeled-switch-default": {
      name: "labeled-switch-default",
      description: "",
      type: "registry:example",
      files: [
  {
    "path": "registry/default/example/labeled-switch-default.tsx",
    "type": "registry:example"
  }
],
      component: React.lazy(() => import("@/registry/default/example/labeled-switch-default.tsx")),
    },

    "labeled-switch-with-form": {
      name: "labeled-switch-with-form",
      description: "",
      type: "registry:example",
      files: [
  {
    "path": "registry/default/example/labeled-switch-with-form.tsx",
    "type": "registry:example"
  }
],
      component: React.lazy(() => import("@/registry/default/example/labeled-switch-with-form.tsx")),
    },

    "range-slider-default": {
      name: "range-slider-default",
      description: "",
      type: "registry:example",
      files: [
  {
    "path": "registry/default/example/range-slider-default.tsx",
    "type": "registry:example"
  }
],
      component: React.lazy(() => import("@/registry/default/example/range-slider-default.tsx")),
    },

    "range-slider-vertical": {
      name: "range-slider-vertical",
      description: "",
      type: "registry:example",
      files: [
  {
    "path": "registry/default/example/range-slider-vertical.tsx",
    "type": "registry:example"
  }
],
      component: React.lazy(() => import("@/registry/default/example/range-slider-vertical.tsx")),
    },

    "range-slider-with-label": {
      name: "range-slider-with-label",
      description: "",
      type: "registry:example",
      files: [
  {
    "path": "registry/default/example/range-slider-with-label.tsx",
    "type": "registry:example"
  }
],
      component: React.lazy(() => import("@/registry/default/example/range-slider-with-label.tsx")),
    },

    "responsive-textarea-default": {
      name: "responsive-textarea-default",
      description: "",
      type: "registry:example",
      files: [
  {
    "path": "registry/default/example/responsive-textarea-default.tsx",
    "type": "registry:example"
  }
],
      component: React.lazy(() => import("@/registry/default/example/responsive-textarea-default.tsx")),
    },

    "responsive-textarea-with-form": {
      name: "responsive-textarea-with-form",
      description: "",
      type: "registry:example",
      files: [
  {
    "path": "registry/default/example/responsive-textarea-with-form.tsx",
    "type": "registry:example"
  }
],
      component: React.lazy(() => import("@/registry/default/example/responsive-textarea-with-form.tsx")),
    },

    "responsive-textarea-with-label": {
      name: "responsive-textarea-with-label",
      description: "",
      type: "registry:example",
      files: [
  {
    "path": "registry/default/example/responsive-textarea-with-label.tsx",
    "type": "registry:example"
  }
],
      component: React.lazy(() => import("@/registry/default/example/responsive-textarea-with-label.tsx")),
    },

    "responsive-textarea-with-text": {
      name: "responsive-textarea-with-text",
      description: "",
      type: "registry:example",
      files: [
  {
    "path": "registry/default/example/responsive-textarea-with-text.tsx",
    "type": "registry:example"
  }
],
      component: React.lazy(() => import("@/registry/default/example/responsive-textarea-with-text.tsx")),
    },

    "tel-input-custom-labels": {
      name: "tel-input-custom-labels",
      description: "",
      type: "registry:example",
      files: [
  {
    "path": "registry/default/example/tel-input-custom-labels.tsx",
    "type": "registry:example"
  }
],
      component: React.lazy(() => import("@/registry/default/example/tel-input-custom-labels.tsx")),
    },

    "tel-input-default-country": {
      name: "tel-input-default-country",
      description: "",
      type: "registry:example",
      files: [
  {
    "path": "registry/default/example/tel-input-default-country.tsx",
    "type": "registry:example"
  }
],
      component: React.lazy(() => import("@/registry/default/example/tel-input-default-country.tsx")),
    },

    "tel-input-default": {
      name: "tel-input-default",
      description: "",
      type: "registry:example",
      files: [
  {
    "path": "registry/default/example/tel-input-default.tsx",
    "type": "registry:example"
  }
],
      component: React.lazy(() => import("@/registry/default/example/tel-input-default.tsx")),
    },

    "tel-input-international": {
      name: "tel-input-international",
      description: "",
      type: "registry:example",
      files: [
  {
    "path": "registry/default/example/tel-input-international.tsx",
    "type": "registry:example"
  }
],
      component: React.lazy(() => import("@/registry/default/example/tel-input-international.tsx")),
    },

    "tel-input-with-form": {
      name: "tel-input-with-form",
      description: "",
      type: "registry:example",
      files: [
  {
    "path": "registry/default/example/tel-input-with-form.tsx",
    "type": "registry:example"
  }
],
      component: React.lazy(() => import("@/registry/default/example/tel-input-with-form.tsx")),
    },

    "use-boolean-default": {
      name: "use-boolean-default",
      description: "",
      type: "registry:example",
      files: [
  {
    "path": "registry/default/example/use-boolean-default.tsx",
    "type": "registry:example"
  }
],
      component: React.lazy(() => import("@/registry/default/example/use-boolean-default.tsx")),
    },

    "use-click-outside-default": {
      name: "use-click-outside-default",
      description: "",
      type: "registry:example",
      files: [
  {
    "path": "registry/default/example/use-click-outside-default.tsx",
    "type": "registry:example"
  }
],
      component: React.lazy(() => import("@/registry/default/example/use-click-outside-default.tsx")),
    },

    "use-debounce-default": {
      name: "use-debounce-default",
      description: "",
      type: "registry:example",
      files: [
  {
    "path": "registry/default/example/use-debounce-default.tsx",
    "type": "registry:example"
  }
],
      component: React.lazy(() => import("@/registry/default/example/use-debounce-default.tsx")),
    },

    "use-element-size-default": {
      name: "use-element-size-default",
      description: "",
      type: "registry:example",
      files: [
  {
    "path": "registry/default/example/use-element-size-default.tsx",
    "type": "registry:example"
  }
],
      component: React.lazy(() => import("@/registry/default/example/use-element-size-default.tsx")),
    },

    "use-fullscreen-default": {
      name: "use-fullscreen-default",
      description: "",
      type: "registry:example",
      files: [
  {
    "path": "registry/default/example/use-fullscreen-default.tsx",
    "type": "registry:example"
  }
],
      component: React.lazy(() => import("@/registry/default/example/use-fullscreen-default.tsx")),
    },

    "use-fullscreen-with-target": {
      name: "use-fullscreen-with-target",
      description: "",
      type: "registry:example",
      files: [
  {
    "path": "registry/default/example/use-fullscreen-with-target.tsx",
    "type": "registry:example"
  }
],
      component: React.lazy(() => import("@/registry/default/example/use-fullscreen-with-target.tsx")),
    },

    "use-mobile-default": {
      name: "use-mobile-default",
      description: "",
      type: "registry:example",
      files: [
  {
    "path": "registry/default/example/use-mobile-default.tsx",
    "type": "registry:example"
  }
],
      component: React.lazy(() => import("@/registry/default/example/use-mobile-default.tsx")),
    },

    "avatar-default": {
      name: "avatar-default",
      description: "",
      type: "registry:snippet",
      files: [
  {
    "path": "registry/default/snippets/avatar-default.tsx",
    "content": "import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\nexport default function AvatarDefault() {\n  return (\n    <Avatar>\n      <AvatarImage\n        src='https://github.com/phamhuulocforwork.png'\n        alt='@phamhuulocforwork'\n      />\n      <AvatarFallback>HL</AvatarFallback>\n    </Avatar>\n  );\n}\n",
    "type": "registry:snippet"
  }
],
      component: React.lazy(() => import("@/registry/default/snippets/avatar-default.tsx")),
    },

    "avatar-group-max": {
      name: "avatar-group-max",
      description: "",
      type: "registry:snippet",
      files: [
  {
    "path": "registry/default/snippets/avatar-group-max.tsx",
    "content": "import * as React from \"react\";\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\nimport { cn } from \"@/lib/utils\";\n\ntype AvatarProps = React.ComponentProps<typeof Avatar>;\n\ninterface AvatarGroupProps extends React.ComponentProps<\"div\"> {\n  children: React.ReactElement<AvatarProps>[];\n  max?: number;\n}\n\nconst AvatarGroup = ({\n  children,\n  max,\n  className,\n  ...props\n}: AvatarGroupProps) => {\n  const totalAvatars = React.Children.count(children);\n  const displayedAvatars = React.Children.toArray(children)\n    .slice(0, max)\n    .reverse();\n  const remainingAvatars = max ? Math.max(totalAvatars - max, 1) : 0;\n\n  return (\n    <div\n      className={cn(\"flex items-center flex-row-reverse\", className)}\n      {...props}\n    >\n      {remainingAvatars > 0 && (\n        <Avatar className='-ml-2 hover:z-10 relative ring-2 ring-background'>\n          <AvatarFallback className='bg-muted-foreground text-white'>\n            +{remainingAvatars}\n          </AvatarFallback>\n        </Avatar>\n      )}\n      {displayedAvatars.map((avatar, index) => {\n        if (!React.isValidElement(avatar)) return null;\n\n        return (\n          <div key={index} className='-ml-2 hover:z-10 relative'>\n            {React.cloneElement(avatar as React.ReactElement<AvatarProps>, {\n              className: \"ring-2 ring-background\",\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default function AvatarGroupMaxAvatarDemo() {\n  return (\n    <AvatarGroup className='flex items-center' max={3}>\n      <Avatar className='-ml-2 first:ml-0 cursor-pointer'>\n        <AvatarImage\n          src='https://github.com/phamhuulocforwork.png'\n          alt='@phamhuulocforwork'\n        />\n        <AvatarFallback className='bg-indigo-500 text-white'>HL</AvatarFallback>\n      </Avatar>\n      <Avatar className='-ml-2 first:ml-0 cursor-pointer'>\n        <AvatarFallback className='bg-green-600 text-white'>VN</AvatarFallback>\n      </Avatar>\n      <Avatar className='-ml-2 first:ml-0 cursor-pointer'>\n        <AvatarFallback className='bg-red-500 text-white'>AB</AvatarFallback>\n      </Avatar>\n      <Avatar className='-ml-2 first:ml-0 cursor-pointer'>\n        <AvatarFallback className='bg-indigo-500 text-white'>VK</AvatarFallback>\n      </Avatar>\n      <Avatar className='-ml-2 first:ml-0 cursor-pointer'>\n        <AvatarFallback className='bg-orange-500 text-white'>RS</AvatarFallback>\n      </Avatar>\n    </AvatarGroup>\n  );\n}\n",
    "type": "registry:snippet"
  }
],
      component: React.lazy(() => import("@/registry/default/snippets/avatar-group-max.tsx")),
    },

    "avatar-group": {
      name: "avatar-group",
      description: "",
      type: "registry:snippet",
      files: [
  {
    "path": "registry/default/snippets/avatar-group.tsx",
    "content": "import * as React from \"react\";\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\nimport { cn } from \"@/lib/utils\";\n\ntype AvatarProps = React.ComponentProps<typeof Avatar>;\n\ninterface AvatarGroupProps extends React.ComponentProps<\"div\"> {\n  children: React.ReactElement<AvatarProps>[];\n  max?: number;\n}\n\nconst AvatarGroup = ({\n  children,\n  max,\n  className,\n  ...props\n}: AvatarGroupProps) => {\n  const totalAvatars = React.Children.count(children);\n  const displayedAvatars = React.Children.toArray(children)\n    .slice(0, max)\n    .reverse();\n  const remainingAvatars = max ? Math.max(totalAvatars - max, 1) : 0;\n\n  return (\n    <div\n      className={cn(\"flex items-center flex-row-reverse\", className)}\n      {...props}\n    >\n      {remainingAvatars > 0 && (\n        <Avatar className='-ml-2 hover:z-10 relative ring-2 ring-background'>\n          <AvatarFallback className='bg-muted-foreground text-white'>\n            +{remainingAvatars}\n          </AvatarFallback>\n        </Avatar>\n      )}\n      {displayedAvatars.map((avatar, index) => {\n        if (!React.isValidElement(avatar)) return null;\n\n        return (\n          <div key={index} className='-ml-2 hover:z-10 relative'>\n            {React.cloneElement(avatar as React.ReactElement<AvatarProps>, {\n              className: \"ring-2 ring-background\",\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default function AvatarGroupDemo() {\n  return (\n    <AvatarGroup>\n      <Avatar className='-ml-2 first:ml-0 cursor-pointer'>\n        <AvatarImage\n          src='https://github.com/phamhuulocforwork.png'\n          alt='@phamhuulocforwork'\n        />\n        <AvatarFallback className='bg-indigo-500 text-white'>HL</AvatarFallback>\n      </Avatar>\n      <Avatar className='-ml-2 first:ml-0 cursor-pointer'>\n        <AvatarFallback className='bg-green-600 text-white'>VN</AvatarFallback>\n      </Avatar>\n      <Avatar className='-ml-2 first:ml-0 cursor-pointer'>\n        <AvatarFallback className='bg-red-500 text-white'>AB</AvatarFallback>\n      </Avatar>\n    </AvatarGroup>\n  );\n}\n",
    "type": "registry:snippet"
  }
],
      component: React.lazy(() => import("@/registry/default/snippets/avatar-group.tsx")),
    },

    "avatar-hover-card": {
      name: "avatar-hover-card",
      description: "",
      type: "registry:snippet",
      files: [
  {
    "path": "registry/default/snippets/avatar-hover-card.tsx",
    "content": "import { CalendarIcon } from \"lucide-react\";\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  HoverCard,\n  HoverCardContent,\n  HoverCardTrigger,\n} from \"@/components/ui/hover-card\";\n\nexport default function AvatarHoverCard() {\n  return (\n    <HoverCard>\n      <HoverCardTrigger className='cursor-pointer'>\n        <Avatar>\n          <AvatarImage\n            src='https://github.com/phamhuulocforwork.png'\n            alt='@phamhuulocforwork'\n          />\n          <AvatarFallback>HL</AvatarFallback>\n        </Avatar>\n      </HoverCardTrigger>\n      <HoverCardContent className='w-full max-w-xs'>\n        <div className='flex justify-between space-x-4'>\n          <Avatar>\n            <AvatarImage\n              src='https://github.com/phamhuulocforwork.png'\n              alt='@phamhuulocforwork'\n            />\n            <AvatarFallback>HL</AvatarFallback>\n          </Avatar>\n          <div className='space-y-1'>\n            <h4 className='text-sm font-semibold'>@phamhuulocforwork</h4>\n            <p className='text-sm'>\n              I'm currently studying at University (I stay up late and my hair\n              is getting thinner and thinner. Do you think I'm bald? xD)\n            </p>\n            <div className='flex items-center pt-2'>\n              <CalendarIcon className='mr-2 h-4 w-4 opacity-70' />{\" \"}\n              <span className='text-xs text-muted-foreground'>\n                Joined February 2025\n              </span>\n            </div>\n          </div>\n        </div>\n      </HoverCardContent>\n    </HoverCard>\n  );\n}\n",
    "type": "registry:snippet"
  }
],
      component: React.lazy(() => import("@/registry/default/snippets/avatar-hover-card.tsx")),
    },

    "avatar-with-ring": {
      name: "avatar-with-ring",
      description: "",
      type: "registry:snippet",
      files: [
  {
    "path": "registry/default/snippets/avatar-with-ring.tsx",
    "content": "import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\nexport default function AvatarWithRing() {\n  return (\n    <Avatar className='ring-2 ring-green-500 ring-offset-[3px] ring-offset-background'>\n      <AvatarImage\n        src='https://github.com/phamhuulocforwork.png'\n        alt='@phamhuulocforwork'\n      />\n      <AvatarFallback>HL</AvatarFallback>\n    </Avatar>\n  );\n}\n",
    "type": "registry:snippet"
  }
],
      component: React.lazy(() => import("@/registry/default/snippets/avatar-with-ring.tsx")),
    },

    "avatar-with-status": {
      name: "avatar-with-status",
      description: "",
      type: "registry:snippet",
      files: [
  {
    "path": "registry/default/snippets/avatar-with-status.tsx",
    "content": "import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\nexport default function AvatarWithStatus() {\n  return (\n    <div className='flex items-center gap-3'>\n      {/* Online */}\n      <div className='relative'>\n        <Avatar>\n          <AvatarImage\n            src='https://github.com/phamhuulocforwork.png'\n            alt='@phamhuulocforwork'\n          />\n          <AvatarFallback>CN</AvatarFallback>\n        </Avatar>\n        <div className='h-2.5 w-2.5 ring-[2px] ring-background rounded-full bg-green-500 absolute bottom-0 right-0'></div>\n      </div>\n\n      {/* DND */}\n      <div className='relative'>\n        <Avatar>\n          <AvatarImage\n            src='https://github.com/phamhuulocforwork.png'\n            alt='@phamhuulocforwork'\n          />\n          <AvatarFallback>CN</AvatarFallback>\n        </Avatar>\n        <div className='h-2.5 w-2.5 ring-[2px] ring-background rounded-full bg-red-500 absolute bottom-0 right-0'></div>\n      </div>\n\n      {/* Busy */}\n      <div className='relative'>\n        <Avatar>\n          <AvatarImage\n            src='https://github.com/phamhuulocforwork.png'\n            alt='@phamhuulocforwork'\n          />\n          <AvatarFallback>CN</AvatarFallback>\n        </Avatar>\n        <div className='h-2.5 w-2.5 ring-[2px] ring-background rounded-full bg-yellow-500 absolute bottom-0 right-0'></div>\n      </div>\n\n      {/* Offline */}\n      <div className='relative'>\n        <Avatar>\n          <AvatarImage\n            src='https://github.com/phamhuulocforwork.png'\n            alt='@phamhuulocforwork'\n          />\n          <AvatarFallback>CN</AvatarFallback>\n        </Avatar>\n        <div className='h-2.5 w-2.5 ring-[2px] ring-background border-2 border-muted-foreground rounded-full bg-background absolute bottom-0 right-0'></div>\n      </div>\n    </div>\n  );\n}\n",
    "type": "registry:snippet"
  }
],
      component: React.lazy(() => import("@/registry/default/snippets/avatar-with-status.tsx")),
    },

    "tooltip-with-arrow": {
      name: "tooltip-with-arrow",
      description: "",
      type: "registry:snippet",
      files: [
  {
    "path": "registry/default/snippets/tooltip-with-arrow.tsx",
    "content": "import { TooltipArrow } from \"@radix-ui/react-tooltip\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nexport default function WithArrowTooltip() {\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <Button variant='outline'>Hover</Button>\n        </TooltipTrigger>\n        <TooltipContent>\n          <p>Tooltip with arrow</p>\n          <TooltipArrow className='fill-foreground' />\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}\n",
    "type": "registry:snippet"
  }
],
      component: React.lazy(() => import("@/registry/default/snippets/tooltip-with-arrow.tsx")),
    },

    "use-boolean": {
      name: "use-boolean",
      description: "",
      type: "registry:hook",
      files: [
  {
    "path": "registry/default/hooks/use-boolean.ts",
    "content": "import * as React from \"react\";\n\ntype UseBooleanReturn = {\n  value: boolean;\n  setValue: React.Dispatch<React.SetStateAction<boolean>>;\n  setTrue: () => void;\n  setFalse: () => void;\n  toggle: () => void;\n};\n\nexport function useBoolean(defaultValue = false): UseBooleanReturn {\n  if (typeof defaultValue !== \"boolean\") {\n    throw new Error(\"defaultValue must be `true` or `false`\");\n  }\n  const [value, setValue] = React.useState(defaultValue);\n\n  const toggle = React.useCallback(() => {\n    setValue((x) => !x);\n  }, []);\n\n  const setTrue = React.useCallback(() => {\n    setValue(true);\n  }, []);\n\n  const setFalse = React.useCallback(() => {\n    setValue(false);\n  }, []);\n\n  return { value, setValue, setTrue, setFalse, toggle };\n}\n",
    "type": "registry:hook"
  }
],
      component: React.lazy(() => import("@/registry/default/hooks/use-boolean.ts")),
    },

    "use-callback-ref": {
      name: "use-callback-ref",
      description: "",
      type: "registry:hook",
      files: [
  {
    "path": "registry/default/hooks/use-callback-ref.ts",
    "content": "import * as React from \"react\";\n\nfunction useCallbackRef<T extends (...args: never[]) => unknown>(\n  callback: T | undefined,\n): T {\n  const callbackRef = React.useRef(callback);\n\n  React.useEffect(() => {\n    callbackRef.current = callback;\n  });\n\n  return React.useMemo(\n    () => ((...args) => callbackRef.current?.(...args)) as T,\n    [],\n  );\n}\n\nexport { useCallbackRef };\n",
    "type": "registry:hook"
  }
],
      component: React.lazy(() => import("@/registry/default/hooks/use-callback-ref.ts")),
    },

    "use-click-outside": {
      name: "use-click-outside",
      description: "",
      type: "registry:hook",
      files: [
  {
    "path": "registry/default/hooks/use-click-outside.ts",
    "content": "import * as React from \"react\";\n\nconst DEFAULT_EVENTS = [\"mousedown\", \"touchstart\"];\n\nexport function useClickOutside<T extends HTMLElement = any>(\n  handler: () => void,\n  events?: string[] | null,\n  nodes?: (HTMLElement | null)[],\n) {\n  const ref = React.useRef<T>(null);\n\n  React.useEffect(() => {\n    const listener = (event: any) => {\n      const { target } = event ?? {};\n      if (Array.isArray(nodes)) {\n        const shouldIgnore =\n          target?.hasAttribute(\"data-ignore-outside-clicks\") ||\n          (!document.body.contains(target) && target.tagName !== \"HTML\");\n        const shouldTrigger = nodes.every(\n          (node) => !!node && !event.composedPath().includes(node),\n        );\n        shouldTrigger && !shouldIgnore && handler();\n      } else if (ref.current && !ref.current.contains(target)) {\n        handler();\n      }\n    };\n\n    (events || DEFAULT_EVENTS).forEach((fn) =>\n      document.addEventListener(fn, listener),\n    );\n\n    return () => {\n      (events || DEFAULT_EVENTS).forEach((fn) =>\n        document.removeEventListener(fn, listener),\n      );\n    };\n  }, [ref, handler, nodes]);\n\n  return ref;\n}\n",
    "type": "registry:hook"
  }
],
      component: React.lazy(() => import("@/registry/default/hooks/use-click-outside.ts")),
    },

    "use-controllable-state": {
      name: "use-controllable-state",
      description: "",
      type: "registry:hook",
      files: [
  {
    "path": "registry/default/hooks/use-controllable-state.ts",
    "content": "import * as React from \"react\";\n\nimport { useCallbackRef } from \"@/registry/default/hooks/use-callback-ref\";\n\ntype UseControllableStateParams<T> = {\n  prop?: T | undefined;\n  defaultProp?: T | undefined;\n  onChange?: (state: T) => void;\n};\n\ntype SetStateFn<T> = (prevState?: T) => T;\n\nfunction useControllableState<T>({\n  prop,\n  defaultProp,\n  onChange = () => {},\n}: UseControllableStateParams<T>) {\n  const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({\n    defaultProp,\n    onChange,\n  });\n  const isControlled = prop !== undefined;\n  const value = isControlled ? prop : uncontrolledProp;\n  const handleChange = useCallbackRef(onChange);\n\n  const setValue: React.Dispatch<React.SetStateAction<T | undefined>> =\n    React.useCallback(\n      (nextValue) => {\n        if (isControlled) {\n          const setter = nextValue as SetStateFn<T>;\n          const value =\n            typeof nextValue === \"function\" ? setter(prop) : nextValue;\n          if (value !== prop) handleChange(value as T);\n        } else {\n          setUncontrolledProp(nextValue);\n        }\n      },\n      [isControlled, prop, setUncontrolledProp, handleChange],\n    );\n\n  return [value, setValue] as const;\n}\n\nfunction useUncontrolledState<T>({\n  defaultProp,\n  onChange,\n}: Omit<UseControllableStateParams<T>, \"prop\">) {\n  const uncontrolledState = React.useState<T | undefined>(defaultProp);\n  const [value] = uncontrolledState;\n  const prevValueRef = React.useRef(value);\n  const handleChange = useCallbackRef(onChange);\n\n  React.useEffect(() => {\n    if (prevValueRef.current !== value) {\n      handleChange(value as T);\n      prevValueRef.current = value;\n    }\n  }, [value, prevValueRef, handleChange]);\n\n  return uncontrolledState;\n}\n\nexport { useControllableState };\n",
    "type": "registry:hook"
  }
],
      component: React.lazy(() => import("@/registry/default/hooks/use-controllable-state.ts")),
    },

    "use-debounce": {
      name: "use-debounce",
      description: "",
      type: "registry:hook",
      files: [
  {
    "path": "registry/default/hooks/use-debounce.ts",
    "content": "import * as React from \"react\";\n\nexport function useDebounce<T>(value: T, delay?: number): T {\n  const [debouncedValue, setDebouncedValue] = React.useState<T>(value);\n\n  React.useEffect(() => {\n    const timer = setTimeout(() => setDebouncedValue(value), delay || 500);\n    return () => clearTimeout(timer);\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n",
    "type": "registry:hook"
  }
],
      component: React.lazy(() => import("@/registry/default/hooks/use-debounce.ts")),
    },

    "use-element-size": {
      name: "use-element-size",
      description: "",
      type: "registry:hook",
      files: [
  {
    "path": "registry/default/hooks/use-element-size.ts",
    "content": "import * as React from \"react\";\n\ntype ObserverRect = Omit<DOMRectReadOnly, \"toJSON\">;\n\nconst defaultState: ObserverRect = {\n  x: 0,\n  y: 0,\n  width: 0,\n  height: 0,\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0,\n};\n\nexport function useResizeObserver<T extends HTMLElement = any>(\n  options?: ResizeObserverOptions,\n) {\n  const frameID = React.useRef(0);\n  const ref = React.useRef<T>(null);\n\n  const [rect, setRect] = React.useState<ObserverRect>(defaultState);\n\n  const observer = React.useMemo(\n    () =>\n      typeof window !== \"undefined\"\n        ? new ResizeObserver((entries: any) => {\n            const entry = entries[0];\n\n            if (entry) {\n              cancelAnimationFrame(frameID.current);\n\n              frameID.current = requestAnimationFrame(() => {\n                if (ref.current) {\n                  setRect(entry.contentRect);\n                }\n              });\n            }\n          })\n        : null,\n    [],\n  );\n\n  React.useEffect(() => {\n    if (ref.current) {\n      observer?.observe(ref.current, options);\n    }\n\n    return () => {\n      observer?.disconnect();\n\n      if (frameID.current) {\n        cancelAnimationFrame(frameID.current);\n      }\n    };\n  }, [ref.current]);\n\n  return [ref, rect] as const;\n}\n\nexport function useElementSize<T extends HTMLElement = any>(\n  options?: ResizeObserverOptions,\n) {\n  const [ref, { width, height }] = useResizeObserver<T>(options);\n  return { ref, width, height };\n}\n",
    "type": "registry:hook"
  }
],
      component: React.lazy(() => import("@/registry/default/hooks/use-element-size.ts")),
    },

    "use-fullscreen": {
      name: "use-fullscreen",
      description: "",
      type: "registry:hook",
      files: [
  {
    "path": "registry/default/hooks/use-fullscreen.ts",
    "content": "import * as React from \"react\";\n\nfunction getFullscreenElement(): HTMLElement | null {\n  const _document = window.document as any;\n\n  const fullscreenElement =\n    _document.fullscreenElement ||\n    _document.webkitFullscreenElement ||\n    _document.mozFullScreenElement ||\n    _document.msFullscreenElement;\n\n  return fullscreenElement;\n}\n\nfunction exitFullscreen() {\n  const _document = window.document as any;\n\n  if (typeof _document.exitFullscreen === \"function\") {\n    return _document.exitFullscreen();\n  }\n  if (typeof _document.msExitFullscreen === \"function\") {\n    return _document.msExitFullscreen();\n  }\n  if (typeof _document.webkitExitFullscreen === \"function\") {\n    return _document.webkitExitFullscreen();\n  }\n  if (typeof _document.mozCancelFullScreen === \"function\") {\n    return _document.mozCancelFullScreen();\n  }\n\n  return null;\n}\n\nfunction enterFullScreen(element: HTMLElement) {\n  const _element = element as any;\n\n  return (\n    _element.requestFullscreen?.() ||\n    _element.msRequestFullscreen?.() ||\n    _element.webkitEnterFullscreen?.() ||\n    _element.webkitRequestFullscreen?.() ||\n    _element.mozRequestFullscreen?.()\n  );\n}\n\nconst prefixes = [\"\", \"webkit\", \"moz\", \"ms\"];\n\nfunction addEvents(\n  element: HTMLElement,\n  {\n    onFullScreen,\n    onError,\n  }: { onFullScreen: (event: Event) => void; onError: (event: Event) => void },\n) {\n  prefixes.forEach((prefix) => {\n    element.addEventListener(`${prefix}fullscreenchange`, onFullScreen);\n    element.addEventListener(`${prefix}fullscreenerror`, onError);\n  });\n\n  return () => {\n    prefixes.forEach((prefix) => {\n      element.removeEventListener(`${prefix}fullscreenchange`, onFullScreen);\n      element.removeEventListener(`${prefix}fullscreenerror`, onError);\n    });\n  };\n}\n\nexport function useFullscreen<T extends HTMLElement = any>() {\n  const [fullscreen, setFullscreen] = React.useState<boolean>(false);\n\n  const _ref = React.useRef<T>(null);\n\n  const handleFullscreenChange = React.useCallback(\n    (event: Event) => {\n      setFullscreen(event.target === getFullscreenElement());\n    },\n    [setFullscreen],\n  );\n\n  const handleFullscreenError = React.useCallback(\n    (event: Event) => {\n      setFullscreen(false);\n      // eslint-disable-next-line no-console\n      console.error(\n        `[@mantine/hooks] use-fullscreen: Error attempting full-screen mode method: ${event} (${event.target})`,\n      );\n    },\n    [setFullscreen],\n  );\n\n  const toggle = React.useCallback(async () => {\n    if (!getFullscreenElement()) {\n      await enterFullScreen(_ref.current!);\n    } else {\n      await exitFullscreen();\n    }\n  }, []);\n\n  const ref = React.useCallback((element: T | null) => {\n    if (element === null) {\n      _ref.current = window.document.documentElement as T;\n    } else {\n      _ref.current = element;\n    }\n  }, []);\n\n  React.useEffect(() => {\n    if (!_ref.current && window.document) {\n      _ref.current = window.document.documentElement as T;\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError,\n      });\n    }\n\n    if (_ref.current) {\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError,\n      });\n    }\n\n    return undefined;\n  }, [_ref.current]);\n\n  return { ref, toggle, fullscreen } as const;\n}\n",
    "type": "registry:hook"
  }
],
      component: React.lazy(() => import("@/registry/default/hooks/use-fullscreen.ts")),
    },

    "use-mobile": {
      name: "use-mobile",
      description: "",
      type: "registry:hook",
      files: [
  {
    "path": "registry/default/hooks/use-mobile.ts",
    "content": "import * as React from \"react\";\n\nimport debounce from \"lodash.debounce\";\n\nconst useIsMobile = (): boolean => {\n  const [isMobile, setIsMobile] = React.useState(false);\n\n  React.useLayoutEffect(() => {\n    const updateSize = (): void => {\n      setIsMobile(window.innerWidth < 768);\n    };\n    const debouncedUpdateSize = debounce(updateSize, 250);\n\n    updateSize();\n\n    window.addEventListener(\"resize\", debouncedUpdateSize);\n\n    return (): void =>\n      window.removeEventListener(\"resize\", debouncedUpdateSize);\n  }, []);\n\n  return isMobile;\n};\n\nexport default useIsMobile;\n",
    "type": "registry:hook"
  }
],
      component: React.lazy(() => import("@/registry/default/hooks/use-mobile.ts")),
    },

    "use-mounted": {
      name: "use-mounted",
      description: "",
      type: "registry:hook",
      files: [
  {
    "path": "registry/default/hooks/use-mounted.ts",
    "content": "import { useEffect, useState } from \"react\";\n\nexport function useMounted() {\n  const [mounted, setMounted] = useState(false);\n  useEffect(() => setMounted(true), []);\n  return mounted;\n}\n",
    "type": "registry:hook"
  }
],
      component: React.lazy(() => import("@/registry/default/hooks/use-mounted.ts")),
    }
  }
};