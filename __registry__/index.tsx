// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react";

export const Index: Record<string, any> = {
  default: {
    "animated-label-input": {
      name: "animated-label-input",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/ui/animated-label-input.tsx",
          content:
            'import * as React from "react";\r\n\r\nimport { Slot } from "@radix-ui/react-slot";\r\n\r\nimport { Input } from "@/components/ui/input";\r\nimport { Label } from "@/components/ui/label";\r\n\r\nimport { cn } from "@/lib/utils";\r\n\r\nexport interface AnimatedLabelProps\r\n  extends React.ComponentPropsWithoutRef<typeof Label> {\r\n  asChild?: boolean;\r\n}\r\n\r\nconst AnimatedLabel = React.forwardRef<\r\n  React.ElementRef<typeof Label>,\r\n  AnimatedLabelProps\r\n>(({ className, asChild = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : Label;\r\n\r\n  return (\r\n    <Comp\r\n      className={cn(\r\n        "peer-focus:secondary peer-focus:dark:secondary absolute start-2 top-1.5 z-10 origin-[0] -translate-y-4 scale-[0.85] transform bg-background px-2 text-sm text-muted-foreground duration-300 peer-placeholder-shown:top-1/2 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:scale-100 peer-focus:top-1.5 peer-focus:-translate-y-4 peer-focus:scale-[0.85] peer-focus:px-2 dark:bg-background rtl:peer-focus:left-auto rtl:peer-focus:translate-x-1/4 cursor-text",\r\n        className,\r\n      )}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nAnimatedLabel.displayName = "AnimatedLabel";\r\n\r\nexport interface AnimatedLabelInputProps extends InputProps {\r\n  label?: string;\r\n  asChild?: boolean;\r\n}\r\n\r\nconst AnimatedLabelInput = React.forwardRef<\r\n  React.ElementRef<typeof AnimatedInput>,\r\n  AnimatedLabelInputProps\r\n>(({ id, label, asChild = false, ...props }, ref) => {\r\n  const inputRef = React.useRef<HTMLInputElement>(null);\r\n  const Comp = asChild ? Slot : "div";\r\n\r\n  React.useImperativeHandle(ref, () => inputRef.current!);\r\n\r\n  const handleLabelClick = () => {\r\n    if (inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Comp className=\'relative\'>\r\n      <AnimatedInput ref={inputRef} id={id} {...props} />\r\n      <AnimatedLabel htmlFor={id} onClick={handleLabelClick}>\r\n        {label}\r\n      </AnimatedLabel>\r\n    </Comp>\r\n  );\r\n});\r\nAnimatedLabelInput.displayName = "AnimatedLabelInput";\r\n\r\nexport interface InputProps\r\n  extends React.InputHTMLAttributes<HTMLInputElement> {\r\n  asChild?: boolean;\r\n}\r\n\r\nconst AnimatedInput = React.forwardRef<HTMLInputElement, InputProps>(\r\n  ({ className, asChild = false, ...props }, ref) => {\r\n    const Comp = asChild ? Slot : Input;\r\n\r\n    return (\r\n      <Comp\r\n        placeholder=\' \'\r\n        className={cn("peer", className)}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nAnimatedInput.displayName = "AnimatedInput";\r\n\r\nexport { AnimatedLabelInput, AnimatedLabel, AnimatedInput };\r\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/ui/animated-label-input.tsx"),
      ),
    },

    "animated-tooltip": {
      name: "animated-tooltip",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/ui/animated-tooltip.tsx",
          content:
            '"use client";\n\nimport * as React from "react";\n\nimport * as TooltipPrimitive from "@radix-ui/react-tooltip";\nimport { motion, useMotionValue, useSpring, useTransform } from "framer-motion";\n\nimport { cn } from "@/lib/utils";\n\nconst AnimatedTooltipProvider = TooltipPrimitive.Provider;\nconst AnimatedTooltip = TooltipPrimitive.Root;\nconst AnimatedTooltipTrigger = TooltipPrimitive.Trigger;\n\nconst springConfig = { stiffness: 100, damping: 5 };\n\nconst AnimatedTooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => {\n  const x = useMotionValue(0);\n  const rotate = useSpring(\n    useTransform(x, [-100, 100], [-45, 45]),\n    springConfig,\n  );\n  const translateX = useSpring(\n    useTransform(x, [-100, 100], [-50, 50]),\n    springConfig,\n  );\n\n  const handleMouseMove = (event: any) => {\n    const halfWidth = event.currentTarget.offsetWidth / 2;\n    x.set(event.nativeEvent.offsetX - halfWidth);\n  };\n\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content ref={ref} sideOffset={sideOffset} {...props}>\n        <motion.div\n          onMouseMove={handleMouseMove}\n          initial={{ opacity: 0, y: 20, scale: 0.6 }}\n          animate={{\n            opacity: 1,\n            y: 0,\n            scale: 1,\n            transition: {\n              type: "spring",\n              stiffness: 260,\n              damping: 10,\n            },\n          }}\n          exit={{ opacity: 0, y: 20, scale: 0.6 }}\n          style={{\n            translateX: translateX,\n            rotate: rotate,\n          }}\n          className={cn(\n            "flex flex-col items-center justify-center rounded-md z-50 shadow-xl bg-primary px-3 py-1.5 text-primary-foreground ",\n            className,\n          )}\n        >\n          {props.children}\n        </motion.div>\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  );\n});\nAnimatedTooltipContent.displayName = TooltipPrimitive.Content.displayName;\n\nexport {\n  AnimatedTooltip,\n  AnimatedTooltipTrigger,\n  AnimatedTooltipContent,\n  AnimatedTooltipProvider,\n};\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/ui/animated-tooltip.tsx"),
      ),
    },

    "code-editor": {
      name: "code-editor",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/ui/code-editor.tsx",
          content:
            '"use client";\r\n\r\nimport * as React from "react";\r\n\r\nimport {\r\n  type BeforeMount,\r\n  Editor as MonacoEditor,\r\n  type OnMount,\r\n} from "@monaco-editor/react";\r\nimport { type VariantProps, cva } from "class-variance-authority";\r\nimport type { editor } from "monaco-editor";\r\n\r\nimport { cn } from "@/lib/utils";\r\n\r\nexport interface Language {\r\n  value: string;\r\n  label: string;\r\n}\r\n\r\nexport const languages: Language[] = [\r\n  { value: "javascript", label: "JavaScript" },\r\n  { value: "typescript", label: "TypeScript" },\r\n  { value: "html", label: "HTML" },\r\n  { value: "css", label: "CSS" },\r\n  { value: "json", label: "JSON" },\r\n  { value: "markdown", label: "Markdown" },\r\n  { value: "python", label: "Python" },\r\n  { value: "java", label: "Java" },\r\n  { value: "csharp", label: "C#" },\r\n  { value: "cpp", label: "C++" },\r\n];\r\n\r\nconst codeEditorVariants = cva(\r\n  "w-full overflow-hidden rounded-md border bg-background",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: "border-border",\r\n        outline: "border-2",\r\n      },\r\n      size: {\r\n        default: "min-h-[300px]",\r\n        sm: "min-h-[200px]",\r\n        lg: "min-h-[500px]",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: "default",\r\n      size: "default",\r\n    },\r\n  },\r\n);\r\n\r\nexport interface CodeEditorProps\r\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, "onChange">,\r\n    VariantProps<typeof codeEditorVariants> {\r\n  value: string;\r\n  onChange?: (value: string) => void;\r\n  language?: string;\r\n  height?: string;\r\n  theme?: "light" | "dark";\r\n  options?: editor.IStandaloneEditorConstructionOptions;\r\n  onMount?: OnMount;\r\n  readOnly?: boolean;\r\n}\r\n\r\nconst CodeEditor = React.forwardRef<HTMLDivElement, CodeEditorProps>(\r\n  (\r\n    {\r\n      className,\r\n      variant,\r\n      size,\r\n      value,\r\n      onChange,\r\n      language = "javascript",\r\n      height = "300px",\r\n      theme = "dark",\r\n      options,\r\n      onMount,\r\n      readOnly = false,\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => {\r\n    const handleEditorDidMount: OnMount = (editor, monaco) => {\r\n      if (onMount) {\r\n        onMount(editor, monaco);\r\n      }\r\n    };\r\n\r\n    const handleBeforeMount: BeforeMount = (monaco) => {\r\n      // Define VS Code dark theme\r\n      monaco.editor.defineTheme("vs-dark-custom", {\r\n        base: "vs-dark",\r\n        inherit: true,\r\n        rules: [],\r\n        colors: {\r\n          "editor.background": "#1e1e1e",\r\n          "editor.foreground": "#d4d4d4",\r\n          "editor.lineHighlightBackground": "#2d2d2d",\r\n          "editorLineNumber.foreground": "#858585",\r\n          "editor.selectionBackground": "#264f78",\r\n          "editor.inactiveSelectionBackground": "#3a3d41",\r\n        },\r\n      });\r\n\r\n      monaco.editor.defineTheme("vs-light-custom", {\r\n        base: "vs",\r\n        inherit: true,\r\n        rules: [],\r\n        colors: {\r\n          "editor.background": "#ffffff",\r\n          "editor.foreground": "#000000",\r\n          "editor.lineHighlightBackground": "#f5f5f5",\r\n          "editorLineNumber.foreground": "#999999",\r\n          "editor.selectionBackground": "#b3d7ff",\r\n          "editor.inactiveSelectionBackground": "#e5ebf1",\r\n        },\r\n      });\r\n\r\n      if (monaco.languages.typescript) {\r\n        monaco.languages.typescript.typescriptDefaults.setCompilerOptions({\r\n          target: monaco.languages.typescript.ScriptTarget.Latest,\r\n          allowNonTsExtensions: true,\r\n          moduleResolution:\r\n            monaco.languages.typescript.ModuleResolutionKind.NodeJs,\r\n          module: monaco.languages.typescript.ModuleKind.CommonJS,\r\n          noEmit: true,\r\n          esModuleInterop: true,\r\n          jsx: monaco.languages.typescript.JsxEmit.React,\r\n          reactNamespace: "React",\r\n          allowJs: true,\r\n        });\r\n      }\r\n    };\r\n\r\n    const defaultOptions: editor.IStandaloneEditorConstructionOptions = {\r\n      fontSize: 14,\r\n      scrollBeyondLastLine: false,\r\n      automaticLayout: true,\r\n      minimap: { enabled: false },\r\n      folding: true,\r\n      lineNumbers: "on",\r\n      wordWrap: "on",\r\n      tabSize: 2,\r\n      bracketPairColorization: { enabled: true },\r\n      cursorBlinking: "blink",\r\n      formatOnPaste: true,\r\n      readOnly,\r\n      ...options,\r\n    };\r\n\r\n    return (\r\n      <div\r\n        className={cn(codeEditorVariants({ variant, size, className }))}\r\n        ref={ref}\r\n        {...props}\r\n      >\r\n        <MonacoEditor\r\n          height={height}\r\n          language={language}\r\n          value={value}\r\n          onChange={(value) => onChange?.(value || "")}\r\n          theme={theme === "dark" ? "vs-dark-custom" : "vs-light-custom"}\r\n          options={defaultOptions}\r\n          beforeMount={handleBeforeMount}\r\n          onMount={handleEditorDidMount}\r\n          loading={\r\n            <div className=\'flex h-full w-full items-center justify-center text-sm text-muted-foreground\'>\r\n              Loading editor...\r\n            </div>\r\n          }\r\n        />\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\nCodeEditor.displayName = "CodeEditor";\r\n\r\nexport { CodeEditor, codeEditorVariants };\r\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/ui/code-editor.tsx"),
      ),
    },

    kbd: {
      name: "kbd",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/ui/kbd.tsx",
          content:
            'import * as React from "react";\r\n\r\nimport { Slot } from "@radix-ui/react-slot";\r\nimport { type VariantProps, cva } from "class-variance-authority";\r\n\r\nimport { cn } from "@/lib/utils";\r\n\r\nconst kbdVariants = cva(\r\n  "inline-flex w-fit items-center gap-1 font-medium font-mono text-[10px] text-foreground/70 sm:text-[11px]",\r\n  {\r\n    variants: {\r\n      size: {\r\n        default: "h-6 rounded px-1.5",\r\n        sm: "h-5 rounded-sm px-1",\r\n        lg: "h-7 rounded-md px-2",\r\n      },\r\n      variant: {\r\n        default: "bg-accent",\r\n        outline:\r\n          "bg-background px-0 [&_[data-slot=\'kbd-key\']]:min-w-[20px] [&_[data-slot=\'kbd-key\']]:border [&_[data-slot=\'kbd-key\']]:border-border [&_[data-slot=\'kbd-key\']]:bg-muted/30 [&_[data-slot=\'kbd-key\']]:px-1.5 [&_[data-slot=\'kbd-key\']]:shadow-xs",\r\n        ghost: "bg-transparent shadow-none",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      size: "default",\r\n      variant: "default",\r\n    },\r\n  },\r\n);\r\n\r\ninterface KbdRootProps\r\n  extends React.ComponentPropsWithoutRef<"kbd">,\r\n    VariantProps<typeof kbdVariants> {\r\n  asChild?: boolean;\r\n}\r\n\r\nconst KbdRoot = React.forwardRef<HTMLElement, KbdRootProps>(\r\n  (props, forwardedRef) => {\r\n    const {\r\n      variant = "default",\r\n      size = "default",\r\n      asChild,\r\n      className,\r\n      ...rootProps\r\n    } = props;\r\n\r\n    const RootPrimitive = asChild ? Slot : "kbd";\r\n\r\n    return (\r\n      <RootPrimitive\r\n        role=\'group\'\r\n        data-slot=\'kbd\'\r\n        {...rootProps}\r\n        ref={forwardedRef}\r\n        className={cn(kbdVariants({ size, variant, className }))}\r\n      />\r\n    );\r\n  },\r\n);\r\nKbdRoot.displayName = "KbdRoot";\r\n\r\nconst KEY_DESCRIPTIONS: Record<string, string> = {\r\n  "⌘": "Command",\r\n  "⇧": "Shift",\r\n  "⌥": "Option",\r\n  "⌃": "Control",\r\n  Ctrl: "Control",\r\n  "⌫": "Backspace",\r\n  "⎋": "Escape",\r\n  "↩": "Return",\r\n  "⇥": "Tab",\r\n  "⌤": "Enter",\r\n  "↑": "Arrow Up",\r\n  "↓": "Arrow Down",\r\n  "←": "Arrow Left",\r\n  "→": "Arrow Right",\r\n  "⇪": "Caps Lock",\r\n  fn: "Function",\r\n  "⌦": "Delete",\r\n  "⇞": "Page Up",\r\n  "⇟": "Page Down",\r\n  "↖": "Home",\r\n  "↘": "End",\r\n  "↕": "Page Up/Down",\r\n  "↔": "Left/Right",\r\n} as const;\r\n\r\ninterface KbdKeyProps extends React.ComponentPropsWithoutRef<"span"> {\r\n  asChild?: boolean;\r\n}\r\n\r\nconst KbdKey = React.forwardRef<HTMLSpanElement, KbdKeyProps>(\r\n  (props, forwardedRef) => {\r\n    const {\r\n      asChild,\r\n      className,\r\n      children,\r\n      title: titleProp,\r\n      ...keyProps\r\n    } = props;\r\n\r\n    const keyText = children?.toString() ?? "";\r\n    const title = titleProp ?? KEY_DESCRIPTIONS[keyText] ?? keyText;\r\n\r\n    const KeyPrimitive = asChild ? Slot : "span";\r\n\r\n    return (\r\n      <abbr title={title} className=\'no-underline\'>\r\n        <KeyPrimitive\r\n          data-slot=\'kbd-key\'\r\n          {...keyProps}\r\n          ref={forwardedRef}\r\n          className={cn(\r\n            "inline-flex items-center justify-center rounded",\r\n            className,\r\n          )}\r\n        >\r\n          {children}\r\n        </KeyPrimitive>\r\n      </abbr>\r\n    );\r\n  },\r\n);\r\nKbdKey.displayName = "KbdKey";\r\n\r\ninterface KbdSeparatorProps extends React.ComponentPropsWithoutRef<"span"> {\r\n  asChild?: boolean;\r\n}\r\n\r\nconst KbdSeparator = React.forwardRef<HTMLSpanElement, KbdSeparatorProps>(\r\n  (props, forwardedRef) => {\r\n    const { asChild, children = "+", className, ...separatorProps } = props;\r\n\r\n    const SeparatorPrimitive = asChild ? Slot : "span";\r\n\r\n    return (\r\n      <SeparatorPrimitive\r\n        role=\'separator\'\r\n        aria-orientation=\'horizontal\'\r\n        aria-hidden=\'true\'\r\n        data-slot=\'kbd-separator\'\r\n        {...separatorProps}\r\n        ref={forwardedRef}\r\n        className={cn("text-foreground/70", className)}\r\n      >\r\n        {children}\r\n      </SeparatorPrimitive>\r\n    );\r\n  },\r\n);\r\nKbdSeparator.displayName = "KbdSeparator";\r\n\r\nconst Kbd = KbdRoot;\r\nconst Root = KbdRoot;\r\nconst Key = KbdKey;\r\nconst Separator = KbdSeparator;\r\n\r\nexport {\r\n  Kbd,\r\n  KbdKey,\r\n  KbdSeparator,\r\n  //\r\n  Root,\r\n  Key,\r\n  Separator,\r\n};\r\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(() => import("@/registry/default/ui/kbd.tsx")),
    },

    "labeled-switch": {
      name: "labeled-switch",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/ui/labeled-switch.tsx",
          content:
            '"use client";\n\nimport * as React from "react";\n\nimport * as SwitchPrimitives from "@radix-ui/react-switch";\nimport { motion } from "framer-motion";\n\nimport { cn } from "@/lib/utils";\n\ninterface LabeledSwitchProps {\n  firstLabel: React.ReactNode;\n  secondLabel: React.ReactNode;\n  selected: boolean;\n  onToggle: (checked: boolean) => void;\n  className?: string;\n}\n\nconst LabeledSwitch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  LabeledSwitchProps\n>(\n  (\n    { className, firstLabel, secondLabel, selected, onToggle, ...props },\n    ref,\n  ) => {\n    return (\n      <SwitchPrimitives.Root\n        className={cn(\n          "relative flex w-fit cursor-pointer items-center rounded-full ring-2 ring-input transition-colors",\n          className,\n        )}\n        ref={ref}\n        checked={selected}\n        onCheckedChange={onToggle}\n      >\n        <LabeledSwitchButton selected={selected}>\n          {firstLabel}\n        </LabeledSwitchButton>\n        <LabeledSwitchButton selected={!selected}>\n          {secondLabel}\n        </LabeledSwitchButton>\n        <SwitchPrimitives.Thumb\n          className={cn(\n            "absolute inset-0 w-full z-0 flex data-[state=unchecked]:justify-start data-[state=checked]:justify-end",\n          )}\n        >\n          <motion.span\n            layout\n            transition={{ type: "spring", damping: 15, stiffness: 250 }}\n            className=\'h-full w-1/2 rounded-full bg-muted\'\n          />\n        </SwitchPrimitives.Thumb>\n      </SwitchPrimitives.Root>\n    );\n  },\n);\nLabeledSwitch.displayName = "LabeledSwitch";\n\nconst LabeledSwitchButton = ({\n  children,\n  selected,\n}: {\n  children: React.ReactNode;\n  selected: boolean;\n}) => (\n  <div\n    className={cn(\n      "relative z-10 flex w-full items-center justify-center gap-2 px-3 py-3 text-xs font-bold transition-colors md:py-1.5 md:pl-3 md:pr-3.5",\n      selected ? "text-primary" : "text-muted-foreground",\n    )}\n    onMouseDown={(e) => e.preventDefault()}\n  >\n    <span className=\'relative z-10\'>{children}</span>\n  </div>\n);\n\nexport { LabeledSwitch };\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/ui/labeled-switch.tsx"),
      ),
    },

    "range-slider": {
      name: "range-slider",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/ui/range-slider.tsx",
          content:
            '"use client";\n\nimport * as React from "react";\n\nimport * as SliderPrimitive from "@radix-ui/react-slider";\n\nimport { cn } from "@/lib/utils";\n\ninterface RangeSliderProps\n  extends React.ComponentProps<typeof SliderPrimitive.Root> {\n  labelPosition?: "top" | "bottom";\n  label?: (value: number | undefined) => React.ReactNode;\n  orientation?: "horizontal" | "vertical";\n}\n\nconst RangeSlider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  RangeSliderProps\n>(\n  (\n    {\n      className,\n      label,\n      labelPosition = "top",\n      orientation = "horizontal",\n      ...props\n    },\n    ref,\n  ) => {\n    const initialValue = Array.isArray(props.value)\n      ? props.value\n      : [props.min, props.max];\n\n    return (\n      <SliderPrimitive.Root\n        ref={ref}\n        orientation={orientation}\n        className={cn(\n          orientation === "horizontal"\n            ? "relative flex w-full touch-none select-none items-center"\n            : "relative flex h-full min-h-[200px] touch-none select-none flex-col items-center",\n          className,\n        )}\n        {...props}\n      >\n        <SliderPrimitive.Track\n          className={cn(\n            orientation === "horizontal"\n              ? "relative h-2 w-full grow overflow-hidden rounded-full bg-secondary"\n              : "relative w-2 h-full grow overflow-hidden rounded-full bg-secondary",\n          )}\n        >\n          <SliderPrimitive.Range\n            className={cn(\n              orientation === "horizontal"\n                ? "absolute h-full bg-primary"\n                : "absolute w-full bg-primary",\n            )}\n          />\n        </SliderPrimitive.Track>\n        {initialValue.map((value, index) => (\n          <React.Fragment key={index}>\n            <SliderPrimitive.Thumb\n              className={cn(\n                "relative block border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",\n                orientation === "horizontal"\n                  ? "h-5 w-2 rounded-sm"\n                  : "h-2 w-5 rounded-sm",\n              )}\n            >\n              {label && (\n                <span\n                  className={cn(\n                    "absolute flex text-xs justify-center font-medium",\n                    orientation === "horizontal"\n                      ? labelPosition === "top"\n                        ? "-left-2 -top-5"\n                        : "-left-2 top-5"\n                      : labelPosition === "top"\n                        ? "-translate-x-full -translate-y-1/2 -left-2"\n                        : "translate-x-full -translate-y-1/2",\n                  )}\n                >\n                  {label(value)}\n                </span>\n              )}\n            </SliderPrimitive.Thumb>\n          </React.Fragment>\n        ))}\n      </SliderPrimitive.Root>\n    );\n  },\n);\nRangeSlider.displayName = "RangeSlider";\n\nexport { RangeSlider };\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/ui/range-slider.tsx"),
      ),
    },

    "responsive-textarea": {
      name: "responsive-textarea",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/ui/responsive-textarea.tsx",
          content:
            '"use client";\n\nimport * as React from "react";\n\nimport { cn } from "@/lib/utils";\n\nconst ResponsiveTextarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<"textarea">\n>(({ className, ...props }, ref) => {\n  const textAreaRef = React.useRef<HTMLTextAreaElement>(null);\n  const [val, setVal] = React.useState<string>("");\n\n  React.useEffect(() => {\n    if (textAreaRef.current) {\n      textAreaRef.current.style.height = "auto";\n      textAreaRef.current.style.height =\n        textAreaRef.current.scrollHeight + "px";\n    }\n  }, [val]);\n\n  return (\n    <textarea\n      className={cn(\n        "placeholder:text-muted-foreground flex min-h-[80px] w-full resize-none overflow-hidden rounded-md border border-input bg-background px-3 py-2 text-sm text-foreground ring-offset-primary focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",\n        className,\n      )}\n      ref={textAreaRef}\n      onChange={(e) => setVal(e.target.value)}\n      {...props}\n    />\n  );\n});\nResponsiveTextarea.displayName = "ResponsiveTextarea";\n\nexport { ResponsiveTextarea };\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/ui/responsive-textarea.tsx"),
      ),
    },

    "star-rating": {
      name: "star-rating",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/ui/star-rating.tsx",
          content:
            '"use client";\n\nimport * as React from "react";\n\nimport { Star } from "lucide-react";\n\nimport { cn } from "@/lib/utils";\n\nlet nextId = 0;\nconst generateStarIds = (count: number) =>\n  Array.from({ length: count }, () => `star-${nextId++}`);\n\ninterface StarRatingProps {\n  value: number;\n  onChange?: (value: number) => void;\n  className?: string;\n  size?: number;\n  maxStars?: number;\n  readOnly?: boolean;\n  color?: string;\n}\n\nconst StarIcon = React.memo(\n  ({\n    size,\n    index,\n    isInteractive,\n    onClick,\n    onMouseMove,\n    style,\n  }: {\n    index: number;\n    style: React.CSSProperties;\n    size: number;\n    onClick: (e: React.MouseEvent<SVGElement>) => void;\n    onMouseMove: (e: React.MouseEvent<SVGElement>) => void;\n    isInteractive: boolean;\n  }) => (\n    <Star\n      key={index}\n      size={size}\n      fill={style.fill}\n      color={style.color}\n      onClick={onClick}\n      onMouseMove={onMouseMove}\n      className={cn(\n        "transition-colors duration-200",\n        isInteractive && "cursor-pointer hover:scale-110",\n      )}\n      style={style}\n    />\n  ),\n);\nStarIcon.displayName = "StarIcon";\n\nconst StarRating = ({\n  className,\n  color = "#e4c616",\n  size = 24,\n  maxStars = 5,\n  onChange,\n  readOnly = false,\n  value,\n}: StarRatingProps) => {\n  const [hoverRating, setHoverRating] = React.useState<number | null>(null);\n  const [starIds] = React.useState(() => generateStarIds(maxStars));\n\n  const handleStarClick = React.useCallback(\n    (index: number, event: React.MouseEvent<SVGElement>) => {\n      if (readOnly || !onChange) return;\n      const newRating = index + 1;\n      onChange(newRating);\n    },\n    [readOnly, onChange],\n  );\n\n  const handleStarHover = React.useCallback(\n    (index: number, event: React.MouseEvent<SVGElement>) => {\n      if (!readOnly) {\n        setHoverRating(index + 1);\n      }\n    },\n    [readOnly],\n  );\n\n  const handleMouseLeave = React.useCallback(() => {\n    if (!readOnly) {\n      setHoverRating(null);\n    }\n  }, [readOnly]);\n\n  const getStarStyle = React.useCallback(\n    (index: number) => {\n      const ratingToUse =\n        !readOnly && hoverRating !== null ? hoverRating : value;\n\n      const difference = ratingToUse - index;\n\n      if (difference <= 0) return { color: "gray", fill: "transparent" };\n      if (difference >= 1) return { color: color, fill: color };\n\n      return {\n        color: color,\n        fill: `url(#${starIds[index]})`,\n      } as React.CSSProperties;\n    },\n    [readOnly, hoverRating, value, color, starIds],\n  );\n\n  const renderGradientDefs = () => {\n    if (!readOnly && hoverRating !== null) return null;\n\n    const partialStarIndex = Math.floor(value);\n    const partialFill = (value % 1) * 100;\n\n    if (partialFill > 0) {\n      return (\n        <linearGradient\n          id={starIds[partialStarIndex]}\n          x1=\'0%\'\n          y1=\'0%\'\n          x2=\'100%\'\n          y2=\'0%\'\n        >\n          <stop offset={`${partialFill}%`} stopColor={color} />\n          <stop offset={`${partialFill}%`} stopColor=\'transparent\' />\n        </linearGradient>\n      );\n    }\n    return null;\n  };\n\n  const stars = React.useMemo(() => {\n    return Array.from({ length: maxStars }).map((_, index) => {\n      const style = getStarStyle(index);\n      return (\n        <StarIcon\n          key={index}\n          index={index}\n          style={style}\n          size={size}\n          onClick={(e) => handleStarClick(index, e)}\n          onMouseMove={(e) => handleStarHover(index, e)}\n          isInteractive={!readOnly}\n        />\n      );\n    });\n  }, [\n    maxStars,\n    getStarStyle,\n    size,\n    handleStarClick,\n    handleStarHover,\n    readOnly,\n  ]);\n\n  return (\n    <div\n      className={cn("relative flex items-center gap-x-0.5", className)}\n      onMouseLeave={handleMouseLeave}\n    >\n      <svg width=\'0\' height=\'0\' style={{ position: "absolute" }}>\n        <defs>{renderGradientDefs()}</defs>\n      </svg>\n      {stars}\n    </div>\n  );\n};\n\nexport default StarRating;\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/ui/star-rating.tsx"),
      ),
    },

    stepper: {
      name: "stepper",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/ui/stepper.tsx",
          content:
            'import * as React from "react";\n\nimport * as Stepperize from "@stepperize/react";\nimport { Slot } from "@radix-ui/react-slot";\nimport { type VariantProps, cva } from "class-variance-authority";\n\nimport { Button } from "@/components/ui/button";\n\nimport { cn } from "@/lib/utils";\n\ntype StepperVariant = "horizontal" | "vertical" | "circle";\ntype StepperLabelOrientation = "horizontal" | "vertical";\n\ntype StepperConfig = {\n  variant?: StepperVariant;\n  labelOrientation?: StepperLabelOrientation;\n  tracking?: boolean;\n};\n\ntype DefineStepperProps<Steps extends Stepperize.Step[]> = Omit<\n  Stepperize.StepperReturn<Steps>,\n  "Scoped"\n> & {\n  StepperProvider: (\n    props: Omit<Stepperize.ScopedProps<Steps>, "children"> &\n      Omit<React.ComponentProps<"div">, "children"> &\n      StepperConfig & {\n        children:\n          | React.ReactNode\n          | ((props: {\n              methods: Stepperize.Stepper<Steps>;\n            }) => React.ReactNode);\n      },\n  ) => React.ReactElement;\n  StepperNavigation: (props: React.ComponentProps<"nav">) => React.ReactElement;\n  StepperStep: (\n    props: React.ComponentProps<"button"> & {\n      of: Stepperize.Get.Id<Steps>;\n      icon?: React.ReactNode;\n    },\n  ) => React.ReactElement;\n  StepperTitle: (\n    props: React.ComponentProps<"h4"> & { asChild?: boolean },\n  ) => React.ReactElement;\n  StepperDescription: (\n    props: React.ComponentProps<"p"> & { asChild?: boolean },\n  ) => React.ReactElement;\n  StepperPanel: (\n    props: React.ComponentProps<"div"> & { asChild?: boolean },\n  ) => React.ReactElement;\n  StepperControls: (\n    props: React.ComponentProps<"div"> & { asChild?: boolean },\n  ) => React.ReactElement;\n};\n\ntype CircleStepIndicatorProps = {\n  currentStep: number;\n  totalSteps: number;\n  size?: number;\n  strokeWidth?: number;\n};\n\nconst StepperContext = React.createContext<StepperConfig | null>(null);\n\nconst useStepperProvider = (): StepperConfig => {\n  const context = React.useContext(StepperContext);\n  if (!context) {\n    throw new Error("useStepper must be used within a StepperProvider.");\n  }\n  return context;\n};\n\nconst defineStepper = <const Steps extends Stepperize.Step[]>(\n  ...steps: Steps\n): DefineStepperProps<Steps> => {\n  const { Scoped, useStepper, ...rest } = Stepperize.defineStepper(...steps);\n\n  const StepperContainer = ({\n    children,\n    className,\n    ...props\n  }: Omit<React.ComponentProps<"div">, "children"> & {\n    children:\n      | React.ReactNode\n      | ((props: { methods: Stepperize.Stepper<Steps> }) => React.ReactNode);\n  }) => {\n    const methods = useStepper();\n\n    return (\n      <div className={cn("w-full", className)} {...props}>\n        {typeof children === "function" ? children({ methods }) : children}\n      </div>\n    );\n  };\n\n  return {\n    ...rest,\n    useStepper,\n    StepperProvider: ({\n      variant = "horizontal",\n      labelOrientation = "horizontal",\n      tracking = false,\n      children,\n      className,\n      ...props\n    }) => {\n      return (\n        <StepperContext.Provider\n          value={{ variant, labelOrientation, tracking }}\n        >\n          <Scoped\n            initialStep={props.initialStep}\n            initialMetadata={props.initialMetadata}\n          >\n            <StepperContainer className={className} {...props}>\n              {children}\n            </StepperContainer>\n          </Scoped>\n        </StepperContext.Provider>\n      );\n    },\n    StepperNavigation: ({\n      children,\n      className,\n      "aria-label": ariaLabel = "Stepper Navigation",\n      ...props\n    }) => {\n      const { variant } = useStepperProvider();\n      return (\n        <nav\n          aria-label={ariaLabel}\n          role=\'tablist\'\n          className={cn("stepper-navigation", className)}\n          {...props}\n        >\n          <ol className={listVariants({ variant: variant })}>{children}</ol>\n        </nav>\n      );\n    },\n    StepperStep: ({ children, className, icon, ...props }) => {\n      const { variant, labelOrientation } = useStepperProvider();\n      const { current } = useStepper();\n\n      const utils = rest.utils;\n      const steps = rest.steps;\n\n      const stepIndex = utils.getIndex(props.of);\n      const step = steps[stepIndex];\n      const currentIndex = utils.getIndex(current.id);\n\n      const isLast = utils.getLast().id === props.of;\n      const isActive = current.id === props.of;\n\n      const dataState = getStepState(currentIndex, stepIndex);\n      const childMap = useStepChildren(children);\n\n      const title = childMap.get("title");\n      const description = childMap.get("description");\n      const panel = childMap.get("panel");\n\n      if (variant === "circle") {\n        return (\n          <li\n            className={cn(\n              "flex shrink-0 items-center gap-4 rounded-md transition-colors",\n              className,\n            )}\n          >\n            <CircleStepIndicator\n              currentStep={stepIndex + 1}\n              totalSteps={steps.length}\n            />\n            <div className=\'flex flex-col items-start gap-1\'>\n              {title}\n              {description}\n            </div>\n          </li>\n        );\n      }\n\n      return (\n        <>\n          <li\n            className={cn([\n              "group peer relative flex items-center gap-2",\n              "data-[variant=vertical]:flex-row",\n              "data-[label-orientation=vertical]:w-full",\n              "data-[label-orientation=vertical]:flex-col",\n              "data-[label-orientation=vertical]:justify-center",\n            ])}\n            data-variant={variant}\n            data-label-orientation={labelOrientation}\n            data-state={dataState}\n            data-disabled={props.disabled}\n          >\n            <Button\n              id={`step-${step.id}`}\n              type=\'button\'\n              role=\'tab\'\n              tabIndex={dataState !== "inactive" ? 0 : -1}\n              className=\'rounded-full\'\n              variant={dataState !== "inactive" ? "default" : "secondary"}\n              size=\'icon\'\n              aria-controls={`step-panel-${props.of}`}\n              aria-current={isActive ? "step" : undefined}\n              aria-posinset={stepIndex + 1}\n              aria-setsize={steps.length}\n              aria-selected={isActive}\n              onKeyDown={(e) =>\n                onStepKeyDown(\n                  e,\n                  utils.getNext(props.of),\n                  utils.getPrev(props.of),\n                )\n              }\n              {...props}\n            >\n              {icon ?? stepIndex + 1}\n            </Button>\n            {variant === "horizontal" && labelOrientation === "vertical" && (\n              <StepperSeparator\n                orientation=\'horizontal\'\n                labelOrientation={labelOrientation}\n                isLast={isLast}\n                state={dataState}\n                disabled={props.disabled}\n              />\n            )}\n            <div className=\'flex flex-col items-start\'>\n              {title}\n              {description}\n            </div>\n          </li>\n\n          {variant === "horizontal" && labelOrientation === "horizontal" && (\n            <StepperSeparator\n              orientation=\'horizontal\'\n              isLast={isLast}\n              state={dataState}\n              disabled={props.disabled}\n            />\n          )}\n\n          {variant === "vertical" && (\n            <div className=\'flex gap-4\'>\n              {!isLast && (\n                <div className=\'flex justify-center ps-5\'>\n                  <StepperSeparator\n                    orientation=\'vertical\'\n                    isLast={isLast}\n                    state={dataState}\n                    disabled={props.disabled}\n                  />\n                </div>\n              )}\n              <div className=\'my-3 flex-1 ps-4\'>{panel}</div>\n            </div>\n          )}\n        </>\n      );\n    },\n    StepperTitle,\n    StepperDescription,\n    StepperPanel: ({ children, className, asChild, ...props }) => {\n      const Comp = asChild ? Slot : "div";\n      const { tracking } = useStepperProvider();\n\n      return (\n        <Comp\n          className={className}\n          ref={(node) => scrollIntoStepperPanel(node, tracking)}\n          {...props}\n        >\n          {children}\n        </Comp>\n      );\n    },\n    StepperControls: ({ children, className, asChild, ...props }) => {\n      const Comp = asChild ? Slot : "div";\n      return (\n        <Comp className={cn(" flex justify-end gap-4", className)} {...props}>\n          {children}\n        </Comp>\n      );\n    },\n  };\n};\n\nconst StepperTitle = ({\n  children,\n  className,\n  asChild,\n  ...props\n}: React.ComponentProps<"h4"> & { asChild?: boolean }) => {\n  const Comp = asChild ? Slot : "h4";\n\n  return (\n    <Comp className={cn("text-base font-medium m-0", className)} {...props}>\n      {children}\n    </Comp>\n  );\n};\n\nconst StepperDescription = ({\n  children,\n  className,\n  asChild,\n  ...props\n}: React.ComponentProps<"p"> & { asChild?: boolean }) => {\n  const Comp = asChild ? Slot : "p";\n\n  return (\n    <Comp className={cn("text-sm text-muted-foreground", className)} {...props}>\n      {children}\n    </Comp>\n  );\n};\n\nconst StepperSeparator = ({\n  orientation,\n  isLast,\n  labelOrientation,\n  state,\n  disabled,\n}: {\n  isLast: boolean;\n  state: string;\n  disabled?: boolean;\n} & VariantProps<typeof classForSeparator>) => {\n  if (isLast) {\n    return null;\n  }\n  return (\n    <div\n      data-orientation={orientation}\n      data-state={state}\n      data-disabled={disabled}\n      role=\'separator\'\n      tabIndex={-1}\n      className={classForSeparator({ orientation, labelOrientation })}\n    />\n  );\n};\n\nconst CircleStepIndicator = ({\n  currentStep,\n  totalSteps,\n  size = 80,\n  strokeWidth = 6,\n}: CircleStepIndicatorProps) => {\n  const radius = (size - strokeWidth) / 2;\n  const circumference = radius * 2 * Math.PI;\n  const fillPercentage = (currentStep / totalSteps) * 100;\n  const dashOffset = circumference - (circumference * fillPercentage) / 100;\n  return (\n    <div\n      role=\'progressbar\'\n      aria-valuenow={currentStep}\n      aria-valuemin={1}\n      aria-valuemax={totalSteps}\n      tabIndex={-1}\n      className=\'relative inline-flex items-center justify-center\'\n    >\n      <svg width={size} height={size}>\n        <title>Step Indicator</title>\n        <circle\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          fill=\'none\'\n          stroke=\'currentColor\'\n          strokeWidth={strokeWidth}\n          className=\'text-muted-foreground\'\n        />\n        <circle\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          fill=\'none\'\n          stroke=\'currentColor\'\n          strokeWidth={strokeWidth}\n          strokeDasharray={circumference}\n          strokeDashoffset={dashOffset}\n          className=\'text-primary transition-all duration-300 ease-in-out\'\n          transform={`rotate(-90 ${size / 2} ${size / 2})`}\n        />\n      </svg>\n      <div className=\'absolute inset-0 flex items-center justify-center\'>\n        <span className=\'text-sm font-medium\' aria-live=\'polite\'>\n          {currentStep} of {totalSteps}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nconst listVariants = cva(" flex gap-2", {\n  variants: {\n    variant: {\n      horizontal: "flex-row items-center justify-between",\n      vertical: "flex-col",\n      circle: "flex-row items-center justify-between",\n    },\n  },\n});\n\nconst classForSeparator = cva(\n  [\n    "bg-muted",\n    "data-[state=completed]:bg-primary data-[disabled]:opacity-50",\n    "transition-all duration-300 ease-in-out",\n  ],\n  {\n    variants: {\n      orientation: {\n        horizontal: "h-0.5 flex-1",\n        vertical: "h-full w-0.5",\n      },\n      labelOrientation: {\n        vertical:\n          "absolute left-[calc(50%+30px)] right-[calc(-50%+20px)] top-5 block shrink-0",\n      },\n    },\n  },\n);\n\nfunction scrollIntoStepperPanel(\n  node: HTMLDivElement | null,\n  tracking?: boolean,\n) {\n  if (tracking) {\n    node?.scrollIntoView({ behavior: "smooth", block: "center" });\n  }\n}\n\nconst useStepChildren = (children: React.ReactNode) => {\n  return React.useMemo(() => extractChildren(children), [children]);\n};\n\nconst extractChildren = (children: React.ReactNode) => {\n  const childrenArray = React.Children.toArray(children);\n  const map = new Map<string, React.ReactNode>();\n\n  for (const child of childrenArray) {\n    if (React.isValidElement(child)) {\n      if (child.type === StepperTitle) {\n        map.set("title", child);\n      } else if (child.type === StepperDescription) {\n        map.set("description", child);\n      } else {\n        map.set("panel", child);\n      }\n    }\n  }\n\n  return map;\n};\n\nconst onStepKeyDown = (\n  e: React.KeyboardEvent<HTMLButtonElement>,\n  nextStep: Stepperize.Step,\n  prevStep: Stepperize.Step,\n) => {\n  const { key } = e;\n  const directions = {\n    next: ["ArrowRight", "ArrowDown"],\n    prev: ["ArrowLeft", "ArrowUp"],\n  };\n\n  if (directions.next.includes(key) || directions.prev.includes(key)) {\n    const direction = directions.next.includes(key) ? "next" : "prev";\n    const step = direction === "next" ? nextStep : prevStep;\n\n    if (!step) {\n      return;\n    }\n\n    const stepElement = document.getElementById(`step-${step.id}`);\n    if (!stepElement) {\n      return;\n    }\n\n    const isActive =\n      stepElement.parentElement?.getAttribute("data-state") !== "inactive";\n    if (isActive || direction === "prev") {\n      stepElement.focus();\n    }\n  }\n};\n\nconst getStepState = (currentIndex: number, stepIndex: number) => {\n  if (currentIndex === stepIndex) {\n    return "active";\n  }\n  if (currentIndex > stepIndex) {\n    return "completed";\n  }\n  return "inactive";\n};\n\nexport { defineStepper };\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(() => import("@/registry/default/ui/stepper.tsx")),
    },

    "tel-input": {
      name: "tel-input",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/ui/tel-input.tsx",
          content:
            'import * as React from "react";\n\nimport * as PhoneNumberInput from "react-phone-number-input";\nimport { CheckIcon, ChevronsUpDown } from "lucide-react";\nimport flags from "react-phone-number-input/flags";\n\nimport { Button } from "@/components/ui/button";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from "@/components/ui/command";\nimport { Input } from "@/components/ui/input";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from "@/components/ui/popover";\nimport { ScrollArea } from "@/components/ui/scroll-area";\n\nimport { cn } from "@/lib/utils";\n\ntype CountryEntry = {\n  label: string;\n  value: PhoneNumberInput.Country | undefined;\n};\n\ntype CountrySelectProps = {\n  disabled?: boolean;\n  value: PhoneNumberInput.Country;\n  options: CountryEntry[];\n  onChange: (country: PhoneNumberInput.Country) => void;\n};\n\ninterface CountrySelectOptionProps extends PhoneNumberInput.FlagProps {\n  selectedCountry: PhoneNumberInput.Country;\n  onChange: (country: PhoneNumberInput.Country) => void;\n}\n\ntype TelInputProps = Omit<\n  React.ComponentProps<"input">,\n  "onChange" | "value" | "ref"\n> &\n  Omit<PhoneNumberInput.Props<typeof PhoneNumberInput.default>, "onChange"> & {\n    onChange?: (value: PhoneNumberInput.Value) => void;\n  };\n\nconst FlagComponent = ({\n  country,\n  countryName,\n}: PhoneNumberInput.FlagProps) => {\n  const Flag = flags[country];\n\n  return (\n    <span className=\'flex h-4 w-6 overflow-hidden rounded-sm bg-foreground/20 [&_svg]:size-full\'>\n      {Flag && <Flag title={countryName} />}\n    </span>\n  );\n};\n\nconst CountrySelectOption = ({\n  country,\n  countryName,\n  selectedCountry,\n  onChange,\n}: CountrySelectOptionProps) => {\n  return (\n    <CommandItem\n      className=\'gap-2 cursor-pointer\'\n      onSelect={() => onChange(country)}\n    >\n      <FlagComponent country={country} countryName={countryName} />\n      <span className=\'flex-1 text-sm\'>{countryName}</span>\n      <span className=\'text-sm text-foreground/50\'>{`+${PhoneNumberInput.getCountryCallingCode(country)}`}</span>\n      <CheckIcon\n        className={`ml-auto size-4 ${country === selectedCountry ? "opacity-100" : "opacity-0"}`}\n      />\n    </CommandItem>\n  );\n};\n\nconst InputComponent = React.forwardRef<\n  HTMLInputElement,\n  React.ComponentProps<"input">\n>(({ className, ...props }, ref) => (\n  <Input\n    className={cn("rounded-e-lg rounded-s-none", className)}\n    {...props}\n    ref={ref}\n  />\n));\nInputComponent.displayName = "InputComponent";\n\nconst CountrySelect = ({\n  disabled,\n  value: selectedCountry,\n  options: countryList,\n  onChange,\n}: CountrySelectProps) => {\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          type=\'button\'\n          variant=\'outline\'\n          className=\'flex gap-1 rounded-e-none rounded-s-lg border-r-0 px-3 focus:z-10\'\n          disabled={disabled}\n        >\n          <FlagComponent\n            country={selectedCountry}\n            countryName={selectedCountry}\n          />\n          <ChevronsUpDown\n            className={cn(\n              "-mr-2 size-4 opacity-50",\n              disabled ? "hidden" : "opacity-100",\n            )}\n          />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\'w-[300px] p-0\'>\n        <Command>\n          <CommandInput placeholder=\'Search country...\' />\n          <CommandList>\n            <ScrollArea className=\'h-72\'>\n              <CommandEmpty>No country found.</CommandEmpty>\n              <CommandGroup>\n                {countryList.map(({ value, label }) =>\n                  value ? (\n                    <CountrySelectOption\n                      key={value}\n                      country={value}\n                      countryName={label}\n                      selectedCountry={selectedCountry}\n                      onChange={onChange}\n                    />\n                  ) : null,\n                )}\n              </CommandGroup>\n            </ScrollArea>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nconst TelInput: React.ForwardRefExoticComponent<TelInputProps> =\n  React.forwardRef<\n    React.ElementRef<typeof PhoneNumberInput.default>,\n    TelInputProps\n  >(({ className, onChange, ...props }, ref) => {\n    return (\n      <PhoneNumberInput.default\n        ref={ref}\n        className={cn("flex", className)}\n        flagComponent={FlagComponent}\n        countrySelectComponent={CountrySelect}\n        inputComponent={InputComponent}\n        smartCaret={false}\n        onChange={(value) =>\n          onChange?.(value || ("" as PhoneNumberInput.Value))\n        }\n        {...props}\n      />\n    );\n  });\nTelInput.displayName = "TelInput";\n\nexport { TelInput };\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/ui/tel-input.tsx"),
      ),
    },

    "animated-label-input-default": {
      name: "animated-label-input-default",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/animated-label-input-default.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () =>
          import("@/registry/default/example/animated-label-input-default.tsx"),
      ),
    },

    "animated-label-input-with-form": {
      name: "animated-label-input-with-form",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/animated-label-input-with-form.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/example/animated-label-input-with-form.tsx"
          ),
      ),
    },

    "kbd-default": {
      name: "kbd-default",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/kbd-default.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/kbd-default.tsx"),
      ),
    },

    "kbd-multiple": {
      name: "kbd-multiple",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/kbd-multiple.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/kbd-multiple.tsx"),
      ),
    },

    "kbd-variants": {
      name: "kbd-variants",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/kbd-variants.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/kbd-variants.tsx"),
      ),
    },

    "labeled-switch-default": {
      name: "labeled-switch-default",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/labeled-switch-default.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/labeled-switch-default.tsx"),
      ),
    },

    "labeled-switch-with-form": {
      name: "labeled-switch-with-form",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/labeled-switch-with-form.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/labeled-switch-with-form.tsx"),
      ),
    },

    "range-slider-default": {
      name: "range-slider-default",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/range-slider-default.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/range-slider-default.tsx"),
      ),
    },

    "range-slider-vertical": {
      name: "range-slider-vertical",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/range-slider-vertical.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/range-slider-vertical.tsx"),
      ),
    },

    "range-slider-with-label": {
      name: "range-slider-with-label",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/range-slider-with-label.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/range-slider-with-label.tsx"),
      ),
    },

    "responsive-textarea-default": {
      name: "responsive-textarea-default",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/responsive-textarea-default.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () =>
          import("@/registry/default/example/responsive-textarea-default.tsx"),
      ),
    },

    "responsive-textarea-with-form": {
      name: "responsive-textarea-with-form",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/responsive-textarea-with-form.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/example/responsive-textarea-with-form.tsx"
          ),
      ),
    },

    "responsive-textarea-with-label": {
      name: "responsive-textarea-with-label",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/responsive-textarea-with-label.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/example/responsive-textarea-with-label.tsx"
          ),
      ),
    },

    "responsive-textarea-with-text": {
      name: "responsive-textarea-with-text",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/responsive-textarea-with-text.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/example/responsive-textarea-with-text.tsx"
          ),
      ),
    },

    "star-rating-customized": {
      name: "star-rating-customized",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/star-rating-customized.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/star-rating-customized.tsx"),
      ),
    },

    "star-rating-default": {
      name: "star-rating-default",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/star-rating-default.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/star-rating-default.tsx"),
      ),
    },

    "star-rating-interactive": {
      name: "star-rating-interactive",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/star-rating-interactive.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/star-rating-interactive.tsx"),
      ),
    },

    "star-rating-readonly": {
      name: "star-rating-readonly",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/star-rating-readonly.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/star-rating-readonly.tsx"),
      ),
    },

    "star-rating-with-form": {
      name: "star-rating-with-form",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/star-rating-with-form.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/star-rating-with-form.tsx"),
      ),
    },

    "stepper-demo": {
      name: "stepper-demo",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/stepper-demo.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/stepper-demo.tsx"),
      ),
    },

    "stepper-description": {
      name: "stepper-description",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/stepper-description.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/stepper-description.tsx"),
      ),
    },

    "stepper-form": {
      name: "stepper-form",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/stepper-form.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/stepper-form.tsx"),
      ),
    },

    "stepper-icon": {
      name: "stepper-icon",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/stepper-icon.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/stepper-icon.tsx"),
      ),
    },

    "stepper-label-orientation": {
      name: "stepper-label-orientation",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/stepper-label-orientation.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () =>
          import("@/registry/default/example/stepper-label-orientation.tsx"),
      ),
    },

    "stepper-responsive-variant": {
      name: "stepper-responsive-variant",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/stepper-responsive-variant.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () =>
          import("@/registry/default/example/stepper-responsive-variant.tsx"),
      ),
    },

    "stepper-tracking": {
      name: "stepper-tracking",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/stepper-tracking.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/stepper-tracking.tsx"),
      ),
    },

    "stepper-variants": {
      name: "stepper-variants",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/stepper-variants.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/stepper-variants.tsx"),
      ),
    },

    "tel-input-custom-labels": {
      name: "tel-input-custom-labels",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/tel-input-custom-labels.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/tel-input-custom-labels.tsx"),
      ),
    },

    "tel-input-default-country": {
      name: "tel-input-default-country",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/tel-input-default-country.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () =>
          import("@/registry/default/example/tel-input-default-country.tsx"),
      ),
    },

    "tel-input-default": {
      name: "tel-input-default",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/tel-input-default.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/tel-input-default.tsx"),
      ),
    },

    "tel-input-international": {
      name: "tel-input-international",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/tel-input-international.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/tel-input-international.tsx"),
      ),
    },

    "tel-input-with-form": {
      name: "tel-input-with-form",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/tel-input-with-form.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/tel-input-with-form.tsx"),
      ),
    },

    "use-boolean-default": {
      name: "use-boolean-default",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/use-boolean-default.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/use-boolean-default.tsx"),
      ),
    },

    "use-click-outside-default": {
      name: "use-click-outside-default",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/use-click-outside-default.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () =>
          import("@/registry/default/example/use-click-outside-default.tsx"),
      ),
    },

    "use-debounce-default": {
      name: "use-debounce-default",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/use-debounce-default.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/use-debounce-default.tsx"),
      ),
    },

    "use-element-size-default": {
      name: "use-element-size-default",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/use-element-size-default.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/use-element-size-default.tsx"),
      ),
    },

    "use-fullscreen-default": {
      name: "use-fullscreen-default",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/use-fullscreen-default.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/use-fullscreen-default.tsx"),
      ),
    },

    "use-fullscreen-with-target": {
      name: "use-fullscreen-with-target",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/use-fullscreen-with-target.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () =>
          import("@/registry/default/example/use-fullscreen-with-target.tsx"),
      ),
    },

    "use-mobile-default": {
      name: "use-mobile-default",
      description: "",
      type: "registry:example",
      files: [
        {
          path: "registry/default/example/use-mobile-default.tsx",
          type: "registry:example",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/example/use-mobile-default.tsx"),
      ),
    },

    "accordion-box-contained": {
      name: "accordion-box-contained",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/accordion/accordion-box-contained.tsx",
          content:
            'import {\r\n  Accordion,\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n} from "@/components/ui/accordion";\r\n\r\nconst items = [\r\n  {\r\n    title: "Is it accessible?",\r\n    content: "Yes. It adheres to the WAI-ARIA design pattern.",\r\n  },\r\n  {\r\n    title: "Is it styled?",\r\n    content:\r\n      "Yes. It comes with default styles that matches the other components\' aesthetic.",\r\n  },\r\n  {\r\n    title: "Is it animated?",\r\n    content:\r\n      "Yes. It\'s animated by default, but you can disable it if you prefer.",\r\n  },\r\n];\r\n\r\nexport default function AccordionBoxContained() {\r\n  return (\r\n    <Accordion type=\'single\' collapsible className=\'max-w-lg my-4 w-full\'>\r\n      {items.map(({ title, content }, index) => (\r\n        <AccordionItem\r\n          key={index}\r\n          value={`item-${index}`}\r\n          className=\'last:border-none first:rounded-t-md last:rounded-b-md px-4 bg-muted\'\r\n        >\r\n          <AccordionTrigger>{title}</AccordionTrigger>\r\n          <AccordionContent>{content}</AccordionContent>\r\n        </AccordionItem>\r\n      ))}\r\n    </Accordion>\r\n  );\r\n}\r\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/accordion/accordion-box-contained.tsx"
          ),
      ),
    },

    "accordion-box": {
      name: "accordion-box",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/accordion/accordion-box.tsx",
          content:
            'import {\r\n  Accordion,\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n} from "@/components/ui/accordion";\r\n\r\nconst items = [\r\n  {\r\n    title: "Is it accessible?",\r\n    content: "Yes. It adheres to the WAI-ARIA design pattern.",\r\n  },\r\n  {\r\n    title: "Is it styled?",\r\n    content:\r\n      "Yes. It comes with default styles that matches the other components\' aesthetic.",\r\n  },\r\n  {\r\n    title: "Is it animated?",\r\n    content:\r\n      "Yes. It\'s animated by default, but you can disable it if you prefer.",\r\n  },\r\n];\r\n\r\nexport default function AccordionBox() {\r\n  return (\r\n    <Accordion type=\'single\' collapsible className=\'max-w-lg my-4 w-full\'>\r\n      {items.map(({ title, content }, index) => (\r\n        <AccordionItem\r\n          key={index}\r\n          value={`item-${index}`}\r\n          className=\'border border-b-0 last:border-b first:rounded-t-md last:rounded-b-md px-4\'\r\n        >\r\n          <AccordionTrigger>{title}</AccordionTrigger>\r\n          <AccordionContent>{content}</AccordionContent>\r\n        </AccordionItem>\r\n      ))}\r\n    </Accordion>\r\n  );\r\n}\r\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/snippets/accordion/accordion-box.tsx"),
      ),
    },

    "accordion-contained": {
      name: "accordion-contained",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/accordion/accordion-contained.tsx",
          content:
            'import {\r\n  Accordion,\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n} from "@/components/ui/accordion";\r\n\r\nconst items = [\r\n  {\r\n    title: "Is it accessible?",\r\n    content: "Yes. It adheres to the WAI-ARIA design pattern.",\r\n  },\r\n  {\r\n    title: "Is it styled?",\r\n    content:\r\n      "Yes. It comes with default styles that matches the other components\' aesthetic.",\r\n  },\r\n  {\r\n    title: "Is it animated?",\r\n    content:\r\n      "Yes. It\'s animated by default, but you can disable it if you prefer.",\r\n  },\r\n];\r\n\r\nexport default function AccordionContained() {\r\n  return (\r\n    <Accordion\r\n      type=\'single\'\r\n      collapsible\r\n      className=\'max-w-lg my-4 w-full space-y-2\'\r\n    >\r\n      {items.map(({ title, content }, index) => (\r\n        <AccordionItem\r\n          key={index}\r\n          value={`item-${index}`}\r\n          className=\'border-none rounded-md px-4 bg-secondary\'\r\n        >\r\n          <AccordionTrigger>{title}</AccordionTrigger>\r\n          <AccordionContent>{content}</AccordionContent>\r\n        </AccordionItem>\r\n      ))}\r\n    </Accordion>\r\n  );\r\n}\r\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/accordion/accordion-contained.tsx"
          ),
      ),
    },

    "accordion-default": {
      name: "accordion-default",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/accordion/accordion-default.tsx",
          content:
            'import {\r\n  Accordion,\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n} from "@/components/ui/accordion";\r\n\r\nconst items = [\r\n  {\r\n    title: "Is it accessible?",\r\n    content: "Yes. It adheres to the WAI-ARIA design pattern.",\r\n  },\r\n  {\r\n    title: "Is it styled?",\r\n    content:\r\n      "Yes. It comes with default styles that matches the other components\' aesthetic.",\r\n  },\r\n  {\r\n    title: "Is it animated?",\r\n    content:\r\n      "Yes. It\'s animated by default, but you can disable it if you prefer.",\r\n  },\r\n];\r\n\r\nexport default function AccordionDefaut() {\r\n  return (\r\n    <Accordion type=\'single\' collapsible className=\'max-w-lg my-4 w-full\'>\r\n      {items.map(({ title, content }, index) => (\r\n        <AccordionItem key={index} value={`item-${index}`}>\r\n          <AccordionTrigger>{title}</AccordionTrigger>\r\n          <AccordionContent>{content}</AccordionContent>\r\n        </AccordionItem>\r\n      ))}\r\n    </Accordion>\r\n  );\r\n}\r\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import("@/registry/default/snippets/accordion/accordion-default.tsx"),
      ),
    },

    "accordion-disabled-item": {
      name: "accordion-disabled-item",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/accordion/accordion-disabled-item.tsx",
          content:
            'import { Contrast, Palette, Zap } from "lucide-react";\r\n\r\nimport {\r\n  Accordion,\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n} from "@/components/ui/accordion";\r\n\r\nimport { cn } from "@/lib/utils";\r\n\r\nconst items = [\r\n  {\r\n    title: "Is it accessible?",\r\n    content: "Yes. It adheres to the WAI-ARIA design pattern.",\r\n    icon: Contrast,\r\n  },\r\n  {\r\n    title: "Is it styled?",\r\n    content:\r\n      "Yes. It comes with default styles that matches the other components\' aesthetic.",\r\n    icon: Palette,\r\n    disabled: true,\r\n  },\r\n  {\r\n    title: "Is it animated?",\r\n    content:\r\n      "Yes. It\'s animated by default, but you can disable it if you prefer.",\r\n    icon: Zap,\r\n  },\r\n];\r\n\r\nexport default function AccordionItemDisabled() {\r\n  return (\r\n    <Accordion\r\n      defaultValue=\'item-0\'\r\n      type=\'single\'\r\n      collapsible\r\n      className=\'max-w-lg my-4 w-full\'\r\n    >\r\n      {items.map(({ title, content, icon: Icon, disabled }, index) => (\r\n        <AccordionItem key={index} value={`item-${index}`}>\r\n          <AccordionTrigger\r\n            disabled={disabled}\r\n            className={cn({\r\n              "opacity-50": disabled,\r\n            })}\r\n          >\r\n            <div className=\'flex items-start gap-3\'>\r\n              <Icon />\r\n              {title}\r\n            </div>\r\n          </AccordionTrigger>\r\n          <AccordionContent>{content}</AccordionContent>\r\n        </AccordionItem>\r\n      ))}\r\n    </Accordion>\r\n  );\r\n}\r\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/accordion/accordion-disabled-item.tsx"
          ),
      ),
    },

    "accordion-expand-icon": {
      name: "accordion-expand-icon",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/accordion/accordion-expand-icon.tsx",
          content:
            'import * as AccordionPrimitive from "@radix-ui/react-accordion";\r\nimport { Plus } from "lucide-react";\r\n\r\nimport {\r\n  Accordion,\r\n  AccordionContent,\r\n  AccordionItem,\r\n} from "@/components/ui/accordion";\r\n\r\nconst items = [\r\n  {\r\n    title: "Is it accessible?",\r\n    content: "Yes. It adheres to the WAI-ARIA design pattern.",\r\n  },\r\n  {\r\n    title: "Is it styled?",\r\n    content:\r\n      "Yes. It comes with default styles that matches the other components\' aesthetic.",\r\n  },\r\n  {\r\n    title: "Is it animated?",\r\n    content:\r\n      "Yes. It\'s animated by default, but you can disable it if you prefer.",\r\n  },\r\n];\r\n\r\nexport default function AccordionDefaultOpen() {\r\n  return (\r\n    <Accordion\r\n      defaultValue=\'item-0\'\r\n      type=\'single\'\r\n      collapsible\r\n      className=\'max-w-lg my-4 w-full\'\r\n    >\r\n      {items.map(({ title, content }, index) => (\r\n        <AccordionItem key={index} value={`item-${index}`}>\r\n          <AccordionPrimitive.Header className=\'flex\'>\r\n            <AccordionPrimitive.Trigger className=\'flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-45\'>\r\n              {title}\r\n              <Plus className=\'h-5 w-5 shrink-0 text-muted-foreground transition-transform duration-200\' />\r\n            </AccordionPrimitive.Trigger>\r\n          </AccordionPrimitive.Header>\r\n          <AccordionContent>{content}</AccordionContent>\r\n        </AccordionItem>\r\n      ))}\r\n    </Accordion>\r\n  );\r\n}\r\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/accordion/accordion-expand-icon.tsx"
          ),
      ),
    },

    "accordion-highlight-active-item": {
      name: "accordion-highlight-active-item",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/accordion/accordion-highlight-active-item.tsx",
          content:
            'import {\r\n  Accordion,\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n} from "@/components/ui/accordion";\r\n\r\nconst items = [\r\n  {\r\n    title: "Is it accessible?",\r\n    content: "Yes. It adheres to the WAI-ARIA design pattern.",\r\n  },\r\n  {\r\n    title: "Is it styled?",\r\n    content:\r\n      "Yes. It comes with default styles that matches the other components\' aesthetic.",\r\n  },\r\n  {\r\n    title: "Is it animated?",\r\n    content:\r\n      "Yes. It\'s animated by default, but you can disable it if you prefer.",\r\n  },\r\n];\r\n\r\nexport default function AccordionHighlightActiveItem() {\r\n  return (\r\n    <Accordion\r\n      defaultValue=\'item-0\'\r\n      type=\'single\'\r\n      collapsible\r\n      className=\'max-w-lg my-4 w-full\'\r\n    >\r\n      {items.map(({ title, content }, index) => (\r\n        <AccordionItem\r\n          key={index}\r\n          value={`item-${index}`}\r\n          className=\'data-[state=open]:border-b-2 data-[state=open]:border-indigo-600 dark:data-[state=open]:border-indigo-500\'\r\n        >\r\n          <AccordionTrigger className=\'data-[state=open]:text-indigo-600 dark:data-[state=open]:text-indigo-500\'>\r\n            {title}\r\n          </AccordionTrigger>\r\n          <AccordionContent>{content}</AccordionContent>\r\n        </AccordionItem>\r\n      ))}\r\n    </Accordion>\r\n  );\r\n}\r\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/accordion/accordion-highlight-active-item.tsx"
          ),
      ),
    },

    "accordion-media-content": {
      name: "accordion-media-content",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/accordion/accordion-media-content.tsx",
          content:
            "import { Contrast, Palette, Zap } from \"lucide-react\";\r\n\r\nimport {\r\n  Accordion,\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n} from \"@/components/ui/accordion\";\r\n\r\nconst items = [\r\n  {\r\n    title: \"Is it accessible?\",\r\n    content: \"Yes. It adheres to the WAI-ARIA design pattern.\",\r\n    icon: Contrast,\r\n  },\r\n  {\r\n    title: \"Is it styled?\",\r\n    content:\r\n      \"Yes. It comes with default styles that matches the other components' aesthetic.\",\r\n    icon: Palette,\r\n  },\r\n  {\r\n    title: \"Is it animated?\",\r\n    content:\r\n      \"Yes. It's animated by default, but you can disable it if you prefer.\",\r\n    icon: Zap,\r\n  },\r\n];\r\n\r\nexport default function AccordionMediaContent() {\r\n  return (\r\n    <Accordion\r\n      defaultValue='item-0'\r\n      type='single'\r\n      collapsible\r\n      className='max-w-lg my-4 w-full'\r\n    >\r\n      {items.map(({ title, content, icon: Icon }, index) => (\r\n        <AccordionItem key={index} value={`item-${index}`}>\r\n          <AccordionTrigger>\r\n            <div className='flex items-start gap-3'>\r\n              <Icon />\r\n              {title}\r\n            </div>\r\n          </AccordionTrigger>\r\n          <AccordionContent>\r\n            {content}\r\n            <div className='mt-4 w-full bg-muted rounded-xl'>\r\n              <img\r\n                src='/svgs/placeholder.svg'\r\n                alt='placeholder'\r\n                className='object-cover aspect-[18/9]'\r\n              />\r\n            </div>\r\n          </AccordionContent>\r\n        </AccordionItem>\r\n      ))}\r\n    </Accordion>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/accordion/accordion-media-content.tsx"
          ),
      ),
    },

    "accordion-multiple-expanded-at-a-time": {
      name: "accordion-multiple-expanded-at-a-time",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/accordion/accordion-multiple-expanded-at-a-time.tsx",
          content:
            'import {\r\n  Accordion,\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n} from "@/components/ui/accordion";\r\n\r\nconst items = [\r\n  {\r\n    title: "Is it accessible?",\r\n    content: "Yes. It adheres to the WAI-ARIA design pattern.",\r\n  },\r\n  {\r\n    title: "Is it styled?",\r\n    content:\r\n      "Yes. It comes with default styles that matches the other components\' aesthetic.",\r\n  },\r\n  {\r\n    title: "Is it animated?",\r\n    content:\r\n      "Yes. It\'s animated by default, but you can disable it if you prefer.",\r\n  },\r\n];\r\n\r\nexport default function AccordionMultipleOpen() {\r\n  return (\r\n    <Accordion\r\n      defaultValue={["item-0", "item-1"]}\r\n      type=\'multiple\'\r\n      className=\'max-w-lg my-4 w-full\'\r\n    >\r\n      {items.map(({ title, content }, index) => (\r\n        <AccordionItem key={index} value={`item-${index}`}>\r\n          <AccordionTrigger>{title}</AccordionTrigger>\r\n          <AccordionContent>{content}</AccordionContent>\r\n        </AccordionItem>\r\n      ))}\r\n    </Accordion>\r\n  );\r\n}\r\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/accordion/accordion-multiple-expanded-at-a-time.tsx"
          ),
      ),
    },

    "accordion-outline": {
      name: "accordion-outline",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/accordion/accordion-outline.tsx",
          content:
            'import {\r\n  Accordion,\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n} from "@/components/ui/accordion";\r\n\r\nconst items = [\r\n  {\r\n    title: "Is it accessible?",\r\n    content: "Yes. It adheres to the WAI-ARIA design pattern.",\r\n  },\r\n  {\r\n    title: "Is it styled?",\r\n    content:\r\n      "Yes. It comes with default styles that matches the other components\' aesthetic.",\r\n  },\r\n  {\r\n    title: "Is it animated?",\r\n    content:\r\n      "Yes. It\'s animated by default, but you can disable it if you prefer.",\r\n  },\r\n];\r\n\r\nexport default function AccordionOutline() {\r\n  return (\r\n    <Accordion\r\n      type=\'single\'\r\n      collapsible\r\n      className=\'max-w-lg my-4 w-full space-y-2\'\r\n    >\r\n      {items.map(({ title, content }, index) => (\r\n        <AccordionItem\r\n          key={index}\r\n          value={`item-${index}`}\r\n          className=\'border rounded-md px-4\'\r\n        >\r\n          <AccordionTrigger>{title}</AccordionTrigger>\r\n          <AccordionContent>{content}</AccordionContent>\r\n        </AccordionItem>\r\n      ))}\r\n    </Accordion>\r\n  );\r\n}\r\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import("@/registry/default/snippets/accordion/accordion-outline.tsx"),
      ),
    },

    "accordion-tabs": {
      name: "accordion-tabs",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/accordion/accordion-tabs.tsx",
          content:
            'import {\r\n  Accordion,\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n} from "@/components/ui/accordion";\r\n\r\nconst items = [\r\n  {\r\n    title: "Is it accessible?",\r\n    content: "Yes. It adheres to the WAI-ARIA design pattern.",\r\n  },\r\n  {\r\n    title: "Is it styled?",\r\n    content:\r\n      "Yes. It comes with default styles that matches the other components\' aesthetic.",\r\n  },\r\n  {\r\n    title: "Is it animated?",\r\n    content:\r\n      "Yes. It\'s animated by default, but you can disable it if you prefer.",\r\n  },\r\n];\r\n\r\nexport default function AccordionTabs() {\r\n  return (\r\n    <Accordion\r\n      type=\'single\'\r\n      collapsible\r\n      defaultValue=\'item-0\'\r\n      className=\'max-w-lg my-4 w-full space-y-2\'\r\n    >\r\n      {items.map(({ title, content }, index) => (\r\n        <AccordionItem\r\n          key={index}\r\n          value={`item-${index}`}\r\n          className=\'border-none rounded-md px-4 data-[state=open]:bg-secondary\'\r\n        >\r\n          <AccordionTrigger className=\'data-[state=closed]:py-2\'>\r\n            {title}\r\n          </AccordionTrigger>\r\n          <AccordionContent>{content}</AccordionContent>\r\n        </AccordionItem>\r\n      ))}\r\n    </Accordion>\r\n  );\r\n}\r\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import("@/registry/default/snippets/accordion/accordion-tabs.tsx"),
      ),
    },

    "accordion-with-icon": {
      name: "accordion-with-icon",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/accordion/accordion-with-icon.tsx",
          content:
            'import { Contrast, Palette, Zap } from "lucide-react";\r\n\r\nimport {\r\n  Accordion,\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n} from "@/components/ui/accordion";\r\n\r\nconst items = [\r\n  {\r\n    title: "Is it accessible?",\r\n    content: "Yes. It adheres to the WAI-ARIA design pattern.",\r\n    icon: Contrast,\r\n  },\r\n  {\r\n    title: "Is it styled?",\r\n    content:\r\n      "Yes. It comes with default styles that matches the other components\' aesthetic.",\r\n    icon: Palette,\r\n  },\r\n  {\r\n    title: "Is it animated?",\r\n    content:\r\n      "Yes. It\'s animated by default, but you can disable it if you prefer.",\r\n    icon: Zap,\r\n  },\r\n];\r\n\r\nexport default function AccordionWithIcon() {\r\n  return (\r\n    <Accordion\r\n      defaultValue=\'item-0\'\r\n      type=\'single\'\r\n      collapsible\r\n      className=\'max-w-lg my-4 w-full\'\r\n    >\r\n      {items.map(({ title, content, icon: Icon }, index) => (\r\n        <AccordionItem key={index} value={`item-${index}`}>\r\n          <AccordionTrigger>\r\n            <div className=\'flex items-start gap-3\'>\r\n              <Icon />\r\n              {title}\r\n            </div>\r\n          </AccordionTrigger>\r\n          <AccordionContent>{content}</AccordionContent>\r\n        </AccordionItem>\r\n      ))}\r\n    </Accordion>\r\n  );\r\n}\r\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/accordion/accordion-with-icon.tsx"
          ),
      ),
    },

    "alert-default": {
      name: "alert-default",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/alert/alert-default.tsx",
          content:
            'import { CircleFadingArrowUpIcon } from "lucide-react";\r\n\r\nimport { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";\r\n\r\nexport default function AlertDemo() {\r\n  return (\r\n    <Alert>\r\n      <CircleFadingArrowUpIcon className=\'h-4 w-4\' />\r\n      <AlertTitle>System Notification</AlertTitle>\r\n      <AlertDescription>\r\n        Your application has been updated to the latest version.\r\n      </AlertDescription>\r\n    </Alert>\r\n  );\r\n}\r\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/snippets/alert/alert-default.tsx"),
      ),
    },

    "alert-destructive": {
      name: "alert-destructive",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/alert/alert-destructive.tsx",
          content:
            "import { OctagonAlertIcon } from \"lucide-react\";\r\n\r\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\r\n\r\nexport default function DestructiveAlertDemo() {\r\n  return (\r\n    <Alert variant='destructive'>\r\n      <OctagonAlertIcon className='h-4 w-4' />\r\n      <AlertTitle>Critical Error</AlertTitle>\r\n      <AlertDescription>\r\n        Failed to save changes. Your data may be lost or corrupted.\r\n      </AlertDescription>\r\n    </Alert>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/snippets/alert/alert-destructive.tsx"),
      ),
    },

    "alert-info": {
      name: "alert-info",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/alert/alert-info.tsx",
          content:
            "import { InfoIcon } from \"lucide-react\";\r\n\r\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\r\n\r\nexport default function AlertInfoDemo() {\r\n  return (\r\n    <Alert className='border-cyan-600/50 text-cyan-600 dark:border-cyan-600 [&>svg]:text-cyan-600'>\r\n      <InfoIcon className='h-4 w-4' />\r\n      <AlertTitle>Pro Tip</AlertTitle>\r\n      <AlertDescription>\r\n        You can customize your workspace by accessing the settings panel.\r\n      </AlertDescription>\r\n    </Alert>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/snippets/alert/alert-info.tsx"),
      ),
    },

    "alert-soft": {
      name: "alert-soft",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/alert/alert-soft.tsx",
          content:
            "import {\r\n  CircleFadingArrowUpIcon,\r\n  OctagonAlert,\r\n  ShieldAlert,\r\n} from \"lucide-react\";\r\n\r\nimport { Alert, AlertTitle } from \"@/components/ui/alert\";\r\n\r\nexport default function AlertCalloutDemo() {\r\n  return (\r\n    <div className='w-full space-y-4'>\r\n      <Alert className='bg-emerald-500/10 dark:bg-emerald-600/30 border-none'>\r\n        <CircleFadingArrowUpIcon className='h-4 w-4 !text-emerald-500' />\r\n        <AlertTitle>\r\n          Payment processed successfully. Your order is confirmed.\r\n        </AlertTitle>\r\n      </Alert>\r\n      <Alert className='bg-blue-500/10 dark:bg-blue-600/30 border-none'>\r\n        <CircleFadingArrowUpIcon className='h-4 w-4 !text-blue-500' />\r\n        <AlertTitle>\r\n          Feature preview available. Try our new dashboard layout.\r\n        </AlertTitle>\r\n      </Alert>\r\n      <Alert className='bg-amber-500/10 dark:bg-amber-600/30 border-none'>\r\n        <ShieldAlert className='h-4 w-4 !text-amber-500' />\r\n        <AlertTitle>\r\n          Unusual account activity detected. Verify recent logins.\r\n        </AlertTitle>\r\n      </Alert>\r\n      <Alert className='bg-destructive/10 dark:bg-destructive/20 border-none'>\r\n        <OctagonAlert className='h-4 w-4 !text-destructive' />\r\n        <AlertTitle>\r\n          Connection lost. Service unavailable until connectivity is restored.\r\n        </AlertTitle>\r\n      </Alert>\r\n    </div>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/snippets/alert/alert-soft.tsx"),
      ),
    },

    "alert-success": {
      name: "alert-success",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/alert/alert-success.tsx",
          content:
            "import { CircleCheckBigIcon } from \"lucide-react\";\r\n\r\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\r\n\r\nexport default function AlertSuccessDemo() {\r\n  return (\r\n    <Alert className='border-emerald-600/50 text-emerald-600 dark:border-emerald-600 [&>svg]:text-emerald-600'>\r\n      <CircleCheckBigIcon className='h-4 w-4' />\r\n      <AlertTitle>Account Verified</AlertTitle>\r\n      <AlertDescription>\r\n        Your account has been successfully verified and is now ready to use\r\n      </AlertDescription>\r\n    </Alert>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/snippets/alert/alert-success.tsx"),
      ),
    },

    "alert-warning": {
      name: "alert-warning",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/alert/alert-warning.tsx",
          content:
            "import { TriangleAlertIcon } from \"lucide-react\";\r\n\r\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\r\n\r\nexport default function AlertWarningDemo() {\r\n  return (\r\n    <Alert className='border-amber-500/50 text-amber-500 dark:border-amber-500 [&>svg]:text-amber-500'>\r\n      <TriangleAlertIcon className='h-4 w-4' />\r\n      <AlertTitle>Low Storage Space</AlertTitle>\r\n      <AlertDescription>\r\n        Your device is running low on storage. Please free up space to avoid\r\n        performance issues.\r\n      </AlertDescription>\r\n    </Alert>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/snippets/alert/alert-warning.tsx"),
      ),
    },

    "alert-with-action": {
      name: "alert-with-action",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/alert/alert-with-action.tsx",
          content:
            "\"use client\";\r\n\r\nimport { useState } from \"react\";\r\n\r\nimport { CircleFadingArrowUpIcon, XIcon } from \"lucide-react\";\r\n\r\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\nexport default function AlertWithActionsDemo() {\r\n  const [isAlertVisible, setIsAlertVisible] = useState(true);\r\n\r\n  const showAlert = () => {\r\n    setIsAlertVisible(true);\r\n  };\r\n  const hideAlert = () => {\r\n    setIsAlertVisible(false);\r\n  };\r\n\r\n  return (\r\n    <div className='w-full'>\r\n      {isAlertVisible && (\r\n        <Alert className='flex justify-between items-center pr-2 [&>svg+div]:translate-y-0'>\r\n          <CircleFadingArrowUpIcon className='h-4 w-4' />\r\n          <div className='flex-col justify-center'>\r\n            <AlertTitle>Privacy Policy Update</AlertTitle>\r\n            <AlertDescription>\r\n              We've updated our privacy policy. Please review the changes before\r\n              continuing.\r\n            </AlertDescription>\r\n          </div>\r\n          <Button\r\n            size='icon'\r\n            variant='ghost'\r\n            className='!pl-0'\r\n            onClick={hideAlert}\r\n          >\r\n            <XIcon className='h-5 w-5' />\r\n          </Button>\r\n        </Alert>\r\n      )}\r\n      {!isAlertVisible && (\r\n        <div className='flex justify-center'>\r\n          <Button className='mt-2 mx-auto' onClick={showAlert}>\r\n            Reopen\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/snippets/alert/alert-with-action.tsx"),
      ),
    },

    "alert-with-background": {
      name: "alert-with-background",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/alert/alert-with-background.tsx",
          content:
            "import { OctagonAlertIcon } from \"lucide-react\";\r\n\r\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\r\n\r\nexport default function AlertWithBackgroundDemo() {\r\n  return (\r\n    <Alert\r\n      variant='destructive'\r\n      className='bg-destructive text-destructive-foreground [&>svg]:text-destructive-foreground'\r\n    >\r\n      <OctagonAlertIcon className='h-4 w-4' />\r\n      <AlertTitle>Authentication Failed</AlertTitle>\r\n      <AlertDescription>\r\n        Your session has expired. Please log in again to continue.\r\n      </AlertDescription>\r\n    </Alert>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import("@/registry/default/snippets/alert/alert-with-background.tsx"),
      ),
    },

    "alert-dialog-default": {
      name: "alert-dialog-default",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/alertDialog/alert-dialog-default.tsx",
          content:
            "import {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\nexport default function AlertDialogDefault() {\r\n  return (\r\n    <AlertDialog>\r\n      <AlertDialogTrigger asChild>\r\n        <Button variant='outline'>Default Dialog</Button>\r\n      </AlertDialogTrigger>\r\n      <AlertDialogContent>\r\n        <AlertDialogHeader>\r\n          <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\r\n          <AlertDialogDescription className='text-[15px]'>\r\n            This action cannot be undone. This will permanently delete your\r\n            account and remove your data from our servers.\r\n          </AlertDialogDescription>\r\n        </AlertDialogHeader>\r\n        <AlertDialogFooter>\r\n          <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n          <AlertDialogAction>Continue</AlertDialogAction>\r\n        </AlertDialogFooter>\r\n      </AlertDialogContent>\r\n    </AlertDialog>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/alertDialog/alert-dialog-default.tsx"
          ),
      ),
    },

    "alert-dialog-destructive": {
      name: "alert-dialog-destructive",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/alertDialog/alert-dialog-destructive.tsx",
          content:
            "import { OctagonAlert } from \"lucide-react\";\r\n\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport { Button, buttonVariants } from \"@/components/ui/button\";\r\n\r\nexport default function AlertDialogDestructive() {\r\n  return (\r\n    <AlertDialog>\r\n      <AlertDialogTrigger asChild>\r\n        <Button variant='outline'>\r\n          <OctagonAlert />\r\n          Destructive\r\n        </Button>\r\n      </AlertDialogTrigger>\r\n      <AlertDialogContent>\r\n        <AlertDialogHeader className='items-center'>\r\n          <AlertDialogTitle>\r\n            <div className='mb-2 mx-auto flex h-14 w-14 items-center justify-center rounded-full bg-destructive/10'>\r\n              <OctagonAlert className='h-7 w-7 text-destructive' />\r\n            </div>\r\n            Are you absolutely sure?\r\n          </AlertDialogTitle>\r\n          <AlertDialogDescription className='text-[15px] text-center'>\r\n            This action cannot be undone. This will permanently delete your\r\n            account and remove your data from our servers.\r\n          </AlertDialogDescription>\r\n        </AlertDialogHeader>\r\n        <AlertDialogFooter className='mt-2 sm:justify-center'>\r\n          <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n          <AlertDialogAction\r\n            className={buttonVariants({ variant: \"destructive\" })}\r\n          >\r\n            Continue\r\n          </AlertDialogAction>\r\n        </AlertDialogFooter>\r\n      </AlertDialogContent>\r\n    </AlertDialog>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/alertDialog/alert-dialog-destructive.tsx"
          ),
      ),
    },

    "alert-dialog-info": {
      name: "alert-dialog-info",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/alertDialog/alert-dialog-info.tsx",
          content:
            "import { CircleFadingArrowUp, Rocket } from \"lucide-react\";\r\n\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\nexport default function AlertDialogInfo() {\r\n  return (\r\n    <AlertDialog>\r\n      <AlertDialogTrigger asChild>\r\n        <Button variant='outline'>\r\n          <CircleFadingArrowUp />\r\n          Info Dialog\r\n        </Button>\r\n      </AlertDialogTrigger>\r\n      <AlertDialogContent>\r\n        <AlertDialogHeader>\r\n          <div className='mx-auto sm:mx-0 mb-4 flex h-9 w-9 items-center justify-center rounded-full bg-primary/10'>\r\n            <CircleFadingArrowUp className='h-[18px] w-[18px] text-primary' />\r\n          </div>\r\n          <AlertDialogTitle className='text-2xl font-bold tracking-tight'>\r\n            New Software Update Available\r\n          </AlertDialogTitle>\r\n          <AlertDialogDescription className='!mt-3 text-[15px]'>\r\n            A new software update is available for your device. Please update to\r\n            the latest version to continue using the app.\r\n          </AlertDialogDescription>\r\n          <div className='!mt-6 flex flex-wrap gap-2'>\r\n            <Badge variant='outline' className='py-1'>\r\n              Faster Performance\r\n            </Badge>\r\n            <Badge variant='outline' className='py-1'>\r\n              Advanced Blocks\r\n            </Badge>\r\n            <Badge variant='outline' className='py-1'>\r\n              Customized Components\r\n            </Badge>\r\n            <Badge variant='outline' className='py-1'>\r\n              UI Revamp\r\n            </Badge>\r\n            <Badge variant='outline' className='py-1'>\r\n              Security Improvements\r\n            </Badge>\r\n            <Badge variant='outline' className='py-1'>\r\n              Other Improvements\r\n            </Badge>\r\n            <Badge variant='outline' className='py-1'>\r\n              Bug Fixes\r\n            </Badge>\r\n            <Badge variant='outline' className='py-1'>\r\n              + much more\r\n            </Badge>\r\n          </div>\r\n        </AlertDialogHeader>\r\n        <AlertDialogFooter className='mt-4'>\r\n          <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n          <AlertDialogAction>\r\n            <Rocket /> Update Now\r\n          </AlertDialogAction>\r\n        </AlertDialogFooter>\r\n      </AlertDialogContent>\r\n    </AlertDialog>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/alertDialog/alert-dialog-info.tsx"
          ),
      ),
    },

    "alert-dialog-success": {
      name: "alert-dialog-success",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/alertDialog/alert-dialog-success.tsx",
          content:
            "import { CheckCircle } from \"lucide-react\";\r\n\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport { Button, buttonVariants } from \"@/components/ui/button\";\r\n\r\nexport default function AlertDialogSuccess() {\r\n  return (\r\n    <AlertDialog>\r\n      <AlertDialogTrigger asChild>\r\n        <Button variant='outline'>\r\n          <CheckCircle />\r\n          Success Dialog\r\n        </Button>\r\n      </AlertDialogTrigger>\r\n      <AlertDialogContent>\r\n        <AlertDialogHeader className='items-center'>\r\n          <AlertDialogTitle>\r\n            <div className='mb-2 mx-auto flex h-14 w-14 items-center justify-center rounded-full bg-success/10'>\r\n              <CheckCircle className='h-7 w-7 text-success' />\r\n            </div>\r\n            Success!\r\n          </AlertDialogTitle>\r\n          <AlertDialogDescription className='text-[15px] text-center'>\r\n            Your account has been successfully created. You can now log in and\r\n            start using our services.\r\n          </AlertDialogDescription>\r\n        </AlertDialogHeader>\r\n        <AlertDialogFooter className='mt-2 sm:justify-center'>\r\n          <AlertDialogCancel>Close</AlertDialogCancel>\r\n          <AlertDialogAction className={buttonVariants({ variant: \"success\" })}>\r\n            Log In\r\n          </AlertDialogAction>\r\n        </AlertDialogFooter>\r\n      </AlertDialogContent>\r\n    </AlertDialog>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/alertDialog/alert-dialog-success.tsx"
          ),
      ),
    },

    "alert-dialog-warning": {
      name: "alert-dialog-warning",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/alertDialog/alert-dialog-warning.tsx",
          content:
            "import { OctagonAlert } from \"lucide-react\";\r\n\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport { Button, buttonVariants } from \"@/components/ui/button\";\r\n\r\nexport default function AlertDialogWarning() {\r\n  return (\r\n    <AlertDialog>\r\n      <AlertDialogTrigger asChild>\r\n        <Button variant='outline'>\r\n          <OctagonAlert />\r\n          Warning Dialog\r\n        </Button>\r\n      </AlertDialogTrigger>\r\n      <AlertDialogContent>\r\n        <AlertDialogHeader className='items-center'>\r\n          <AlertDialogTitle>\r\n            <div className='mb-2 mx-auto flex h-14 w-14 items-center justify-center rounded-full bg-warning/10'>\r\n              <OctagonAlert className='h-7 w-7 text-warning' />\r\n            </div>\r\n            Warning: Proceed with Caution\r\n          </AlertDialogTitle>\r\n          <AlertDialogDescription className='text-[15px] text-center'>\r\n            You are about to perform an action that may have unintended\r\n            consequences. Please ensure you understand the implications before\r\n            proceeding.\r\n          </AlertDialogDescription>\r\n        </AlertDialogHeader>\r\n        <AlertDialogFooter className='mt-2 sm:justify-center'>\r\n          <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n          <AlertDialogAction className={buttonVariants({ variant: \"warning\" })}>\r\n            Proceed\r\n          </AlertDialogAction>\r\n        </AlertDialogFooter>\r\n      </AlertDialogContent>\r\n    </AlertDialog>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/alertDialog/alert-dialog-warning.tsx"
          ),
      ),
    },

    "alert-dialog-with-footer": {
      name: "alert-dialog-with-footer",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/alertDialog/alert-dialog-with-footer.tsx",
          content:
            "import {\r\n  ExternalLink,\r\n  OctagonAlert,\r\n  PanelBottom,\r\n  Trash,\r\n  X,\r\n} from \"lucide-react\";\r\n\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport { Button, buttonVariants } from \"@/components/ui/button\";\r\n\r\nexport default function AlertDialogWithFooter() {\r\n  return (\r\n    <AlertDialog>\r\n      <AlertDialogTrigger asChild>\r\n        <Button variant='outline'>\r\n          <PanelBottom />\r\n          With Footer\r\n        </Button>\r\n      </AlertDialogTrigger>\r\n      <AlertDialogContent className='overflow-hidden'>\r\n        <AlertDialogHeader className='pb-4'>\r\n          <AlertDialogTitle>\r\n            <div className='mx-auto sm:mx-0 mb-4 flex h-9 w-9 items-center justify-center rounded-full bg-destructive/10'>\r\n              <OctagonAlert className='h-5 w-5 text-destructive' />\r\n            </div>\r\n            Are you absolutely sure?\r\n          </AlertDialogTitle>\r\n          <AlertDialogDescription className='text-[15px]'>\r\n            This action cannot be undone. This will permanently delete your\r\n            account and remove your data from our servers.\r\n          </AlertDialogDescription>\r\n        </AlertDialogHeader>\r\n        <AlertDialogFooter className='border-t -mx-6 -mb-6 px-6 py-5'>\r\n          <Button\r\n            variant='link'\r\n            className='-ml-3 mr-auto text-muted-foreground'\r\n          >\r\n            Learn more <ExternalLink />\r\n          </Button>\r\n          <AlertDialogCancel>\r\n            <X /> Cancel\r\n          </AlertDialogCancel>\r\n          <AlertDialogAction\r\n            className={buttonVariants({ variant: \"destructive\" })}\r\n          >\r\n            <Trash />\r\n            Continue\r\n          </AlertDialogAction>\r\n        </AlertDialogFooter>\r\n      </AlertDialogContent>\r\n    </AlertDialog>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/alertDialog/alert-dialog-with-footer.tsx"
          ),
      ),
    },

    "alert-dialog-with-header": {
      name: "alert-dialog-with-header",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/alertDialog/alert-dialog-with-header.tsx",
          content:
            "import * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\";\r\nimport { OctagonAlert, PanelTop, X } from \"lucide-react\";\r\n\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport { Button, buttonVariants } from \"@/components/ui/button\";\r\n\r\nexport default function AlertDialogWithHeader() {\r\n  return (\r\n    <AlertDialog>\r\n      <AlertDialogTrigger asChild>\r\n        <Button variant='outline'>\r\n          <PanelTop />\r\n          With Header\r\n        </Button>\r\n      </AlertDialogTrigger>\r\n      <AlertDialogContent>\r\n        <div className='-mt-3 -mx-6 border-b pb-3 px-6 flex justify-between items-center'>\r\n          <AlertDialogTitle>Delete Account</AlertDialogTitle>\r\n          <AlertDialogPrimitive.Cancel\r\n            className={buttonVariants({\r\n              variant: \"ghost\",\r\n              size: \"icon\",\r\n              className: \"!h-7 !w-7\",\r\n            })}\r\n          >\r\n            <X />\r\n          </AlertDialogPrimitive.Cancel>\r\n        </div>\r\n        <AlertDialogHeader className='pt-2'>\r\n          <AlertDialogTitle>\r\n            <div className='mx-auto sm:mx-0 mb-4 flex h-9 w-9 items-center justify-center rounded-full bg-destructive/10'>\r\n              <OctagonAlert className='h-5 w-5 text-destructive' />\r\n            </div>\r\n            Are you absolutely sure?\r\n          </AlertDialogTitle>\r\n          <AlertDialogDescription className='text-[15px]'>\r\n            This action cannot be undone. This will permanently delete your\r\n            account and remove your data from our servers.\r\n          </AlertDialogDescription>\r\n        </AlertDialogHeader>\r\n        <AlertDialogFooter className='mt-2'>\r\n          <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n          <AlertDialogAction>Continue</AlertDialogAction>\r\n        </AlertDialogFooter>\r\n      </AlertDialogContent>\r\n    </AlertDialog>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/alertDialog/alert-dialog-with-header.tsx"
          ),
      ),
    },

    "alert-dialog-with-icon": {
      name: "alert-dialog-with-icon",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/alertDialog/alert-dialog-with-icon.tsx",
          content:
            "import { Combine, OctagonAlert } from \"lucide-react\";\r\n\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\nexport default function AlertDialogWithIcon() {\r\n  return (\r\n    <AlertDialog>\r\n      <AlertDialogTrigger asChild>\r\n        <Button variant='outline'>\r\n          <Combine />\r\n          With Icon\r\n        </Button>\r\n      </AlertDialogTrigger>\r\n      <AlertDialogContent>\r\n        <AlertDialogHeader>\r\n          <AlertDialogTitle>\r\n            <div className='mx-auto sm:mx-0 mb-4 flex h-9 w-9 items-center justify-center rounded-full bg-destructive/10'>\r\n              <OctagonAlert className='h-5 w-5 text-destructive' />\r\n            </div>\r\n            Are you absolutely sure?\r\n          </AlertDialogTitle>\r\n          <AlertDialogDescription className='text-[15px]'>\r\n            This action cannot be undone. This will permanently delete your\r\n            account and remove your data from our servers.\r\n          </AlertDialogDescription>\r\n        </AlertDialogHeader>\r\n        <AlertDialogFooter>\r\n          <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n          <AlertDialogAction>Continue</AlertDialogAction>\r\n        </AlertDialogFooter>\r\n      </AlertDialogContent>\r\n    </AlertDialog>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/alertDialog/alert-dialog-with-icon.tsx"
          ),
      ),
    },

    "avatar-default": {
      name: "avatar-default",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/avatar/avatar-default.tsx",
          content:
            "import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\n\r\nexport default function AvatarDefault() {\r\n  return (\r\n    <Avatar>\r\n      <AvatarImage\r\n        src='http://github.com/phamhuulocforwork.png'\r\n        alt='@phamhuulocforwork'\r\n      />\r\n      <AvatarFallback>HL</AvatarFallback>\r\n    </Avatar>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/snippets/avatar/avatar-default.tsx"),
      ),
    },

    "avatar-group-max": {
      name: "avatar-group-max",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/avatar/avatar-group-max.tsx",
          content:
            "import * as React from \"react\";\r\n\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ntype AvatarProps = React.ComponentProps<typeof Avatar>;\r\n\r\ninterface AvatarGroupProps extends React.ComponentProps<\"div\"> {\r\n  children: React.ReactElement<AvatarProps>[];\r\n  max?: number;\r\n}\r\n\r\nconst AvatarGroup = ({\r\n  children,\r\n  max,\r\n  className,\r\n  ...props\r\n}: AvatarGroupProps) => {\r\n  const totalAvatars = React.Children.count(children);\r\n  const displayedAvatars = React.Children.toArray(children)\r\n    .slice(0, max)\r\n    .reverse();\r\n  const remainingAvatars = max ? Math.max(totalAvatars - max, 1) : 0;\r\n\r\n  return (\r\n    <div\r\n      className={cn(\"flex items-center flex-row-reverse\", className)}\r\n      {...props}\r\n    >\r\n      {remainingAvatars > 0 && (\r\n        <Avatar className='-ml-2 hover:z-10 relative ring-2 ring-background'>\r\n          <AvatarFallback className='bg-muted-foreground text-white'>\r\n            +{remainingAvatars}\r\n          </AvatarFallback>\r\n        </Avatar>\r\n      )}\r\n      {displayedAvatars.map((avatar, index) => {\r\n        if (!React.isValidElement(avatar)) return null;\r\n\r\n        return (\r\n          <div key={index} className='-ml-2 hover:z-10 relative'>\r\n            {React.cloneElement(avatar as React.ReactElement<AvatarProps>, {\r\n              className: \"ring-2 ring-background\",\r\n            })}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function AvatarGroupMaxAvatar() {\r\n  return (\r\n    <AvatarGroup className='flex items-center' max={3}>\r\n      <Avatar className='-ml-2 first:ml-0 cursor-pointer'>\r\n        <AvatarImage\r\n          src='http://github.com/phamhuulocforwork.png'\r\n          alt='@phamhuulocforwork'\r\n        />\r\n        <AvatarFallback className='bg-indigo-500 text-white'>HL</AvatarFallback>\r\n      </Avatar>\r\n      <Avatar className='-ml-2 first:ml-0 cursor-pointer'>\r\n        <AvatarFallback className='bg-green-600 text-white'>VN</AvatarFallback>\r\n      </Avatar>\r\n      <Avatar className='-ml-2 first:ml-0 cursor-pointer'>\r\n        <AvatarFallback className='bg-red-500 text-white'>AB</AvatarFallback>\r\n      </Avatar>\r\n      <Avatar className='-ml-2 first:ml-0 cursor-pointer'>\r\n        <AvatarFallback className='bg-indigo-500 text-white'>VK</AvatarFallback>\r\n      </Avatar>\r\n      <Avatar className='-ml-2 first:ml-0 cursor-pointer'>\r\n        <AvatarFallback className='bg-orange-500 text-white'>RS</AvatarFallback>\r\n      </Avatar>\r\n    </AvatarGroup>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/snippets/avatar/avatar-group-max.tsx"),
      ),
    },

    "avatar-group": {
      name: "avatar-group",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/avatar/avatar-group.tsx",
          content:
            "import * as React from \"react\";\r\n\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ntype AvatarProps = React.ComponentProps<typeof Avatar>;\r\n\r\ninterface AvatarGroupProps extends React.ComponentProps<\"div\"> {\r\n  children: React.ReactElement<AvatarProps>[];\r\n  max?: number;\r\n}\r\n\r\nconst AvatarGroupItem = ({\r\n  children,\r\n  max,\r\n  className,\r\n  ...props\r\n}: AvatarGroupProps) => {\r\n  const totalAvatars = React.Children.count(children);\r\n  const displayedAvatars = React.Children.toArray(children)\r\n    .slice(0, max)\r\n    .reverse();\r\n  const remainingAvatars = max ? Math.max(totalAvatars - max, 1) : 0;\r\n\r\n  return (\r\n    <div\r\n      className={cn(\"flex items-center flex-row-reverse\", className)}\r\n      {...props}\r\n    >\r\n      {remainingAvatars > 0 && (\r\n        <Avatar className='-ml-2 hover:z-10 relative ring-2 ring-background'>\r\n          <AvatarFallback className='bg-muted-foreground text-white'>\r\n            +{remainingAvatars}\r\n          </AvatarFallback>\r\n        </Avatar>\r\n      )}\r\n      {displayedAvatars.map((avatar, index) => {\r\n        if (!React.isValidElement(avatar)) return null;\r\n\r\n        return (\r\n          <div key={index} className='-ml-2 hover:z-10 relative'>\r\n            {React.cloneElement(avatar as React.ReactElement<AvatarProps>, {\r\n              className: \"ring-2 ring-background\",\r\n            })}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function AvatarGroup() {\r\n  return (\r\n    <AvatarGroupItem>\r\n      <Avatar className='-ml-2 first:ml-0 cursor-pointer'>\r\n        <AvatarImage\r\n          src='http://github.com/phamhuulocforwork.png'\r\n          alt='@phamhuulocforwork'\r\n        />\r\n        <AvatarFallback className='bg-indigo-500 text-white'>HL</AvatarFallback>\r\n      </Avatar>\r\n      <Avatar className='-ml-2 first:ml-0 cursor-pointer'>\r\n        <AvatarFallback className='bg-green-600 text-white'>VN</AvatarFallback>\r\n      </Avatar>\r\n      <Avatar className='-ml-2 first:ml-0 cursor-pointer'>\r\n        <AvatarFallback className='bg-red-500 text-white'>AB</AvatarFallback>\r\n      </Avatar>\r\n    </AvatarGroupItem>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/snippets/avatar/avatar-group.tsx"),
      ),
    },

    "avatar-hover-card": {
      name: "avatar-hover-card",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/avatar/avatar-hover-card.tsx",
          content:
            "import { CalendarIcon } from \"lucide-react\";\r\n\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport {\r\n  HoverCard,\r\n  HoverCardContent,\r\n  HoverCardTrigger,\r\n} from \"@/components/ui/hover-card\";\r\n\r\nexport default function AvatarHoverCard() {\r\n  return (\r\n    <HoverCard>\r\n      <HoverCardTrigger className='cursor-pointer'>\r\n        <Avatar>\r\n          <AvatarImage\r\n            src='http://github.com/phamhuulocforwork.png'\r\n            alt='@phamhuulocforwork'\r\n          />\r\n          <AvatarFallback>HL</AvatarFallback>\r\n        </Avatar>\r\n      </HoverCardTrigger>\r\n      <HoverCardContent className='w-full max-w-xs'>\r\n        <div className='flex justify-between space-x-4'>\r\n          <Avatar>\r\n            <AvatarImage\r\n              src='http://github.com/phamhuulocforwork.png'\r\n              alt='@phamhuulocforwork'\r\n            />\r\n            <AvatarFallback>HL</AvatarFallback>\r\n          </Avatar>\r\n          <div className='space-y-1'>\r\n            <h4 className='text-sm font-semibold'>@phamhuulocforwork</h4>\r\n            <p className='text-sm'>\r\n              I'm currently studying at University (I stay up late and my hair\r\n              is getting thinner and thinner. Do you think I'm bald? xD)\r\n            </p>\r\n            <div className='flex items-center pt-2'>\r\n              <CalendarIcon className='mr-2 h-4 w-4 opacity-70' />{\" \"}\r\n              <span className='text-xs text-muted-foreground'>\r\n                Joined February 2025\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </HoverCardContent>\r\n    </HoverCard>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import("@/registry/default/snippets/avatar/avatar-hover-card.tsx"),
      ),
    },

    "avatar-shape": {
      name: "avatar-shape",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/avatar/avatar-shape.tsx",
          content:
            "import { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\r\n\r\nexport default function AvatarShape() {\r\n  return (\r\n    <div className='grid gap-5'>\r\n      <div className='flex items-center gap-4'>\r\n        <Avatar className='rounded-none'>\r\n          <AvatarFallback className='rounded-none bg-indigo-500 text-white'>\r\n            CN\r\n          </AvatarFallback>\r\n        </Avatar>\r\n        <Avatar className='rounded-md'>\r\n          <AvatarFallback className='rounded-lg bg-indigo-500 text-white'>\r\n            CN\r\n          </AvatarFallback>\r\n        </Avatar>\r\n        <Avatar className='rounded-full'>\r\n          <AvatarFallback className='rounded-full bg-indigo-500 text-white'>\r\n            CN\r\n          </AvatarFallback>\r\n        </Avatar>\r\n      </div>\r\n      <div className='flex items-center gap-4'>\r\n        <Avatar className='rounded-none'>\r\n          <AvatarFallback className='rounded-none bg-indigo-500/25 text-indigo-500'>\r\n            CN\r\n          </AvatarFallback>\r\n        </Avatar>\r\n        <Avatar className='rounded-md'>\r\n          <AvatarFallback className='rounded-lg bg-indigo-500/25 text-indigo-500'>\r\n            CN\r\n          </AvatarFallback>\r\n        </Avatar>\r\n        <Avatar className='rounded-full'>\r\n          <AvatarFallback className='rounded-full bg-indigo-500/25 text-indigo-500'>\r\n            CN\r\n          </AvatarFallback>\r\n        </Avatar>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/snippets/avatar/avatar-shape.tsx"),
      ),
    },

    "avatar-with-ring": {
      name: "avatar-with-ring",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/avatar/avatar-with-ring.tsx",
          content:
            "import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\n\r\nexport default function AvatarWithRing() {\r\n  return (\r\n    <Avatar className='ring-2 ring-green-500 ring-offset-[3px] ring-offset-background'>\r\n      <AvatarImage\r\n        src='http://github.com/phamhuulocforwork.png'\r\n        alt='@phamhuulocforwork'\r\n      />\r\n      <AvatarFallback>HL</AvatarFallback>\r\n    </Avatar>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/snippets/avatar/avatar-with-ring.tsx"),
      ),
    },

    "avatar-with-status": {
      name: "avatar-with-status",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/avatar/avatar-with-status.tsx",
          content:
            "import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\n\r\nexport default function AvatarWithStatus() {\r\n  return (\r\n    <div className='flex items-center gap-3'>\r\n      {/* Online */}\r\n      <div className='relative'>\r\n        <Avatar>\r\n          <AvatarImage\r\n            src='http://github.com/phamhuulocforwork.png'\r\n            alt='@phamhuulocforwork'\r\n          />\r\n          <AvatarFallback>CN</AvatarFallback>\r\n        </Avatar>\r\n        <div className='h-2.5 w-2.5 ring-[2px] ring-background rounded-full bg-green-500 absolute bottom-0 right-0'></div>\r\n      </div>\r\n\r\n      {/* DND */}\r\n      <div className='relative'>\r\n        <Avatar>\r\n          <AvatarImage\r\n            src='http://github.com/phamhuulocforwork.png'\r\n            alt='@phamhuulocforwork'\r\n          />\r\n          <AvatarFallback>CN</AvatarFallback>\r\n        </Avatar>\r\n        <div className='h-2.5 w-2.5 ring-[2px] ring-background rounded-full bg-red-500 absolute bottom-0 right-0'></div>\r\n      </div>\r\n\r\n      {/* Busy */}\r\n      <div className='relative'>\r\n        <Avatar>\r\n          <AvatarImage\r\n            src='http://github.com/phamhuulocforwork.png'\r\n            alt='@phamhuulocforwork'\r\n          />\r\n          <AvatarFallback>CN</AvatarFallback>\r\n        </Avatar>\r\n        <div className='h-2.5 w-2.5 ring-[2px] ring-background rounded-full bg-yellow-500 absolute bottom-0 right-0'></div>\r\n      </div>\r\n\r\n      {/* Offline */}\r\n      <div className='relative'>\r\n        <Avatar>\r\n          <AvatarImage\r\n            src='http://github.com/phamhuulocforwork.png'\r\n            alt='@phamhuulocforwork'\r\n          />\r\n          <AvatarFallback>CN</AvatarFallback>\r\n        </Avatar>\r\n        <div className='h-2.5 w-2.5 ring-[2px] ring-background border-2 border-muted-foreground rounded-full bg-background absolute bottom-0 right-0'></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import("@/registry/default/snippets/avatar/avatar-with-status.tsx"),
      ),
    },

    "avatar-with-text": {
      name: "avatar-with-text",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/avatar/avatar-with-text.tsx",
          content:
            "import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\n\r\nexport default function AvatarWithText() {\r\n  return (\r\n    <div className='flex gap-3'>\r\n      <Avatar>\r\n        <AvatarImage\r\n          src='http://github.com/phamhuulocforwork.png'\r\n          alt='@phamhuulocforwork'\r\n        />\r\n        <AvatarFallback>CN</AvatarFallback>\r\n      </Avatar>\r\n      <div className='flex flex-col'>\r\n        <span className='font-semibold tracking-tight'>Pham Huu Loc</span>\r\n        <span className='leading-none text-sm text-muted-foreground'>\r\n          phamhuulocforwork@gmail.com\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/snippets/avatar/avatar-with-text.tsx"),
      ),
    },

    "badge-default": {
      name: "badge-default",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/badge/badge-default.tsx",
          content:
            'import { Badge } from "@/components/ui/badge";\r\n\r\nexport default function BadgeDefault() {\r\n  return <Badge>Badge</Badge>;\r\n}\r\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/snippets/badge/badge-default.tsx"),
      ),
    },

    "badge-destructive": {
      name: "badge-destructive",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/badge/badge-destructive.tsx",
          content:
            "import { Badge } from \"@/components/ui/badge\";\r\n\r\nexport default function BadgeDestructive() {\r\n  return <Badge variant='destructive'>Destructive</Badge>;\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/snippets/badge/badge-destructive.tsx"),
      ),
    },

    "badge-outline": {
      name: "badge-outline",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/badge/badge-outline.tsx",
          content:
            "import { Badge } from \"@/components/ui/badge\";\r\n\r\nexport default function BadgeOutline() {\r\n  return <Badge variant='outline'>Outline</Badge>;\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/snippets/badge/badge-outline.tsx"),
      ),
    },

    "badge-rounded": {
      name: "badge-rounded",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/badge/badge-rounded.tsx",
          content:
            'import React from "react";\r\n\r\nimport { Badge } from "@/components/ui/badge";\r\n\r\nexport default function BadgeRounded() {\r\n  return <Badge className=\'rounded-full\'>Rounded</Badge>;\r\n}\r\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/snippets/badge/badge-rounded.tsx"),
      ),
    },

    "badge-secondary": {
      name: "badge-secondary",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/badge/badge-secondary.tsx",
          content:
            "import { Badge } from \"@/components/ui/badge\";\r\n\r\nexport default function BadgeSecondary() {\r\n  return <Badge variant='secondary'>Secondary</Badge>;\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/snippets/badge/badge-secondary.tsx"),
      ),
    },

    "badge-soft": {
      name: "badge-soft",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/badge/badge-soft.tsx",
          content:
            "import { Badge } from \"@/components/ui/badge\";\r\n\r\nexport default function SoftBadge() {\r\n  return (\r\n    <div className='flex flex-col gap-3 flex-wrap'>\r\n      <Badge className='bg-amber-600/10 dark:bg-amber-600/20 hover:bg-amber-600/10 text-amber-500 shadow-none rounded-full'>\r\n        <div className='h-1.5 w-1.5 rounded-full bg-amber-500 mr-2' /> In\r\n        Progress\r\n      </Badge>\r\n      <Badge className='bg-red-600/10 dark:bg-red-600/20 hover:bg-red-600/10 text-red-500 shadow-none rounded-full'>\r\n        <div className='h-1.5 w-1.5 rounded-full bg-red-500 mr-2' /> Blocked\r\n      </Badge>\r\n      <Badge className='bg-emerald-600/10 dark:bg-emerald-600/20 hover:bg-emerald-600/10 text-emerald-500 shadow-none rounded-full'>\r\n        <div className='h-1.5 w-1.5 rounded-full bg-emerald-500 mr-2' /> Done\r\n      </Badge>\r\n    </div>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/snippets/badge/badge-soft.tsx"),
      ),
    },

    "badge-status": {
      name: "badge-status",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/badge/badge-status.tsx",
          content:
            "import { Badge } from \"@/components/ui/badge\";\r\n\r\nexport default function StatusBadge() {\r\n  return (\r\n    <div className='flex flex-col gap-3 flex-wrap'>\r\n      <Badge className='bg-amber-600/10 dark:bg-amber-600/20 hover:bg-amber-600/10 text-amber-500 border-amber-600/60 shadow-none rounded-full'>\r\n        <div className='h-1.5 w-1.5 rounded-full bg-amber-500 mr-2' /> In\r\n        Progress\r\n      </Badge>\r\n      <Badge className='bg-red-600/10 dark:bg-red-600/20 hover:bg-red-600/10 text-red-500 border-red-600/60 shadow-none rounded-full'>\r\n        <div className='h-1.5 w-1.5 rounded-full bg-red-500 mr-2' /> Blocked\r\n      </Badge>\r\n      <Badge className='bg-emerald-600/10 dark:bg-emerald-600/20 hover:bg-emerald-600/10 text-emerald-500 border-emerald-600/60 shadow-none rounded-full'>\r\n        <div className='h-1.5 w-1.5 rounded-full bg-emerald-500 mr-2' /> Done\r\n      </Badge>\r\n    </div>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/snippets/badge/badge-status.tsx"),
      ),
    },

    "breadcrumb-default": {
      name: "breadcrumb-default",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/breadcrumb/breadcrumb-default.tsx",
          content:
            "import { HomeIcon } from \"lucide-react\";\r\n\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  BreadcrumbLink,\r\n  BreadcrumbList,\r\n  BreadcrumbPage,\r\n  BreadcrumbSeparator,\r\n} from \"@/components/ui/breadcrumb\";\r\n\r\nconst BreadcrumbDefault = () => {\r\n  return (\r\n    <Breadcrumb>\r\n      <BreadcrumbList>\r\n        <BreadcrumbItem>\r\n          <HomeIcon className='size-4' />\r\n          <BreadcrumbLink href='#'>Home</BreadcrumbLink>\r\n        </BreadcrumbItem>\r\n        <BreadcrumbSeparator />\r\n        <BreadcrumbItem>\r\n          <BreadcrumbLink href='#'>Documents</BreadcrumbLink>\r\n        </BreadcrumbItem>\r\n        <BreadcrumbSeparator />\r\n        <BreadcrumbItem>\r\n          <BreadcrumbPage>Add Document</BreadcrumbPage>\r\n        </BreadcrumbItem>\r\n      </BreadcrumbList>\r\n    </Breadcrumb>\r\n  );\r\n};\r\n\r\nexport default BreadcrumbDefault;\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/breadcrumb/breadcrumb-default.tsx"
          ),
      ),
    },

    "breadcrumb-slash": {
      name: "breadcrumb-slash",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/breadcrumb/breadcrumb-slash.tsx",
          content:
            "import { HomeIcon } from \"lucide-react\";\r\n\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  BreadcrumbLink,\r\n  BreadcrumbList,\r\n  BreadcrumbPage,\r\n  BreadcrumbSeparator,\r\n} from \"@/components/ui/breadcrumb\";\r\n\r\nconst BreadcrumbSlash = () => {\r\n  return (\r\n    <Breadcrumb>\r\n      <BreadcrumbList>\r\n        <BreadcrumbItem>\r\n          <BreadcrumbLink href='#' className='flex items-center gap-2'>\r\n            <HomeIcon className='size-4' />\r\n            Home\r\n          </BreadcrumbLink>\r\n        </BreadcrumbItem>\r\n        <BreadcrumbSeparator> / </BreadcrumbSeparator>\r\n        <BreadcrumbItem>\r\n          <BreadcrumbLink href='#'>Documents</BreadcrumbLink>\r\n        </BreadcrumbItem>\r\n        <BreadcrumbSeparator> / </BreadcrumbSeparator>\r\n        <BreadcrumbItem>\r\n          <BreadcrumbPage>Add Document</BreadcrumbPage>\r\n        </BreadcrumbItem>\r\n      </BreadcrumbList>\r\n    </Breadcrumb>\r\n  );\r\n};\r\n\r\nexport default BreadcrumbSlash;\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import("@/registry/default/snippets/breadcrumb/breadcrumb-slash.tsx"),
      ),
    },

    "breadcrumb-steps": {
      name: "breadcrumb-steps",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/breadcrumb/breadcrumb-steps.tsx",
          content:
            'import { Fragment } from "react";\r\n\r\nimport { Package, ShoppingCart, Store, Truck } from "lucide-react";\r\n\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  BreadcrumbLink,\r\n  BreadcrumbList,\r\n  BreadcrumbPage,\r\n} from "@/components/ui/breadcrumb";\r\n\r\nconst steps = [\r\n  {\r\n    label: "Store",\r\n    href: "#/store",\r\n    icon: Store,\r\n  },\r\n  {\r\n    label: "Delivery Tracking",\r\n    href: "#/delivery-tracking",\r\n    icon: Truck,\r\n  },\r\n  {\r\n    label: "Cart",\r\n    href: "#/cart",\r\n    icon: ShoppingCart,\r\n  },\r\n  {\r\n    label: "Package",\r\n    href: "#/package",\r\n    icon: Package,\r\n    active: true,\r\n  },\r\n];\r\n\r\nexport default function BreadcrumbsSteps() {\r\n  return (\r\n    <Breadcrumb>\r\n      <BreadcrumbList>\r\n        {steps.map((step, index) => (\r\n          <Fragment key={index}>\r\n            <BreadcrumbItem>\r\n              {step.active ? (\r\n                <BreadcrumbPage>\r\n                  <step.icon className=\'h-5 w-5\' />\r\n                </BreadcrumbPage>\r\n              ) : (\r\n                <BreadcrumbLink href={step.href}>\r\n                  <step.icon className=\'h-5 w-5\' />\r\n                </BreadcrumbLink>\r\n              )}\r\n            </BreadcrumbItem>\r\n            {index !== steps.length - 1 && (\r\n              <li\r\n                role=\'presentation\'\r\n                aria-hidden=\'true\'\r\n                className=\'inline-block h-[2px] w-[40px] bg-muted\'\r\n              />\r\n            )}\r\n          </Fragment>\r\n        ))}\r\n      </BreadcrumbList>\r\n    </Breadcrumb>\r\n  );\r\n}\r\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import("@/registry/default/snippets/breadcrumb/breadcrumb-steps.tsx"),
      ),
    },

    "breadcrumb-tab-active": {
      name: "breadcrumb-tab-active",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/breadcrumb/breadcrumb-tab-active.tsx",
          content:
            'import React from "react";\r\n\r\nimport { ChevronsRight } from "lucide-react";\r\n\r\nimport { Badge } from "@/components/ui/badge";\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  BreadcrumbLink,\r\n  BreadcrumbList,\r\n  BreadcrumbPage,\r\n  BreadcrumbSeparator,\r\n} from "@/components/ui/breadcrumb";\r\n\r\nexport default function BreadcrumbTabActive() {\r\n  return (\r\n    <Breadcrumb>\r\n      <BreadcrumbList>\r\n        <BreadcrumbItem>\r\n          <BreadcrumbLink href=\'#\'>Home</BreadcrumbLink>\r\n        </BreadcrumbItem>\r\n        <BreadcrumbSeparator>\r\n          <ChevronsRight />\r\n        </BreadcrumbSeparator>\r\n        <BreadcrumbItem>\r\n          <BreadcrumbLink href=\'#/components\'>Components</BreadcrumbLink>\r\n        </BreadcrumbItem>\r\n        <BreadcrumbSeparator>\r\n          <ChevronsRight />\r\n        </BreadcrumbSeparator>\r\n        <BreadcrumbItem>\r\n          <BreadcrumbPage>\r\n            <Badge className=\'shadow-none rounded-full\'>Breadcrumb</Badge>\r\n          </BreadcrumbPage>\r\n        </BreadcrumbItem>\r\n      </BreadcrumbList>\r\n    </Breadcrumb>\r\n  );\r\n}\r\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/breadcrumb/breadcrumb-tab-active.tsx"
          ),
      ),
    },

    "breadcrumb-with-dropdown": {
      name: "breadcrumb-with-dropdown",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/breadcrumb/breadcrumb-with-dropdown.tsx",
          content:
            "import { ChevronDown, HomeIcon } from \"lucide-react\";\r\n\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  BreadcrumbLink,\r\n  BreadcrumbList,\r\n  BreadcrumbPage,\r\n  BreadcrumbSeparator,\r\n} from \"@/components/ui/breadcrumb\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuLabel,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\n\r\nconst BreadcrumbWithDropdown = () => {\r\n  return (\r\n    <Breadcrumb>\r\n      <BreadcrumbList>\r\n        <BreadcrumbItem>\r\n          <HomeIcon className='size-4' />\r\n          <BreadcrumbLink href='#'>Home</BreadcrumbLink>\r\n        </BreadcrumbItem>\r\n        <BreadcrumbSeparator />\r\n        <BreadcrumbItem>\r\n          <BreadcrumbLink href='#'>Documents</BreadcrumbLink>\r\n        </BreadcrumbItem>\r\n        <BreadcrumbSeparator />\r\n        <BreadcrumbItem>\r\n          <BreadcrumbPage>\r\n            <DropdownMenu>\r\n              <DropdownMenuTrigger className='group flex items-center gap-1'>\r\n                Add Document\r\n                <ChevronDown className='size-4 transition-transform group-data-[state=open]:rotate-180' />\r\n              </DropdownMenuTrigger>\r\n              <DropdownMenuContent align='start'>\r\n                <DropdownMenuLabel>Themes</DropdownMenuLabel>\r\n                <DropdownMenuLabel>Github</DropdownMenuLabel>\r\n                <DropdownMenuLabel>Documentation</DropdownMenuLabel>\r\n              </DropdownMenuContent>\r\n            </DropdownMenu>\r\n          </BreadcrumbPage>\r\n        </BreadcrumbItem>\r\n      </BreadcrumbList>\r\n    </Breadcrumb>\r\n  );\r\n};\r\n\r\nexport default BreadcrumbWithDropdown;\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/breadcrumb/breadcrumb-with-dropdown.tsx"
          ),
      ),
    },

    "breadcrumb-with-icon": {
      name: "breadcrumb-with-icon",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/breadcrumb/breadcrumb-with-icon.tsx",
          content:
            "import { File, Folder, HomeIcon } from \"lucide-react\";\r\n\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  BreadcrumbLink,\r\n  BreadcrumbList,\r\n  BreadcrumbPage,\r\n  BreadcrumbSeparator,\r\n} from \"@/components/ui/breadcrumb\";\r\n\r\nconst BreadcrumbWithIcon = () => {\r\n  return (\r\n    <Breadcrumb>\r\n      <BreadcrumbList>\r\n        <BreadcrumbItem>\r\n          <BreadcrumbLink href='#' className='flex items-center gap-2'>\r\n            <HomeIcon className='size-4' />\r\n            Home\r\n          </BreadcrumbLink>\r\n        </BreadcrumbItem>\r\n        <BreadcrumbSeparator> / </BreadcrumbSeparator>\r\n        <BreadcrumbItem>\r\n          <BreadcrumbLink href='#' className='flex items-center gap-2'>\r\n            <Folder className='size-4' />\r\n            Documents\r\n          </BreadcrumbLink>\r\n        </BreadcrumbItem>\r\n        <BreadcrumbSeparator> / </BreadcrumbSeparator>\r\n        <BreadcrumbItem>\r\n          <BreadcrumbPage className='flex items-center gap-2'>\r\n            <File className='size-4' />\r\n            Add Document\r\n          </BreadcrumbPage>\r\n        </BreadcrumbItem>\r\n      </BreadcrumbList>\r\n    </Breadcrumb>\r\n  );\r\n};\r\n\r\nexport default BreadcrumbWithIcon;\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/breadcrumb/breadcrumb-with-icon.tsx"
          ),
      ),
    },

    "carousel-default": {
      name: "carousel-default",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/carousel/carousel-default.tsx",
          content:
            "import * as React from \"react\";\r\n\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport {\r\n  Carousel,\r\n  CarouselContent,\r\n  CarouselItem,\r\n  CarouselNext,\r\n  CarouselPrevious,\r\n} from \"@/components/ui/carousel\";\r\n\r\nexport default function CarouselDefault() {\r\n  return (\r\n    <Carousel className='w-full max-w-xs'>\r\n      <CarouselContent>\r\n        {Array.from({ length: 5 }).map((_, index) => (\r\n          <CarouselItem key={index}>\r\n            <div className='p-1'>\r\n              <Card>\r\n                <CardContent className='flex aspect-video items-center justify-center p-6'>\r\n                  <span className='text-4xl font-semibold'>{index + 1}</span>\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          </CarouselItem>\r\n        ))}\r\n      </CarouselContent>\r\n      <CarouselPrevious />\r\n      <CarouselNext />\r\n    </Carousel>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import("@/registry/default/snippets/carousel/carousel-default.tsx"),
      ),
    },

    "carousel-multiple-slides": {
      name: "carousel-multiple-slides",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/carousel/carousel-multiple-slides.tsx",
          content:
            "import React from \"react\";\r\n\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport {\r\n  Carousel,\r\n  CarouselContent,\r\n  CarouselItem,\r\n  CarouselNext,\r\n  CarouselPrevious,\r\n} from \"@/components/ui/carousel\";\r\n\r\nexport default function CarouselWithMultipleSlides() {\r\n  return (\r\n    <Carousel\r\n      opts={{\r\n        align: \"start\",\r\n      }}\r\n      className='w-full max-w-sm'\r\n    >\r\n      <CarouselContent>\r\n        {Array.from({ length: 5 }).map((_, index) => (\r\n          <CarouselItem key={index} className='md:basis-1/2 lg:basis-1/3'>\r\n            <div className='p-1'>\r\n              <Card>\r\n                <CardContent className='flex aspect-square items-center justify-center p-6'>\r\n                  <span className='text-3xl font-semibold'>{index + 1}</span>\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          </CarouselItem>\r\n        ))}\r\n      </CarouselContent>\r\n      <CarouselPrevious />\r\n      <CarouselNext />\r\n    </Carousel>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/carousel/carousel-multiple-slides.tsx"
          ),
      ),
    },

    "carousel-slide-status-2": {
      name: "carousel-slide-status-2",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/carousel/carousel-slide-status-2.tsx",
          content:
            "\"use client\";\r\n\r\nimport * as React from \"react\";\r\n\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport {\r\n  Carousel,\r\n  type CarouselApi,\r\n  CarouselContent,\r\n  CarouselItem,\r\n  CarouselNext,\r\n  CarouselPrevious,\r\n} from \"@/components/ui/carousel\";\r\n\r\nexport default function CarouselSlideStatus2() {\r\n  const [api, setApi] = React.useState<CarouselApi>();\r\n  const [current, setCurrent] = React.useState(0);\r\n  const [count, setCount] = React.useState(0);\r\n\r\n  React.useEffect(() => {\r\n    if (!api) {\r\n      return;\r\n    }\r\n\r\n    setCount(api.scrollSnapList().length);\r\n    setCurrent(api.selectedScrollSnap() + 1);\r\n\r\n    api.on(\"select\", () => {\r\n      setCurrent(api.selectedScrollSnap() + 1);\r\n    });\r\n  }, [api]);\r\n\r\n  return (\r\n    <div className='mx-auto max-w-xs'>\r\n      <Carousel setApi={setApi} className='w-full max-w-xs'>\r\n        <CarouselContent>\r\n          {Array.from({ length: 5 }).map((_, index) => (\r\n            <CarouselItem key={index}>\r\n              <Card>\r\n                <CardContent className='flex aspect-video items-center justify-center p-6'>\r\n                  <span className='text-4xl font-semibold'>{index + 1}</span>\r\n                </CardContent>\r\n              </Card>\r\n            </CarouselItem>\r\n          ))}\r\n        </CarouselContent>\r\n        <CarouselPrevious />\r\n        <CarouselNext />\r\n      </Carousel>\r\n      <div className='mt-4 text-center text-sm text-muted-foreground'>\r\n        {current} / {count}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/carousel/carousel-slide-status-2.tsx"
          ),
      ),
    },

    "carousel-slide-status": {
      name: "carousel-slide-status",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/carousel/carousel-slide-status.tsx",
          content:
            "\"use client\";\r\n\r\nimport * as React from \"react\";\r\n\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport {\r\n  Carousel,\r\n  type CarouselApi,\r\n  CarouselContent,\r\n  CarouselItem,\r\n  CarouselNext,\r\n  CarouselPrevious,\r\n} from \"@/components/ui/carousel\";\r\n\r\nexport default function CarouselSlideStatus() {\r\n  const [api, setApi] = React.useState<CarouselApi>();\r\n  const [current, setCurrent] = React.useState(0);\r\n  const [count, setCount] = React.useState(0);\r\n\r\n  React.useEffect(() => {\r\n    if (!api) {\r\n      return;\r\n    }\r\n\r\n    setCount(api.scrollSnapList().length);\r\n    setCurrent(api.selectedScrollSnap() + 1);\r\n\r\n    api.on(\"select\", () => {\r\n      setCurrent(api.selectedScrollSnap() + 1);\r\n    });\r\n  }, [api]);\r\n\r\n  return (\r\n    <div className='mx-auto max-w-xs'>\r\n      <Carousel setApi={setApi} className='w-full max-w-xs'>\r\n        <CarouselContent>\r\n          {Array.from({ length: 5 }).map((_, index) => (\r\n            <CarouselItem key={index}>\r\n              <Card>\r\n                <CardContent className='flex aspect-video items-center justify-center p-6'>\r\n                  <span className='text-4xl font-semibold'>{index + 1}</span>\r\n                </CardContent>\r\n              </Card>\r\n            </CarouselItem>\r\n          ))}\r\n        </CarouselContent>\r\n        <CarouselPrevious />\r\n        <CarouselNext />\r\n      </Carousel>\r\n      <div className='mt-4 text-center text-sm text-muted-foreground'>\r\n        Slide {current} of {count}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/carousel/carousel-slide-status.tsx"
          ),
      ),
    },

    "carousel-vertical": {
      name: "carousel-vertical",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/carousel/carousel-vertical.tsx",
          content:
            "import * as React from \"react\";\r\n\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport {\r\n  Carousel,\r\n  CarouselContent,\r\n  CarouselItem,\r\n  CarouselNext,\r\n  CarouselPrevious,\r\n} from \"@/components/ui/carousel\";\r\n\r\nexport default function CarouselVertical() {\r\n  return (\r\n    <Carousel\r\n      opts={{\r\n        align: \"start\",\r\n      }}\r\n      orientation='vertical'\r\n      className='w-full max-w-xs my-14'\r\n    >\r\n      <CarouselContent className='-mt-1 h-[200px]'>\r\n        {Array.from({ length: 5 }).map((_, index) => (\r\n          <CarouselItem key={index} className='pt-1 md:basis-1/2'>\r\n            <div className='p-1'>\r\n              <Card>\r\n                <CardContent className='flex items-center justify-center p-6'>\r\n                  <span className='text-3xl font-semibold'>{index + 1}</span>\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          </CarouselItem>\r\n        ))}\r\n      </CarouselContent>\r\n      <CarouselPrevious />\r\n      <CarouselNext />\r\n    </Carousel>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import("@/registry/default/snippets/carousel/carousel-vertical.tsx"),
      ),
    },

    "carousel-with-footer": {
      name: "carousel-with-footer",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/carousel/carousel-with-footer.tsx",
          content:
            '"use client";\r\n\r\nimport * as React from "react";\r\n\r\nimport { Card, CardContent } from "@/components/ui/card";\r\nimport {\r\n  Carousel,\r\n  type CarouselApi,\r\n  CarouselContent,\r\n  CarouselItem,\r\n  CarouselNext,\r\n  CarouselPrevious,\r\n} from "@/components/ui/carousel";\r\n\r\nimport { cn } from "@/lib/utils";\r\n\r\nexport default function CarouselWithFooter() {\r\n  const [api, setApi] = React.useState<CarouselApi>();\r\n  const [current, setCurrent] = React.useState(0);\r\n  const [count, setCount] = React.useState(0);\r\n\r\n  React.useEffect(() => {\r\n    if (!api) {\r\n      return;\r\n    }\r\n\r\n    setCount(api.scrollSnapList().length);\r\n    setCurrent(api.selectedScrollSnap() + 1);\r\n\r\n    api.on("select", () => {\r\n      setCurrent(api.selectedScrollSnap() + 1);\r\n    });\r\n  }, [api]);\r\n\r\n  return (\r\n    <div className=\'mx-auto max-w-xs py-4\'>\r\n      <Carousel setApi={setApi} className=\'w-full max-w-xs\'>\r\n        <CarouselContent>\r\n          {Array.from({ length: 5 }).map((_, index) => (\r\n            <CarouselItem key={index}>\r\n              <Card>\r\n                <CardContent className=\'flex aspect-video items-center justify-center p-6\'>\r\n                  <span className=\'text-4xl font-semibold\'>{index + 1}</span>\r\n                </CardContent>\r\n              </Card>\r\n            </CarouselItem>\r\n          ))}\r\n        </CarouselContent>\r\n        <CarouselPrevious className=\'top-[calc(100%+0.5rem)] translate-y-0 left-0\' />\r\n        <CarouselNext className=\'top-[calc(100%+0.5rem)] translate-y-0 left-2 translate-x-full\' />\r\n      </Carousel>\r\n      <div className=\'mt-4 flex items-center justify-end gap-2\'>\r\n        {Array.from({ length: count }).map((_, index) => (\r\n          <button\r\n            key={index}\r\n            onClick={() => api?.scrollTo(index)}\r\n            className={cn("h-3.5 w-3.5 rounded-full border-2", {\r\n              "border-primary": current === index + 1,\r\n            })}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/carousel/carousel-with-footer.tsx"
          ),
      ),
    },

    "carousel-with-pagination": {
      name: "carousel-with-pagination",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/carousel/carousel-with-pagination.tsx",
          content:
            '"use client";\r\n\r\nimport * as React from "react";\r\n\r\nimport { Card, CardContent } from "@/components/ui/card";\r\nimport {\r\n  Carousel,\r\n  type CarouselApi,\r\n  CarouselContent,\r\n  CarouselItem,\r\n  CarouselNext,\r\n  CarouselPrevious,\r\n} from "@/components/ui/carousel";\r\n\r\nimport { cn } from "@/lib/utils";\r\n\r\nexport default function CarouselWithPagination() {\r\n  const [api, setApi] = React.useState<CarouselApi>();\r\n  const [current, setCurrent] = React.useState(0);\r\n  const [count, setCount] = React.useState(0);\r\n\r\n  React.useEffect(() => {\r\n    if (!api) {\r\n      return;\r\n    }\r\n\r\n    setCount(api.scrollSnapList().length);\r\n    setCurrent(api.selectedScrollSnap() + 1);\r\n\r\n    api.on("select", () => {\r\n      setCurrent(api.selectedScrollSnap() + 1);\r\n    });\r\n  }, [api]);\r\n\r\n  return (\r\n    <div className=\'mx-auto max-w-xs\'>\r\n      <Carousel setApi={setApi} className=\'w-full max-w-xs\'>\r\n        <CarouselContent>\r\n          {Array.from({ length: 5 }).map((_, index) => (\r\n            <CarouselItem key={index}>\r\n              <Card>\r\n                <CardContent className=\'flex aspect-video items-center justify-center p-6\'>\r\n                  <span className=\'text-4xl font-semibold\'>{index + 1}</span>\r\n                </CardContent>\r\n              </Card>\r\n            </CarouselItem>\r\n          ))}\r\n        </CarouselContent>\r\n        <CarouselPrevious />\r\n        <CarouselNext />\r\n      </Carousel>\r\n      <div className=\'mt-4 flex items-center justify-center gap-2\'>\r\n        {Array.from({ length: count }).map((_, index) => (\r\n          <button\r\n            key={index}\r\n            onClick={() => api?.scrollTo(index)}\r\n            className={cn("h-3.5 w-3.5 rounded-full border-2", {\r\n              "border-primary": current === index + 1,\r\n            })}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/carousel/carousel-with-pagination.tsx"
          ),
      ),
    },

    "carousel-with-progress": {
      name: "carousel-with-progress",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/carousel/carousel-with-progress.tsx",
          content:
            "\"use client\";\r\n\r\nimport * as React from \"react\";\r\n\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport {\r\n  Carousel,\r\n  type CarouselApi,\r\n  CarouselContent,\r\n  CarouselItem,\r\n  CarouselNext,\r\n  CarouselPrevious,\r\n} from \"@/components/ui/carousel\";\r\nimport { Progress } from \"@/components/ui/progress\";\r\n\r\nexport default function CarouselWithProgress() {\r\n  const [api, setApi] = React.useState<CarouselApi>();\r\n  const [current, setCurrent] = React.useState(0);\r\n  const [count, setCount] = React.useState(0);\r\n\r\n  const progress = (current * 100) / count;\r\n\r\n  React.useEffect(() => {\r\n    if (!api) {\r\n      return;\r\n    }\r\n\r\n    setCount(api.scrollSnapList().length);\r\n    setCurrent(api.selectedScrollSnap() + 1);\r\n\r\n    api.on(\"select\", () => {\r\n      setCurrent(api.selectedScrollSnap() + 1);\r\n    });\r\n  }, [api]);\r\n\r\n  return (\r\n    <div className='mx-auto max-w-xs py-4'>\r\n      <Carousel setApi={setApi} className='w-full max-w-xs'>\r\n        <CarouselContent>\r\n          {Array.from({ length: 5 }).map((_, index) => (\r\n            <CarouselItem key={index}>\r\n              <Card>\r\n                <CardContent className='flex aspect-video items-center justify-center p-6'>\r\n                  <span className='text-4xl font-semibold'>{index + 1}</span>\r\n                </CardContent>\r\n              </Card>\r\n            </CarouselItem>\r\n          ))}\r\n        </CarouselContent>\r\n        <CarouselPrevious className='top-[calc(100%+0.5rem)] translate-y-0 left-0' />\r\n        <CarouselNext className='top-[calc(100%+0.5rem)] translate-y-0 left-2 translate-x-full' />\r\n      </Carousel>\r\n      <Progress value={progress} className='mt-4 w-24 ml-auto' />\r\n    </div>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/carousel/carousel-with-progress.tsx"
          ),
      ),
    },

    "collapsible-default": {
      name: "collapsible-default",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/collapsible/collapsible-default.tsx",
          content:
            "\"use client\";\r\n\r\nimport * as React from \"react\";\r\n\r\nimport { ChevronsUpDown } from \"lucide-react\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Collapsible,\r\n  CollapsibleContent,\r\n  CollapsibleTrigger,\r\n} from \"@/components/ui/collapsible\";\r\n\r\nexport default function CollapsibleDefault() {\r\n  const [isOpen, setIsOpen] = React.useState(false);\r\n\r\n  return (\r\n    <Collapsible\r\n      open={isOpen}\r\n      onOpenChange={setIsOpen}\r\n      className='w-[350px] space-y-2'\r\n    >\r\n      <div className='flex items-center justify-between space-x-4 px-4'>\r\n        <h4 className='text-sm font-semibold'>\r\n          @peduarte starred 3 repositories\r\n        </h4>\r\n        <CollapsibleTrigger asChild>\r\n          <Button variant='ghost' size='sm'>\r\n            <ChevronsUpDown className='h-4 w-4' />\r\n            <span className='sr-only'>Toggle</span>\r\n          </Button>\r\n        </CollapsibleTrigger>\r\n      </div>\r\n      <div className='rounded-md border px-4 py-2 font-mono text-sm shadow-sm'>\r\n        @radix-ui/primitives\r\n      </div>\r\n      <CollapsibleContent className='space-y-2'>\r\n        <div className='rounded-md border px-4 py-2 font-mono text-sm shadow-sm'>\r\n          @radix-ui/colors\r\n        </div>\r\n        <div className='rounded-md border px-4 py-2 font-mono text-sm shadow-sm'>\r\n          @stitches/react\r\n        </div>\r\n      </CollapsibleContent>\r\n    </Collapsible>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/collapsible/collapsible-default.tsx"
          ),
      ),
    },

    "collapsible-file-tree": {
      name: "collapsible-file-tree",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/collapsible/collapsible-file-tree.tsx",
          content:
            '"use client";\r\n\r\nimport * as React from "react";\r\n\r\nimport { ChevronRight, FileIcon, FolderIcon } from "lucide-react";\r\n\r\nimport {\r\n  Collapsible,\r\n  CollapsibleContent,\r\n  CollapsibleTrigger,\r\n} from "@/components/ui/collapsible";\r\n\r\ninterface FileTreeItem {\r\n  name: string;\r\n  type: "folder" | "file";\r\n  children?: FileTreeItem[];\r\n}\r\n\r\nconst fileTree: FileTreeItem[] = [\r\n  {\r\n    name: "src",\r\n    type: "folder",\r\n    children: [\r\n      {\r\n        name: "components",\r\n        type: "folder",\r\n        children: [\r\n          { name: "button.tsx", type: "file" },\r\n          { name: "input.tsx", type: "file" },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    name: "public",\r\n    type: "folder",\r\n    children: [\r\n      { name: "favicon.ico", type: "file" },\r\n      { name: "index.html", type: "file" },\r\n    ],\r\n  },\r\n  {\r\n    name: "package.json",\r\n    type: "file",\r\n  },\r\n];\r\n\r\nexport default function FileTreeCollapsible() {\r\n  return (\r\n    <div className=\'w-[350px] bg-accent p-4 rounded-lg\'>\r\n      <div className=\'w-full -ml-4\'>\r\n        {fileTree.map((treeItem) => (\r\n          <FileTreeItem key={treeItem.name} {...treeItem} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst FileTreeItem = ({ name, type, children }: FileTreeItem) => {\r\n  if (type === "file") {\r\n    return (\r\n      <div className=\'flex items-center gap-2 pl-10 py-1\'>\r\n        <FileIcon className=\'h-4 w-4\' /> {name}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Collapsible className=\'pl-4\'>\r\n      <CollapsibleTrigger className=\'w-full group flex items-center gap-2 py-1\'>\r\n        <ChevronRight className=\'h-4 w-4 group-data-[state=open]:rotate-90 transition-transform\' />\r\n        <span className=\'flex items-center gap-2\'>\r\n          <FolderIcon className=\'h-4 w-4 fill-current\' /> {name}\r\n        </span>\r\n      </CollapsibleTrigger>\r\n      <CollapsibleContent>\r\n        {children?.map((child) => <FileTreeItem key={child.name} {...child} />)}\r\n      </CollapsibleContent>\r\n    </Collapsible>\r\n  );\r\n};\r\n',
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/collapsible/collapsible-file-tree.tsx"
          ),
      ),
    },

    "collapsible-show-more": {
      name: "collapsible-show-more",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/collapsible/collapsible-show-more.tsx",
          content:
            "\"use client\";\r\n\r\nimport * as React from \"react\";\r\n\r\nimport { ChevronDown, ChevronUp } from \"lucide-react\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Collapsible,\r\n  CollapsibleContent,\r\n  CollapsibleTrigger,\r\n} from \"@/components/ui/collapsible\";\r\n\r\nexport default function ShowMoreCollapsible() {\r\n  const [isOpen, setIsOpen] = React.useState(false);\r\n\r\n  return (\r\n    <Collapsible\r\n      open={isOpen}\r\n      onOpenChange={setIsOpen}\r\n      className='w-full max-w-xs space-y-2'\r\n    >\r\n      {Array.from({ length: 2 }).map((_, index) => (\r\n        <div key={index} className='flex items-center gap-2'>\r\n          <div className='h-10 w-10 shrink-0 rounded-full bg-accent' />\r\n          <div className='w-full flex flex-col gap-1.5'>\r\n            <div className='h-2.5 w-[40%] rounded-lg bg-accent' />\r\n            <div className='h-2.5 w-full rounded-lg bg-accent' />\r\n          </div>\r\n        </div>\r\n      ))}\r\n      <CollapsibleContent className='space-y-2'>\r\n        {Array.from({ length: 3 }).map((_, index) => (\r\n          <div key={index + 2} className='flex items-center gap-2'>\r\n            <div className='h-10 w-10 shrink-0 rounded-full bg-accent' />\r\n            <div className='w-full flex flex-col gap-1.5'>\r\n              <div className='h-2.5 w-[40%] rounded-lg bg-accent' />\r\n              <div className='h-2.5 w-full rounded-lg bg-accent' />\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </CollapsibleContent>\r\n      <CollapsibleTrigger asChild>\r\n        <Button\r\n          variant='outline'\r\n          size='sm'\r\n          className='!mt-4 data-[state=open]:hidden'\r\n        >\r\n          Show more <ChevronDown />\r\n        </Button>\r\n      </CollapsibleTrigger>\r\n      <CollapsibleTrigger asChild>\r\n        <Button\r\n          variant='outline'\r\n          size='sm'\r\n          className='!mt-4 data-[state=open]:inline-flex hidden'\r\n        >\r\n          Show less <ChevronUp />\r\n        </Button>\r\n      </CollapsibleTrigger>\r\n    </Collapsible>\r\n  );\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () =>
          import(
            "@/registry/default/snippets/collapsible/collapsible-show-more.tsx"
          ),
      ),
    },

    "spinner-circle": {
      name: "spinner-circle",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/spinner/spinner-circle.tsx",
          content:
            "import { Loader2Icon } from \"lucide-react\";\r\n\r\nexport default function SpinnerCircle() {\r\n  return <Loader2Icon className='animate-spin' />;\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/snippets/spinner/spinner-circle.tsx"),
      ),
    },

    "spinner-default": {
      name: "spinner-default",
      description: "",
      type: "registry:ui",
      files: [
        {
          path: "registry/default/snippets/spinner/spinner-default.tsx",
          content:
            "import { LoaderIcon } from \"lucide-react\";\r\n\r\nexport default function SpinnerDefault() {\r\n  return <LoaderIcon className='animate-spin' />;\r\n}\r\n",
          type: "registry:ui",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/snippets/spinner/spinner-default.tsx"),
      ),
    },

    "use-boolean": {
      name: "use-boolean",
      description: "",
      type: "registry:hook",
      files: [
        {
          path: "registry/default/hooks/use-boolean.ts",
          content:
            'import * as React from "react";\n\ntype UseBooleanReturn = {\n  value: boolean;\n  setValue: React.Dispatch<React.SetStateAction<boolean>>;\n  setTrue: () => void;\n  setFalse: () => void;\n  toggle: () => void;\n};\n\nexport function useBoolean(defaultValue = false): UseBooleanReturn {\n  if (typeof defaultValue !== "boolean") {\n    throw new Error("defaultValue must be `true` or `false`");\n  }\n  const [value, setValue] = React.useState(defaultValue);\n\n  const toggle = React.useCallback(() => {\n    setValue((x) => !x);\n  }, []);\n\n  const setTrue = React.useCallback(() => {\n    setValue(true);\n  }, []);\n\n  const setFalse = React.useCallback(() => {\n    setValue(false);\n  }, []);\n\n  return { value, setValue, setTrue, setFalse, toggle };\n}\n',
          type: "registry:hook",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/hooks/use-boolean.ts"),
      ),
    },

    "use-callback-ref": {
      name: "use-callback-ref",
      description: "",
      type: "registry:hook",
      files: [
        {
          path: "registry/default/hooks/use-callback-ref.ts",
          content:
            'import * as React from "react";\n\nfunction useCallbackRef<T extends (...args: never[]) => unknown>(\n  callback: T | undefined,\n): T {\n  const callbackRef = React.useRef(callback);\n\n  React.useEffect(() => {\n    callbackRef.current = callback;\n  });\n\n  return React.useMemo(\n    () => ((...args) => callbackRef.current?.(...args)) as T,\n    [],\n  );\n}\n\nexport { useCallbackRef };\n',
          type: "registry:hook",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/hooks/use-callback-ref.ts"),
      ),
    },

    "use-click-outside": {
      name: "use-click-outside",
      description: "",
      type: "registry:hook",
      files: [
        {
          path: "registry/default/hooks/use-click-outside.ts",
          content:
            'import * as React from "react";\n\nconst DEFAULT_EVENTS = ["mousedown", "touchstart"];\n\nexport function useClickOutside<T extends HTMLElement = any>(\n  handler: () => void,\n  events?: string[] | null,\n  nodes?: (HTMLElement | null)[],\n) {\n  const ref = React.useRef<T>(null);\n\n  React.useEffect(() => {\n    const listener = (event: any) => {\n      const { target } = event ?? {};\n      if (Array.isArray(nodes)) {\n        const shouldIgnore =\n          target?.hasAttribute("data-ignore-outside-clicks") ||\n          (!document.body.contains(target) && target.tagName !== "HTML");\n        const shouldTrigger = nodes.every(\n          (node) => !!node && !event.composedPath().includes(node),\n        );\n        shouldTrigger && !shouldIgnore && handler();\n      } else if (ref.current && !ref.current.contains(target)) {\n        handler();\n      }\n    };\n\n    (events || DEFAULT_EVENTS).forEach((fn) =>\n      document.addEventListener(fn, listener),\n    );\n\n    return () => {\n      (events || DEFAULT_EVENTS).forEach((fn) =>\n        document.removeEventListener(fn, listener),\n      );\n    };\n  }, [ref, handler, nodes]);\n\n  return ref;\n}\n',
          type: "registry:hook",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/hooks/use-click-outside.ts"),
      ),
    },

    "use-controllable-state": {
      name: "use-controllable-state",
      description: "",
      type: "registry:hook",
      files: [
        {
          path: "registry/default/hooks/use-controllable-state.ts",
          content:
            'import * as React from "react";\n\nimport { useCallbackRef } from "@/registry/default/hooks/use-callback-ref";\n\ntype UseControllableStateParams<T> = {\n  prop?: T | undefined;\n  defaultProp?: T | undefined;\n  onChange?: (state: T) => void;\n};\n\ntype SetStateFn<T> = (prevState?: T) => T;\n\nfunction useControllableState<T>({\n  prop,\n  defaultProp,\n  onChange = () => {},\n}: UseControllableStateParams<T>) {\n  const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({\n    defaultProp,\n    onChange,\n  });\n  const isControlled = prop !== undefined;\n  const value = isControlled ? prop : uncontrolledProp;\n  const handleChange = useCallbackRef(onChange);\n\n  const setValue: React.Dispatch<React.SetStateAction<T | undefined>> =\n    React.useCallback(\n      (nextValue) => {\n        if (isControlled) {\n          const setter = nextValue as SetStateFn<T>;\n          const value =\n            typeof nextValue === "function" ? setter(prop) : nextValue;\n          if (value !== prop) handleChange(value as T);\n        } else {\n          setUncontrolledProp(nextValue);\n        }\n      },\n      [isControlled, prop, setUncontrolledProp, handleChange],\n    );\n\n  return [value, setValue] as const;\n}\n\nfunction useUncontrolledState<T>({\n  defaultProp,\n  onChange,\n}: Omit<UseControllableStateParams<T>, "prop">) {\n  const uncontrolledState = React.useState<T | undefined>(defaultProp);\n  const [value] = uncontrolledState;\n  const prevValueRef = React.useRef(value);\n  const handleChange = useCallbackRef(onChange);\n\n  React.useEffect(() => {\n    if (prevValueRef.current !== value) {\n      handleChange(value as T);\n      prevValueRef.current = value;\n    }\n  }, [value, prevValueRef, handleChange]);\n\n  return uncontrolledState;\n}\n\nexport { useControllableState };\n',
          type: "registry:hook",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/hooks/use-controllable-state.ts"),
      ),
    },

    "use-debounce": {
      name: "use-debounce",
      description: "",
      type: "registry:hook",
      files: [
        {
          path: "registry/default/hooks/use-debounce.ts",
          content:
            'import * as React from "react";\n\nexport function useDebounce<T>(value: T, delay?: number): T {\n  const [debouncedValue, setDebouncedValue] = React.useState<T>(value);\n\n  React.useEffect(() => {\n    const timer = setTimeout(() => setDebouncedValue(value), delay || 500);\n    return () => clearTimeout(timer);\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n',
          type: "registry:hook",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/hooks/use-debounce.ts"),
      ),
    },

    "use-element-size": {
      name: "use-element-size",
      description: "",
      type: "registry:hook",
      files: [
        {
          path: "registry/default/hooks/use-element-size.ts",
          content:
            'import * as React from "react";\n\ntype ObserverRect = Omit<DOMRectReadOnly, "toJSON">;\n\nconst defaultState: ObserverRect = {\n  x: 0,\n  y: 0,\n  width: 0,\n  height: 0,\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0,\n};\n\nexport function useResizeObserver<T extends HTMLElement = any>(\n  options?: ResizeObserverOptions,\n) {\n  const frameID = React.useRef(0);\n  const ref = React.useRef<T>(null);\n\n  const [rect, setRect] = React.useState<ObserverRect>(defaultState);\n\n  const observer = React.useMemo(\n    () =>\n      typeof window !== "undefined"\n        ? new ResizeObserver((entries: any) => {\n            const entry = entries[0];\n\n            if (entry) {\n              cancelAnimationFrame(frameID.current);\n\n              frameID.current = requestAnimationFrame(() => {\n                if (ref.current) {\n                  setRect(entry.contentRect);\n                }\n              });\n            }\n          })\n        : null,\n    [],\n  );\n\n  React.useEffect(() => {\n    if (ref.current) {\n      observer?.observe(ref.current, options);\n    }\n\n    return () => {\n      observer?.disconnect();\n\n      if (frameID.current) {\n        cancelAnimationFrame(frameID.current);\n      }\n    };\n  }, [ref.current]);\n\n  return [ref, rect] as const;\n}\n\nexport function useElementSize<T extends HTMLElement = any>(\n  options?: ResizeObserverOptions,\n) {\n  const [ref, { width, height }] = useResizeObserver<T>(options);\n  return { ref, width, height };\n}\n',
          type: "registry:hook",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/hooks/use-element-size.ts"),
      ),
    },

    "use-fullscreen": {
      name: "use-fullscreen",
      description: "",
      type: "registry:hook",
      files: [
        {
          path: "registry/default/hooks/use-fullscreen.ts",
          content:
            'import * as React from "react";\n\nfunction getFullscreenElement(): HTMLElement | null {\n  const _document = window.document as any;\n\n  const fullscreenElement =\n    _document.fullscreenElement ||\n    _document.webkitFullscreenElement ||\n    _document.mozFullScreenElement ||\n    _document.msFullscreenElement;\n\n  return fullscreenElement;\n}\n\nfunction exitFullscreen() {\n  const _document = window.document as any;\n\n  if (typeof _document.exitFullscreen === "function") {\n    return _document.exitFullscreen();\n  }\n  if (typeof _document.msExitFullscreen === "function") {\n    return _document.msExitFullscreen();\n  }\n  if (typeof _document.webkitExitFullscreen === "function") {\n    return _document.webkitExitFullscreen();\n  }\n  if (typeof _document.mozCancelFullScreen === "function") {\n    return _document.mozCancelFullScreen();\n  }\n\n  return null;\n}\n\nfunction enterFullScreen(element: HTMLElement) {\n  const _element = element as any;\n\n  return (\n    _element.requestFullscreen?.() ||\n    _element.msRequestFullscreen?.() ||\n    _element.webkitEnterFullscreen?.() ||\n    _element.webkitRequestFullscreen?.() ||\n    _element.mozRequestFullscreen?.()\n  );\n}\n\nconst prefixes = ["", "webkit", "moz", "ms"];\n\nfunction addEvents(\n  element: HTMLElement,\n  {\n    onFullScreen,\n    onError,\n  }: { onFullScreen: (event: Event) => void; onError: (event: Event) => void },\n) {\n  prefixes.forEach((prefix) => {\n    element.addEventListener(`${prefix}fullscreenchange`, onFullScreen);\n    element.addEventListener(`${prefix}fullscreenerror`, onError);\n  });\n\n  return () => {\n    prefixes.forEach((prefix) => {\n      element.removeEventListener(`${prefix}fullscreenchange`, onFullScreen);\n      element.removeEventListener(`${prefix}fullscreenerror`, onError);\n    });\n  };\n}\n\nexport function useFullscreen<T extends HTMLElement = any>() {\n  const [fullscreen, setFullscreen] = React.useState<boolean>(false);\n\n  const _ref = React.useRef<T>(null);\n\n  const handleFullscreenChange = React.useCallback(\n    (event: Event) => {\n      setFullscreen(event.target === getFullscreenElement());\n    },\n    [setFullscreen],\n  );\n\n  const handleFullscreenError = React.useCallback(\n    (event: Event) => {\n      setFullscreen(false);\n      // eslint-disable-next-line no-console\n      console.error(\n        `[@mantine/hooks] use-fullscreen: Error attempting full-screen mode method: ${event} (${event.target})`,\n      );\n    },\n    [setFullscreen],\n  );\n\n  const toggle = React.useCallback(async () => {\n    if (!getFullscreenElement()) {\n      await enterFullScreen(_ref.current!);\n    } else {\n      await exitFullscreen();\n    }\n  }, []);\n\n  const ref = React.useCallback((element: T | null) => {\n    if (element === null) {\n      _ref.current = window.document.documentElement as T;\n    } else {\n      _ref.current = element;\n    }\n  }, []);\n\n  React.useEffect(() => {\n    if (!_ref.current && window.document) {\n      _ref.current = window.document.documentElement as T;\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError,\n      });\n    }\n\n    if (_ref.current) {\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError,\n      });\n    }\n\n    return undefined;\n  }, [_ref.current]);\n\n  return { ref, toggle, fullscreen } as const;\n}\n',
          type: "registry:hook",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/hooks/use-fullscreen.ts"),
      ),
    },

    "use-mobile": {
      name: "use-mobile",
      description: "",
      type: "registry:hook",
      files: [
        {
          path: "registry/default/hooks/use-mobile.ts",
          content:
            'import * as React from "react";\n\nimport debounce from "lodash.debounce";\n\nconst useIsMobile = (): boolean => {\n  const [isMobile, setIsMobile] = React.useState(false);\n\n  React.useLayoutEffect(() => {\n    const updateSize = (): void => {\n      setIsMobile(window.innerWidth < 768);\n    };\n    const debouncedUpdateSize = debounce(updateSize, 250);\n\n    updateSize();\n\n    window.addEventListener("resize", debouncedUpdateSize);\n\n    return (): void =>\n      window.removeEventListener("resize", debouncedUpdateSize);\n  }, []);\n\n  return isMobile;\n};\n\nexport default useIsMobile;\n',
          type: "registry:hook",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/hooks/use-mobile.ts"),
      ),
    },

    "use-mounted": {
      name: "use-mounted",
      description: "",
      type: "registry:hook",
      files: [
        {
          path: "registry/default/hooks/use-mounted.ts",
          content:
            'import { useEffect, useState } from "react";\n\nexport function useMounted() {\n  const [mounted, setMounted] = useState(false);\n  useEffect(() => setMounted(true), []);\n  return mounted;\n}\n',
          type: "registry:hook",
        },
      ],
      component: React.lazy(
        () => import("@/registry/default/hooks/use-mounted.ts"),
      ),
    },
  },
};
