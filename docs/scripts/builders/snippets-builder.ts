import * as fs from "fs";
import * as path from "path";

import type { Registry } from "@/registry/schema";

import { config } from "./config";

export function buildSnippetsRegistry(): void {
  console.log("ðŸ”¨ Building snippets registry...");

  // Check if snippets directory exists
  if (!fs.existsSync(config.SNIPPETS_DIR)) {
    fs.mkdirSync(config.SNIPPETS_DIR, { recursive: true });
    console.log("âœ… Created registry/default/snippets directory");
    return;
  }

  // Read all subdirectories in snippets directory
  const subdirs = fs
    .readdirSync(config.SNIPPETS_DIR, { withFileTypes: true })
    .filter((dirent) => dirent.isDirectory())
    .map((dirent) => dirent.name);

  const registry: Registry = [];

  // Create a map of category to component names for index.ts
  const categoryComponentsMap: Record<string, string[]> = {};

  // Process each subdirectory
  for (const subdir of subdirs) {
    const subdirPath = path.join(config.SNIPPETS_DIR, subdir);

    // Initialize the category in the map
    categoryComponentsMap[subdir] = [];

    // Read all .tsx files in the subdirectory
    const files = fs
      .readdirSync(subdirPath)
      .filter((file) => file.endsWith(".tsx"));

    // Process each file in the subdirectory
    for (const file of files) {
      const name = path.basename(file, ".tsx");
      const relativePath = path
        .join("registry/default/snippets", subdir, file)
        .replace(/\\/g, "/");

      // Add component name to the category map
      categoryComponentsMap[subdir].push(name);

      // Read file content
      const content = fs.readFileSync(path.join(subdirPath, file), "utf8");

      registry.push({
        name,
        type: "registry:ui",
        files: [
          {
            path: relativePath,
            content,
            type: "registry:ui",
          },
        ],
      });
    }
  }

  // Generate registry-snippets.ts content
  const content = `import type { Registry } from "@/registry/schema";

export const snippets: Registry = ${JSON.stringify(registry, null, 2)};
`;

  // Write file
  fs.writeFileSync(config.SNIPPETS_OUTPUT_FILE, content);
  console.log("âœ… Generated registry/registry-snippets.ts");

  // Generate index.ts file with category to components mapping
  const indexContent = `// This file is auto-generated by scripts/build-registry.ts
// Do not edit this file directly

${Object.entries(categoryComponentsMap)
  .map(
    ([category, components]) =>
      `export const ${category}Components = ${JSON.stringify(
        components.map((name) => ({ name })),
        null,
        2,
      )};`,
  )
  .join("\n\n")}

export const categories = {
${Object.keys(categoryComponentsMap)
  .map((category) => `  ${category}: ${category}Components,`)
  .join("\n")}
};
`;

  // Write index.ts file
  fs.writeFileSync(path.join(config.SNIPPETS_DIR, "index.ts"), indexContent);
  console.log("âœ… Generated registry/default/snippets/index.ts");
}
