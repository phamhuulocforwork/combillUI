{
  "name": "star-rating",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "react",
    "lucide-react"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "star-rating.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport { Star } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nlet nextId = 0;\nconst generateStarIds = (count: number) =>\n  Array.from({ length: count }, () => `star-${nextId++}`);\n\ninterface StarRatingProps {\n  value: number;\n  onChange?: (value: number) => void;\n  className?: string;\n  size?: number;\n  maxStars?: number;\n  readOnly?: boolean;\n  color?: string;\n}\n\nconst StarIcon = React.memo(\n  ({\n    size,\n    index,\n    isInteractive,\n    onClick,\n    onMouseMove,\n    style,\n  }: {\n    index: number;\n    style: React.CSSProperties;\n    size: number;\n    onClick: (e: React.MouseEvent<SVGElement>) => void;\n    onMouseMove: (e: React.MouseEvent<SVGElement>) => void;\n    isInteractive: boolean;\n  }) => (\n    <Star\n      key={index}\n      size={size}\n      fill={style.fill}\n      color={style.color}\n      onClick={onClick}\n      onMouseMove={onMouseMove}\n      className={cn(\n        \"transition-colors duration-200\",\n        isInteractive && \"cursor-pointer hover:scale-110\",\n      )}\n      style={style}\n    />\n  ),\n);\nStarIcon.displayName = \"StarIcon\";\n\nconst StarRating = ({\n  className,\n  color = \"#e4c616\",\n  size = 24,\n  maxStars = 5,\n  onChange,\n  readOnly = false,\n  value,\n}: StarRatingProps) => {\n  const [hoverRating, setHoverRating] = React.useState<number | null>(null);\n  const [starIds] = React.useState(() => generateStarIds(maxStars));\n\n  const handleStarClick = React.useCallback(\n    (index: number, event: React.MouseEvent<SVGElement>) => {\n      if (readOnly || !onChange) return;\n      const newRating = index + 1;\n      onChange(newRating);\n    },\n    [readOnly, onChange],\n  );\n\n  const handleStarHover = React.useCallback(\n    (index: number, event: React.MouseEvent<SVGElement>) => {\n      if (!readOnly) {\n        setHoverRating(index + 1);\n      }\n    },\n    [readOnly],\n  );\n\n  const handleMouseLeave = React.useCallback(() => {\n    if (!readOnly) {\n      setHoverRating(null);\n    }\n  }, [readOnly]);\n\n  const getStarStyle = React.useCallback(\n    (index: number) => {\n      const ratingToUse =\n        !readOnly && hoverRating !== null ? hoverRating : value;\n\n      const difference = ratingToUse - index;\n\n      if (difference <= 0) return { color: \"gray\", fill: \"transparent\" };\n      if (difference >= 1) return { color: color, fill: color };\n\n      return {\n        color: color,\n        fill: `url(#${starIds[index]})`,\n      } as React.CSSProperties;\n    },\n    [readOnly, hoverRating, value, color, starIds],\n  );\n\n  const renderGradientDefs = () => {\n    if (!readOnly && hoverRating !== null) return null;\n\n    const partialStarIndex = Math.floor(value);\n    const partialFill = (value % 1) * 100;\n\n    if (partialFill > 0) {\n      return (\n        <linearGradient\n          id={starIds[partialStarIndex]}\n          x1='0%'\n          y1='0%'\n          x2='100%'\n          y2='0%'\n        >\n          <stop offset={`${partialFill}%`} stopColor={color} />\n          <stop offset={`${partialFill}%`} stopColor='transparent' />\n        </linearGradient>\n      );\n    }\n    return null;\n  };\n\n  const stars = React.useMemo(() => {\n    return Array.from({ length: maxStars }).map((_, index) => {\n      const style = getStarStyle(index);\n      return (\n        <StarIcon\n          key={index}\n          index={index}\n          style={style}\n          size={size}\n          onClick={(e) => handleStarClick(index, e)}\n          onMouseMove={(e) => handleStarHover(index, e)}\n          isInteractive={!readOnly}\n        />\n      );\n    });\n  }, [\n    maxStars,\n    getStarStyle,\n    size,\n    handleStarClick,\n    handleStarHover,\n    readOnly,\n  ]);\n\n  return (\n    <div\n      className={cn(\"relative flex items-center gap-x-0.5\", className)}\n      onMouseLeave={handleMouseLeave}\n    >\n      <svg width='0' height='0' style={{ position: \"absolute\" }}>\n        <defs>{renderGradientDefs()}</defs>\n      </svg>\n      {stars}\n    </div>\n  );\n};\n\nexport default StarRating;\n",
      "type": "registry:ui"
    }
  ]
}