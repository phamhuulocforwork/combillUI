import * as fs from "fs";
import * as path from "path";

import type { Component, ComponentFile } from "@/registry/schema";

import { config } from "./config";

export async function buildMainRegistry(): Promise<void> {
  console.log("ðŸ”¨ Building main registry...");

  // Dynamically import registry after it's been generated
  const { registry } = await import("@/registry");

  const components: Record<string, Component> = {};

  for (const component of registry) {
    const { name, description = "", type, files } = component;

    const processedFiles: ComponentFile[] = files.map((file) => ({
      ...file,
    }));

    components[name] = {
      name,
      description,
      type,
      files: processedFiles,
    };
  }

  const registryContent = `// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react";

export const Index: Record<string, any> = {
  default: {
    ${Object.entries(components)
      .map(
        ([name, component]) => `
    "${name}": {
      name: "${name}",
      description: "${component.description}",
      type: "${component.type}",
      files: ${JSON.stringify(component.files, null, 2)},
      component: React.lazy(() => import("@/${component.files[0].path}")),
    }`,
      )
      .join(",\n")}
  }
};`;

  const registryDir = path.dirname(config.REGISTRY_OUTPUT_FILE);
  if (!fs.existsSync(registryDir)) {
    fs.mkdirSync(registryDir, { recursive: true });
  }

  fs.writeFileSync(config.REGISTRY_OUTPUT_FILE, registryContent);
  console.log("âœ… Generated __registry__/index.tsx");
}
