# Expert Guidelines

You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind.

Code Style and Structure

- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.
- Use console.log({value}) instead of console.log(value)
- Use onCallback instead of handleCallback

Naming Conventions

- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript Usage

- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

Syntax and Formatting

- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.

UI and Styling

- Use Shadcn UI, Radix, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

Performance Optimization

- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.

Key Conventions

- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client':
  - Favor server components and Next.js SSR.
  - Use only for Web API access in small components.
  - Avoid for data fetching or state management.

Follow Next.js docs for Data Fetching, Rendering, and Routing.

---

# Documentation Template Guidelines

When creating documentation for components, follow this standard template structure:

## Standard Component Documentation Template

````mdx
---
title: Component Name
description: A brief description of the component and its function.
preview: true
---

<ComponentTabs name='component-name-default' />

## Installation

<ShadcnTabs defaultValue='cli'>
  <TabsList>
    <TabsTrigger value='cli'>
      CLI
    </TabsTrigger>
    <TabsTrigger value='manual'>
      Manual
    </TabsTrigger>
  </TabsList>

  <TabsContent value='cli'>
    <Tabs items={["npm", "pnpm", "yarn", "bun"]}>
      <Tab value="npm">
        ```bash
        npx shadcn@latest add 'https://combillui.vercel.app/registry/component-name.json';
        ```
      </Tab>
      
      <Tab value="pnpm">
        ```bash 
        pnpm dlx shadcn@latest add 'https://combillui.vercel.app/registry/component-name.json';
        ```
      </Tab>

      <Tab value="yarn">
        ```bash
        npx dlx shadcn@latest add 'https://combillui.vercel.app/registry/component-name.json';
        ```
      </Tab>

      <Tab value="bun">
        ```bash
        bunx --bun shadcn@latest add 'https://combillui.vercel.app/registry/component-name.json';
        ```
      </Tab>
    </Tabs>

  </TabsContent>

  <TabsContent value='manual'>
    <Steps>
      <Step>
        Install dependencies (if any)
        ```bash
        npx shadcn@latest add dependency-1
        ```
        ```bash
        npx shadcn@latest add dependency-2
        ```
      </Step>
      <Step>
        Copy and paste the following code into your project.
        <ComponentSource name="component-name" />
      </Step>
    </Steps>
  </TabsContent>
</ShadcnTabs>

## Usage

```tsx
import {
  ComponentName,
  ComponentSubPart1,
  ComponentSubPart2,
} from "@/components/ui/component-name";
```

## Examples

### Basic Example

<ComponentTabs name='component-name-basic' />

...Other examples if I have a request

## API Reference

### ComponentName

| Prop      | Type                                    | Default     | Description          |
| --------- | --------------------------------------- | ----------- | -------------------- |
| `prop1`   | `string`                                | `"default"` | Description of prop1 |
| `prop2`   | `boolean`                               | `false`     | Description of prop2 |
| `variant` | `"default" \| "variant1" \| "variant2"` | `"default"` | Component variant    |

### ComponentSubPart1

| Prop       | Type     | Default | Description             |
| ---------- | -------- | ------- | ----------------------- |
| `subProp1` | `string` | `""`    | Description of subProp1 |

## Accessibility (Keyboard Interactions,... if any)

## Template Usage Guidelines

When using the template:

1. **Replace placeholder parts**:

   - `Component Name` - The name of the component
   - `component-name` - The name of the component in kebab-case (used for imports and URLs)
   - `ComponentName` - The name of the component in PascalCase (used for imports)
   - Description, props, and variants parts

2. **Customize for specific components**:

   - Add/remove API Reference sections for specific components
   - Add/remove examples based on the complexity of the component
   - Adjust dependencies in the manual installation section

3. **Always include basic parts**:

   - Metadata (title, description, preview)
   - Default demo
   - Installation instructions (CLI and Manual)
   - Basic usage

4. **For complex components**, you may add:
   - "Best Practices" section
   - "Accessibility" section
   - "Browser Compatibility" section

<CURRENT_CURSOR_POSITION>

```

```
````
